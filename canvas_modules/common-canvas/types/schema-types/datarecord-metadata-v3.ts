/*
 * Copyright 2017-2024 Elyra Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { AppDataDef } from "./app-data-def-v3";

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript --unreachableDefinitions
 * from https://github.com/elyra-ai/pipeline-schemas/blob/main/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json
 * It has been modified by hand, so run a diff if you need to update it.
 */

/**
 * Metadata schema for datarecords in the Watson Data Platform
 */
export interface WatsonDataPlatformDatarecordMetadataSchema {
  [k: string]: unknown;
}
/**
 * Description of a datarecord including column types and metadata
 *
 * This interface was referenced by `WatsonDataPlatformDatarecordMetadataSchema`'s JSON-Schema
 * via the `definition` "record_schema".
 */
export interface RecordSchema {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Name of datarecord
   */
  name?: string;
  /**
   * Refers to the JSON schema used to validate documents of this type
   */
  json_schema?: 'https://api.dataplatform.ibm.com/schemas/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json';
  /**
   * Always 'struct' for datarecord schema
   */
  type?: string;
  /**
   * Array of field definitions
   *
   * @minItems 0
   */
  fields: Field[];
  /**
   * The list of custom struct types to be used as field types
   */
  struct_types?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".".
     */
    [k: string]: {
      /**
       * Array of field definitions
       *
       * @minItems 0
       */
      fields?: Field[];
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
}
/**
 * Definition of a datarecord field
 *
 * This interface was referenced by `WatsonDataPlatformDatarecordMetadataSchema`'s JSON-Schema
 * via the `definition` "field".
 */
export interface Field {
  /**
   * Field name. Must be unique within the datarecord
   */
  name: string;
  /**
   * Field type. Can be a primitive type (string, integer, double, date, time, timestamp, binary, boolean, array[type], map[type, type]. The type can also be a reference to a struct_type declaration.)
   */
  type: string;
  /**
   * Whether or not one can place null values into the field
   */
  nullable?: boolean;
  metadata?: Metadata;
  app_data?: AppDataDef;
  [k: string]: unknown;
}
/**
 * Additional field metadata
 *
 * This interface was referenced by `WatsonDataPlatformDatarecordMetadataSchema`'s JSON-Schema
 * via the `definition` "metadata".
 */
export interface Metadata {
  /**
   * Field description
   */
  description?: string;
  /**
   * Field measurement level
   */
  measure?:
    | 'range'
    | 'discrete'
    | 'flag'
    | 'set'
    | 'ordered-set'
    | 'typeless'
    | 'collection'
    | 'geospatial'
    | 'default';
  /**
   * Field role for modeling
   */
  modeling_role?:
    | 'input'
    | 'target'
    | 'both'
    | 'none'
    | 'partition'
    | 'split'
    | 'frequency'
    | 'record-id';
  /**
   * Maximum length for fields. Length is unlimited when not present
   */
  max_length?: number;
  /**
   * Minimum length for fields
   */
  min_length?: number;
  /**
   * Precision for decimal, time, and timestamp types
   */
  decimal_precision?: number;
  /**
   * Scale for decimal, time, and timestamp types
   */
  decimal_scale?: number;
  /**
   * Array of unique categorical values for the column
   *
   * @minItems 0
   */
  values?: (string | number | boolean)[];
  /**
   * Minimum and maximum discovered values for scalar data
   */
  range?: {
    /**
     * Lowest value discovered in the data
     */
    min: string | number;
    /**
     * Highest value discovered in the data
     */
    max: string | number;
    [k: string]: unknown;
  };
  /**
   * Type of runtime
   */
  runtime_type?: string;
  /**
   * A field is key
   */
  is_key?: boolean;
  /**
   * Signed or Unsigned for number
   */
  is_signed?: boolean;
  /**
   * Item record level
   */
  item_index?: number;
  /**
   * Source field for a target field
   */
  source_field_id?: string;
  [k: string]: unknown;
}
