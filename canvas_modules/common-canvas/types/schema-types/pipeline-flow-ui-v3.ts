/*
 * Copyright 2017-2024 Elyra Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript --unreachableDefinitions
 * from https://github.com/elyra-ai/pipeline-schemas/blob/main/common-pipeline/pipeline-flow/pipeline-flow-ui-v3-schema.json
 * after removing broken $ref URL's.
 * It has been modified by hand, so run a diff if you need to update it.
 */

import { PipelineDef as NonUiPipelineDef } from './pipeline-flow-v3';

/**
 * WDP Pipeline Flow UI Schema. Defines UI-only constructs for pipeline flow documents.
 */
export interface HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson {
  [k: string]: unknown;
}
/**
 * Top level UI information
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "pipeline_overview_def".
 */
export interface PipelineOverviewDef {
  /**
   * User-defined name
   */
  name?: string;
  /**
   * User-defined description
   */
  description?: string;
  /**
   * CSS class name
   */
  class_name?: string;
  [k: string]: unknown;
}
/**
 * Pipeline level UI information
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "pipeline_def".
 */
export interface PipelineDef {
  /**
   * User-defined description
   */
  description?: string;
  zoom?:
    | number
    | {
        /**
         * Horizontal translation amount. Positive value moves right, negative to the left.
         */
        x: number;
        /**
         * Vertical translation amount. Positive value moves down, negative moves up.
         */
        y: number;
        /**
         * Scale amount. 1.0 is the standard scale amount. Smaller values zoom out. Larger values zoom in.
         */
        k: number;
      };
  /**
   * Array of Comments, optionally associated with nodes
   *
   * @minItems 0
   */
  comments?: CommentDef[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "comment_def".
 */
export interface CommentDef {
  /**
   * Comment identifier. Must be unique.
   */
  id: string;
  /**
   * Horizontal comment position
   */
  x_pos: number;
  /**
   * Vertical comment position
   */
  y_pos: number;
  /**
   * Comment width
   */
  width: number;
  /**
   * Comment height
   */
  height: number;
  /**
   * CSS class(es) to apply to the comment
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the comment.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Optional attributes to be added to this element. For example: "attributes": "attr1='value1'; attr2='value2'"
   */
  attributes?: string;
  /**
   * Comment content
   */
  content?: string;
  /**
   * Optional array of associated node id references
   *
   * @minItems 0
   */
  associated_id_refs?: CommentLinkDef[];
  [k: string]: unknown;
}
/**
 * Comment link definition
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "comment_link_def".
 */
export interface CommentLinkDef {
  /**
   * Node reference
   */
  node_ref: string;
  /**
   * CSS class name for link styling
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the comment link.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  [k: string]: unknown;
}
/**
 * Additional UI info for ports
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "port_info_def".
 */
export interface PortInfoDef {
  /**
   * Property to capture how many data assets are allowed for this port, e.g., min: 1, max:1 implies you must supply 1 and only 1; min:0, max:1 implies it is optional and a max of one, min:0, max:-1 means it is optional and you can may have any number of data assets. The default value is 1:1 for inputs and 1:-1 for outputs.
   */
  cardinality?: {
    /**
     * Minimum data sets that are required for this port
     */
    min?: number;
    /**
     * Maximum data sets that are allowed on this port. A negative value indicates unlimited. The default value is 1 for inputs and -1 for outputs.
     */
    max?: number;
  };
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the port.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Port name
   */
  label?: string;
  [k: string]: unknown;
}
/**
 * object with app-specific UI-information
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "node_info_def".
 */
export interface NodeInfoDef {
  /**
   * User-defined label
   */
  label?: string;
  /**
   * User-defined description
   */
  description?: string;
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the node.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * URL to image source. Although a data URL can be used to embed an image inline, it is not recommended. The 'image' property can also be a JSX object that displays an image using an <svg> element however, JSX images must be set programmatically and cannot be stringified into JSON.
   */
  image?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * x-position
   */
  x_pos?: number;
  /**
   * y-position
   */
  y_pos?: number;
  /**
   * Indicates whether a supernode is shown in expanded state or as a regular node.
   */
  is_expanded?: boolean;
  /**
   * Height of expanded supernode. If not provided an appropriate height is calculated.
   */
  expanded_height?: number;
  /**
   * Width of expanded supernode. If not provided an appropriate width is calculated.
   */
  expanded_width?: number;
  /**
   * Indicates whether a node has been resized or not. If true, resize_width and resize_height are used for node display. If false, the default width and height are used.
   */
  is_resized?: boolean;
  /**
   * Height of resized node. The node will be displayed with this height, when is_resized is true, in preference to its default height.
   */
  resize_height?: number;
  /**
   * Width of resized node. The node will be displayed with this width, when is_resized is true, in preference to its default width.
   */
  resize_width?: number;
  /**
   * An array of pipelines referenced when this node is a supernode. This field is only used when the supernode is in a palette or on the clipboard. It will be an empty array when the supernode references an external pipeline.
   *
   * @minItems 0
   */
  sub_pipelines?: NonUiPipelineDef[];
  /**
   * additional attributes
   */
  attributes?: string;
  /**
   * Array of non-data node linkage
   *
   * @minItems 0
   */
  associations?: AssociationDef[];
  /**
   * An array of messages for the node
   *
   * @minItems 0
   */
  messages?: MessageDef[];
  /**
   * UI only parameter values for the node
   */
  ui_parameters?: {
    [k: string]: unknown;
  };
  /**
   * Image name for the node displayed in palette. If omitted the image from 'image' field will be used.
   */
  palette_image?: string;
  /**
   * CSS class name applied to the <div> shown in palette for the node
   */
  palette_class_name?: string;
  /**
   * Indicates whether the node in the palette is disabled. If true, prevents the node being dragged or double-clicked from palette.
   */
  palette_disabled?: boolean;
  /**
   * Array of decorations used to decorate nodes
   *
   * @minItems 0
   */
  decorations?: DecorationDef[];
  [k: string]: unknown;
}
/**
 * Non-data link
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "association_def".
 */
export interface AssociationDef {
  /**
   * Association identifier
   */
  id: string;
  /**
   * Target node id
   */
  node_ref: string;
  /**
   * CSS class name for link styling
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the association link.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Array of decorations used to decorate association links
   *
   * @minItems 0
   */
  decorations?: DecorationDef[];
}
/**
 * Decoration used to decorate a node
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "decoration_def".
 */
export interface DecorationDef {
  /**
   * An identifier used to identify the decoration
   */
  id?: string;
  /**
   * Indicates whether the decorator is a hotspot or not. ie does it send an event to consuming app. when clicked
   */
  hotspot?: boolean;
  /**
   * CSS class name for decoration styling
   */
  class_name?: string;
  /**
   * Indicates an anchor point on the node or link from which the decoration will be displayed. If x_pos and y_pos are not provided the decoration is displayed with a default offset from this position.
   */
  position?:
    | 'topLeft'
    | 'topCenter'
    | 'topRight'
    | 'middleLeft'
    | 'middleCenter'
    | 'middleRight'
    | 'bottomLeft'
    | 'bottomCenter'
    | 'bottomRight'
    | 'source'
    | 'middle'
    | 'target';
  /**
   * X position of the decorator relative to the node's position field. If position is not provided it is relative to the 'topLeft' position
   */
  x_pos?: number;
  /**
   * Y position of the decorator relative to the node's position field. If position is not provided it is relative to the 'topLeft' position
   */
  y_pos?: number;
  /**
   * Image displayed at the decoration position. Provide either this or a label.
   */
  image?: string;
  /**
   * Label displayed at the decoration position. Provide either this or an image.
   */
  label?: string;
  [k: string]: unknown;
}
/**
 * Node message definition
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "message_def".
 */
export interface MessageDef {
  /**
   * Name of the parameter that has the message
   */
  id_ref: string;
  /**
   * Validation identifier from the fail_message validation section.
   */
  validation_id?: string;
  /**
   * Type of message
   */
  type: 'info' | 'error' | 'warning';
  /**
   * Message string
   */
  text: string;
  [k: string]: unknown;
}
/**
 * object with app-specific UI-information
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "node_link_info_def".
 */
export interface NodeLinkInfoDef {
  /**
   * User-defined description
   */
  description?: string;
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the node to node link.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Array of decorations used to decorate node links
   *
   * @minItems 0
   */
  decorations?: DecorationDef[];
  [k: string]: unknown;
}
/**
 * Runtime information
 *
 * This interface was referenced by `HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowUiV3SchemaJson`'s JSON-Schema
 * via the `definition` "runtime_info_def".
 */
export interface RuntimeInfoDef {
  [k: string]: unknown;
}
