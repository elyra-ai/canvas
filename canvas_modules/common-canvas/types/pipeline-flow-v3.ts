/*
 * Copyright 2017-2024 Elyra Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript
 * from https://github.com/elyra-ai/pipeline-schemas/blob/main/common-pipeline/pipeline-flow/pipeline-flow-v3-schema.json
 * after removing broken $ref URL's.
 * It has been modified by hand, so run a diff if you need to update it.
 */

import { RecordSchema } from './datarecord-metadata-v3';
import { ParamsetRef } from './parametersets-v3';
import {
  CommonPipelineConnectionDef,
  CommonPipelineDataAssetDef,
} from './pipeline-connection-v3';
import {
  NodeInfoDef,
  NodeLinkInfoDef,
  PipelineOverviewDef,
  PortInfoDef,
  RuntimeInfoDef,
} from './pipeline-flow-ui-v3';
import { PipelineDef as UiPipelineDef } from './pipeline-flow-ui-v3';

export type NodeTypeDef =
  | ExecutionNodeDef
  | SupernodeDef
  | BindingEntryNodeDef
  | BindingExitNodeDef
  | ModelNodeDef;
/**
 * @minItems 0
 */
export type PortsDef = PortDef[];
/**
 * @minItems 0
 */
export type BoundPortsDef = BoundPortDef[];
/**
 * An optional set of output ports, typically used for directing error information out of the binding node.
 *
 * @minItems 0
 */
export type PortsDef1 = PortDef[];

/**
 * WDP Pipeline Flow Schema
 */
export interface HttpsApiDataplatformIbmComSchemasCommonPipelinePipelineFlowPipelineFlowV3SchemaJson {
  /**
   * Document type
   */
  doc_type: string;
  /**
   * Pipeline-flow schema version
   */
  version: '3.0';
  /**
   * Refers to the JSON schema used to validate documents of this type
   */
  json_schema?:
    | 'http://api.dataplatform.ibm.com/schemas/common-pipeline/pipeline-flow/pipeline-flow-v3-schema.json'
    | 'https://api.dataplatform.ibm.com/schemas/common-pipeline/pipeline-flow/pipeline-flow-v3-schema.json';
  /**
   * Preferred authoring application
   */
  open_with_tool?: string;
  /**
   * Document identifier, GUID recommended
   */
  id?: string;
  /**
   * Parameters for the flow document
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Reference to the primary (main) pipeline flow within the document
   */
  primary_pipeline: string;
  /**
   * Array of pipelines
   *
   * @minItems 1
   */
  pipelines: [PipelineDef, ...PipelineDef[]];
  /**
   * Array of data record schemas used in the document
   *
   * @minItems 0
   */
  schemas?: RecordSchema[];
  /**
   * Array of runtime objects referred to in the document
   *
   * @minItems 0
   */
  runtimes?: RuntimeDef[];
  /**
   * Array of parameter set references
   *
   * @minItems 0
   */
  external_paramsets?: ParamsetRef[];
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: PipelineOverviewDef;
    [k: string]: unknown;
  };
}
/**
 * Definition of a single pipeline flow
 */
export interface PipelineDef {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * @deprecated
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/pipeline_def instead.
   */
  description?: string;
  /**
   * User-readable name
   */
  name?: string;
  /**
   * Reference to the id of the runtime associated with the operations in the current pipeline
   */
  runtime_ref: string;
  /**
   * Array of pipeline nodes
   *
   * @minItems 0
   */
  nodes: NodeTypeDef[];
  /**
   * Parameters for the pipeline
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: UiPipelineDef;
    [k: string]: unknown;
  };
}
/**
 * Definition of a single execution pipeline node
 */
export interface ExecutionNodeDef {
  /**
   * Unique identifier for node within the current pipeline
   */
  id: string;
  /**
   * @deprecated
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/node_info_def instead.
   */
  description?: string;
  /**
   * Node type - always 'execution_node' for non-model pipeline elements
   */
  type: 'execution_node';
  /**
   * Operator type identifier
   */
  op: string;
  inputs?: PortsDef;
  outputs?: PortsDef;
  /**
   * Input parameters for the operator
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Optional reference to the id of the runtime associated with the current node
   */
  runtime_ref?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: NodeInfoDef;
    [k: string]: unknown;
  };
}
/**
 * Port definition (input/output) on a node
 */
export interface PortDef {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Optional data record schema reference associated with the port
   */
  schema_ref?: string;
  /**
   * Array of links going into the node. Applies to input ports and exit bindings only.
   *
   * @minItems 0
   */
  links?: LinkDef[];
  /**
   * Parameters for the port
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: PortInfoDef;
    [k: string]: unknown;
  };
}
/**
 * Node link definition
 */
export interface LinkDef {
  /**
   * Unique id of this link within the pipelineFlow. If omitted a new link id will be generated.
   */
  id?: string;
  /**
   * id of a node this link connects to
   */
  node_id_ref: string;
  /**
   * optional port id of a node this link connects to
   */
  port_id_ref?: string;
  /**
   * optional link name (used in parameter sets when there are multiple input sources)
   */
  link_name?: string;
  /**
   * Link type attribute
   */
  type_attr?: string;
  /**
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/node_link_info_def instead.
   */
  description?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: NodeLinkInfoDef;
    [k: string]: unknown;
  };
}
/**
 * Definition of a supernode which serves as the entry point for a sub-pipeline
 */
export interface SupernodeDef {
  /**
   * Unique identifier for the supernode within the current pipeline
   */
  id: string;
  /**
   * @deprecated
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/node_info_def instead.
   */
  description?: string;
  /**
   * Node type - always 'super_node' for supernode elements
   */
  type: 'super_node';
  /**
   * Name of the tool which can be used to view or edit the sub-flow for this supernode. The default is 'canvas'
   */
  open_with_tool?: string;
  /**
   * Refers to the sub-flow associated with this supernode
   */
  subflow_ref: {
    /**
     * Reference to an external sub-flow. When not present the sub-flow is assumed to be in the current document. A value of 'app_defined' indicates a sub-flow identifier is present, but the controlling application will serve up the sub-pipeline in the form of a new pipeline-flow document (no sub-flow is present in the document).
     */
    url?: string;
    /**
     * Sub-flow identifier reference
     */
    pipeline_id_ref: string;
    [k: string]: unknown;
  };
  inputs?: BoundPortsDef;
  outputs?: BoundPortsDef;
  /**
   * Input parameters for the supernode
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: NodeInfoDef;
    [k: string]: unknown;
  };
}
/**
 * Port definition (input/output) on a node with optional pipeline port binding for supernodes
 */
export interface BoundPortDef {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Optional data record schema associated with the port
   */
  schema_ref?: string;
  /**
   * Array of links going into the node. Applies to input ports and exit bindings only.
   *
   * @minItems 1
   */
  links?: [LinkDef, ...LinkDef[]];
  /**
   * Optional node id binding within the current document.
   */
  subflow_node_ref?: string;
  /**
   * Parameters for the binding port
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: PortInfoDef;
    [k: string]: unknown;
  };
}
/**
 * Defines an entry point (source) for a pipeline. Bindings can be concrete: the concrete_binding element is present on the port; or bindings can be abstract: bindings are performed externally via configuration or a wrapper document.
 */
export interface BindingEntryNodeDef {
  /**
   * Unique identifier for the binding within the current pipeline
   */
  id: string;
  /**
   * @deprecated
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/node_info_def instead.
   */
  description?: string;
  /**
   * Node type - always 'binding' for binding elements
   */
  type: 'binding';
  outputs: PortsDef;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: NodeInfoDef;
    [k: string]: unknown;
  };
  connection?: CommonPipelineConnectionDef;
  data_asset?: CommonPipelineDataAssetDef;
  /**
   * Binding node type identifier
   */
  op?: string;
  /**
   * Parameters for the binding entry node
   */
  parameters?: {
    [k: string]: unknown;
  };
}
/**
 * Defines an exit point (sink) for a pipeline. Bindings can be concrete: the concrete_binding element is present on the port; or bindings can be abstract: bindings are performed externally via configuration or a wrapper document.
 */
export interface BindingExitNodeDef {
  /**
   * Unique identifier for the binding within the current pipeline
   */
  id: string;
  /**
   * @deprecated
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/node_info_def instead.
   */
  description?: string;
  /**
   * Node type - always 'binding' for binding elements
   */
  type: 'binding';
  inputs: PortsDef;
  outputs?: PortsDef1;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: NodeInfoDef;
    [k: string]: unknown;
  };
  connection?: CommonPipelineConnectionDef;
  data_asset?: CommonPipelineDataAssetDef;
  /**
   * Binding node type identifier
   */
  op?: string;
  /**
   * Parameters for the binding exit node
   */
  parameters?: {
    [k: string]: unknown;
  };
}
/**
 * Definition of a single predictive model node
 */
export interface ModelNodeDef {
  /**
   * Unique identifier for the model within the current pipeline
   */
  id: string;
  /**
   * @deprecated
   * Deprecated - use description in pipeline-flow-ui-v3-schema.json#/definitions/node_info_def instead.
   */
  description?: string;
  /**
   * Node type - always 'model_node' for model pipeline elements
   */
  type: 'model_node';
  /**
   * Reference to the binary model
   */
  model_ref?: string;
  inputs: PortsDef;
  outputs?: PortsDef;
  /**
   * Node type identifier of modeling node that created this model.
   */
  op?: string;
  /**
   * Input parameters for the operator
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Reference to the runtime associated with the current node
   */
  runtime_ref?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: NodeInfoDef;
    [k: string]: unknown;
  };
}
/**
 * Runtime associated with the operations in the current pipeline
 */
export interface RuntimeDef {
  /**
   * Unique internal runtime identifier
   */
  id: string;
  /**
   * The runtime name
   */
  name: string;
  /**
   * The runtime version. When not present the latest version is assumed
   */
  version?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: RuntimeInfoDef;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
