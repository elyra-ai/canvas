/*
 * Copyright 2025 Elyra Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the ../script/generateTS.sh script to regenerate all TS files.
 */
/* eslint-disable */

export type CanvasNode =
  | CanvasExecutionNode
  | CanvasSupernode
  | CanvasBindingEntryNode
  | CanvasBindingExitNode
  | CanvasModelNode;
export type CanvasExecutionNode = {
  /**
   * Node type - always 'execution_node'
   */
  type: "execution_node";
  /**
   * Operator type identifier
   */
  op: string;
  /**
   * UI only parameter values for the node
   */
  ui_parameters?: {
    [k: string]: unknown;
  };
  inputs?: CanvasPorts;
  outputs?: CanvasPorts;
  /**
   * Input parameters for the operator
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Optional reference to the id of the runtime associated with the current node
   */
  runtime_ref?: string;
} & CanvasNodeSharedProperties;
/**
 * @minItems 0
 */
export type CanvasPorts = CanvasPort[];
/**
 * Decoration used to decorate a node
 */
export type NodeDecorationDef = (ImageDecorationDef | LabelDecorationDef | ShapeDecorationDef | JsxDecorationDef) & {
  /**
   * Indicates an anchor point on the node at which the decoration will be displayed.
   */
  position?:
    | "topLeft"
    | "topCenter"
    | "topRight"
    | "middleLeft"
    | "middleCenter"
    | "middleRight"
    | "bottomLeft"
    | "bottomCenter"
    | "bottomRight";
  [k: string]: unknown;
};
/**
 * Image decoration properties including shared properties.
 */
export type ImageDecorationDef = {
  /**
   * Image displayed at the decoration position. Provide either this or a label.
   */
  image?: string;
  /**
   * If true and outline is drawn around the image.
   */
  outline?: boolean;
  [k: string]: unknown;
} & SharedDecorationDef;
/**
 * Label decoration properties including shared properties.
 */
export type LabelDecorationDef = {
  /**
   * Label displayed at the decoration position. Provide either this or an image.
   */
  label?: string;
  /**
   * If true, the label decoration can be edited. It displays an edit icon which can be clicked to enter edit mode.
   */
  label_editable?: boolean;
  /**
   * The alignment of the label.
   */
  label_align?: "left" | "center";
  /**
   * If true, the label is displayed as a single line and is truncated at the width.
   */
  label_single_line?: boolean;
  /**
   * The maximum number of characters that can be entered in the label decoration when it is editable.
   */
  label_max_characters?: number;
  /**
   * If false, pressing the return key in edit mode will not do anything: label will wrap at width. If true, return will enter a newline character.
   */
  label_allow_return_key?: boolean;
  [k: string]: unknown;
} & SharedDecorationDef;
/**
 * Shape decoration properties including shared properties.
 */
export type ShapeDecorationDef = {
  /**
   * An SVG path that describes a shape to be drawn at the decoration position.
   */
  path?: string;
  [k: string]: unknown;
} & SharedDecorationDef;
/**
 * JSX decoration properties including shared properties These are never serialized in the pipeline flow.
 */
export type JsxDecorationDef = {
  /**
   * A JSX expression that will be used to display the content of the decoration.
   */
  jsx?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
} & SharedDecorationDef;
/**
 * Decoration used to decorate a link
 */
export type LinkDecorationDef = (ImageDecorationDef | LabelDecorationDef | ShapeDecorationDef | JsxDecorationDef) & {
  /**
   * Indicates an anchor point on the link at which the decoration will be displayed.
   */
  position?: "source" | "middle" | "target";
  /**
   * Only applicable to straight link lines. Will move the decoration the specified number of pixels from its 'position'.
   */
  distance?: number;
  [k: string]: unknown;
};
export type CanvasSupernode = {
  /**
   * Node type - always 'super_node' for supernode elements
   */
  type: "super_node";
  /**
   * Name of the tool which can be used to view or edit the sub-flow for this supernode. The default is 'canvas'
   */
  open_with_tool?: string;
  /**
   * Refers to the sub-flow associated with this supernode
   */
  subflow_ref: {
    /**
     * Reference to an external sub-flow. When not present the sub-flow is assumed to be in the current document. A value of 'app_defined' indicates a sub-flow identifier is present, but the controlling application will serve up the sub-pipeline in the form of a new pipeline-flow document (no sub-flow is present in the document).
     */
    url?: string;
    /**
     * Sub-flow identifier reference
     */
    pipeline_id_ref: string;
    [k: string]: unknown;
  };
  /**
   * Indicates whether a supernode is shown in expanded state or as a regular node.
   */
  is_expanded?: boolean;
  /**
   * Height of expanded supernode. If not provided an appropriate height is calculated.
   */
  expanded_height?: number;
  /**
   * Width of expanded supernode. If not provided an appropriate width is calculated.
   */
  expanded_width?: number;
  /**
   * An array of pipelines referenced when this node is a supernode. This field is only used when the supernode is in a palette or on the clipboard. It will be an empty array when the supernode references an external pipeline.
   *
   * @minItems 0
   */
  sub_pipelines?: unknown[];
  /**
   * UI only parameter values for the node
   */
  ui_parameters?: {
    [k: string]: unknown;
  };
  inputs?: CanvasBoundPorts;
  outputs?: CanvasBoundPorts;
  /**
   * Input parameters for the supernode
   */
  parameters?: {
    [k: string]: unknown;
  };
} & CanvasNodeSharedProperties;
/**
 * @minItems 0
 */
export type CanvasBoundPorts = CanvasBoundPort[];
export type CanvasBindingEntryNode = {
  /**
   * Node type - always 'binding' for binding elements
   */
  type: "binding";
  outputs: CanvasPorts;
  connection?: CommonPipelineConnectionDef;
  data_asset?: CommonPipelineDataAssetDef;
  /**
   * Binding node type identifier
   */
  op?: string;
  /**
   * UI only parameter values for the node
   */
  ui_parameters?: {
    [k: string]: unknown;
  };
  /**
   * Parameters for the binding entry node
   */
  parameters?: {
    [k: string]: unknown;
  };
} & CanvasNodeSharedProperties;
export type CanvasBindingExitNode = {
  /**
   * Node type - always 'binding' for binding elements
   */
  type: "binding";
  inputs: CanvasPorts;
  outputs?: CanvasPorts1;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
  connection?: CommonPipelineConnectionDef;
  data_asset?: CommonPipelineDataAssetDef;
  /**
   * Binding node type identifier
   */
  op?: string;
  /**
   * Parameters for the binding exit node
   */
  parameters?: {
    [k: string]: unknown;
  };
} & CanvasNodeSharedProperties;
/**
 * An optional set of output ports, typically used for directing error information out of the binding node.
 *
 * @minItems 0
 */
export type CanvasPorts1 = CanvasPort[];
export type CanvasModelNode = {
  /**
   * Node type - always 'model_node' for model pipeline elements
   */
  type: "model_node";
  /**
   * Reference to the binary model
   */
  model_ref?: string;
  inputs: CanvasPorts;
  outputs?: CanvasPorts;
  /**
   * Node type identifier of modeling node that created this model.
   */
  op?: string;
  /**
   * Input parameters for the operator
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Reference to the runtime associated with the current node
   */
  runtime_ref?: string;
} & CanvasNodeSharedProperties;
export type CanvasLink = CanvasCommentLink | CanvasNodeLink | CanvasAssociationLink;

/**
 * Canvas Info Flow Schema - for internal Common Canvas use.
 */
export interface HttpsApiDataplatformIbmComSchemasCommonCanvasCanvasInfoCanvasInfoV3SchemaJson {
  /**
   * Document type
   */
  doc_type: string;
  /**
   * Canvas info flow schema version
   */
  version: "3.0";
  /**
   * Refers to the JSON schema used to validate documents of this type
   */
  json_schema?:
    | "http://api.dataplatform.ibm.com/schemas/common-canvas/canvas-info/canvas-info-v3-schema.json"
    | "https://api.dataplatform.ibm.com/schemas/common-canvas/canvas-info/canvas-info-v3-schema.json";
  /**
   * Preferred authoring application
   */
  open_with_tool?: string;
  /**
   * Document identifier, GUID recommended
   */
  id: string;
  /**
   * User-defined name
   */
  name?: string;
  /**
   * User-defined description
   */
  description?: string;
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * Parameters for the flow document
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Reference to the primary (main) pipeline flow within the document
   */
  primary_pipeline: string;
  /**
   * Array of pipelines
   *
   * @minItems 1
   */
  pipelines: [CanvasPipeline, ...CanvasPipeline[]];
  /**
   * Array of data record schemas used in the document
   *
   * @minItems 0
   */
  schemas?: RecordSchema[];
  /**
   * Array of runtime objects referred to in the document
   *
   * @minItems 0
   */
  runtimes?: RuntimeDef[];
  /**
   * Array of parameter set references
   *
   * @minItems 0
   */
  external_paramsets?: ParamsetRef[];
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
}
/**
 * Definition of a single canvas-info pipeline
 */
export interface CanvasPipeline {
  /**
   * Unique identifier for this canvas-info pipeline
   */
  id: string;
  /**
   * Description for this canvas-info pipeline
   */
  description?: string;
  /**
   * User-readable for this canvas-info pipeline
   */
  name?: string;
  /**
   * Reference to the id of the runtime associated with the operations in the current pipeline
   */
  runtime_ref?: string;
  /**
   * Array of canvas nodes for this canvas pipeline
   *
   * @minItems 0
   */
  nodes: CanvasNode[];
  /**
   * Array of canvas comments for this canvas pipeline
   *
   * @minItems 0
   */
  comments?: CanvasComment[];
  /**
   * Array of canvas links for this canvas pipeline
   *
   * @minItems 0
   */
  links?: CanvasLink[];
  /**
   * Parameters for this canvas-info pipeline
   */
  parameters?: {
    [k: string]: unknown;
  };
  zoom?:
    | number
    | {
        /**
         * Horizontal translation amount. Positive value moves right, negative to the left.
         */
        x: number;
        /**
         * Vertical translation amount. Positive value moves down, negative moves up.
         */
        y: number;
        /**
         * Scale amount. 1.0 is the standard scale amount. Smaller values zoom out. Larger values zoom in.
         */
        k: number;
      };
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
}
/**
 * Port definition (input/output) on a node
 */
export interface CanvasPort {
  /**
   * Unique identifier for the port
   */
  id: string;
  /**
   * Optional data record schema reference associated with the port
   */
  schema_ref?: string;
  /**
   * Parameters for the port
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Property to capture how many data assets are allowed for this port, e.g., min: 1, max:1 implies you must supply 1 and only 1; min:0, max:1 implies it is optional and a max of one, min:0, max:-1 means it is optional and you can may have any number of data assets. The default value is 1:1 for inputs and 1:-1 for outputs.
   */
  cardinality?: {
    /**
     * Minimum data sets that are required for this port
     */
    min?: number;
    /**
     * Maximum data sets that are allowed on this port. A negative value indicates unlimited. The default value is 1 for inputs and -1 for outputs.
     */
    max?: number;
  };
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the port.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Port name
   */
  label?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
}
export interface CanvasNodeSharedProperties {
  /**
   * Unique identifier for canvas node within the current pipeline
   */
  id?: string;
  /**
   * Label of this canvas execution node.
   */
  label?: string;
  /**
   * Description of this canvas execution node.
   */
  description?: string;
  /**
   * CSS class name - can be a space separated list of classes
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the node.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * URL to image source. Although a data URL can be used to embed an image inline, it is not recommended. The 'image' property can also be a JSX object that displays an image using an <svg> element however, JSX images must be set programmatically and cannot be stringified into JSON.
   */
  image?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * x-position of this canvas execution node.
   */
  x_pos?: number;
  /**
   * y-position of this canvas execution node.
   */
  y_pos?: number;
  /**
   * Indicates whether a node has been resized or not. If true, resize_width and resize_height are used for node display. If false, the default width and height are used.
   */
  is_resized?: boolean;
  /**
   * Height of resized node. The node will be displayed with this height, when is_resized is true, in preference to its default height.
   */
  resize_height?: number;
  /**
   * Width of resized node. The node will be displayed with this width, when is_resized is true, in preference to its default width.
   */
  resize_width?: number;
  /**
   * additional attributes
   */
  attributes?: string;
  /**
   * An array of messages for the node
   *
   * @minItems 0
   */
  messages?: MessageDef[];
  /**
   * Image name for the node displayed in palette. If omitted the image from 'image' field will be used.
   */
  palette_image?: string;
  /**
   * CSS class name applied to the <div> shown in palette for the node
   */
  palette_class_name?: string;
  /**
   * Indicates whether the node in the palette is disabled. If true, prevents the node being dragged or double-clicked from palette.
   */
  palette_disabled?: boolean;
  /**
   * Array of decorations used to decorate nodes
   *
   * @minItems 0
   */
  decorations?: (NodeDecorationDef | LinkDecorationDef)[];
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Node message definition
 */
export interface MessageDef {
  /**
   * Name of the parameter that has the message
   */
  id_ref: string;
  /**
   * Validation identifier from the fail_message validation section.
   */
  validation_id?: string;
  /**
   * Type of message
   */
  type: "info" | "error" | "warning";
  /**
   * Message string
   */
  text: string;
  [k: string]: unknown;
}
/**
 * Shared properties across all types of decoration.
 */
export interface SharedDecorationDef {
  /**
   * A unique identifier used to identify the decoration
   */
  id: string;
  /**
   * X position of the decorator relative to the decorations's position field.
   */
  x_pos?: number;
  /**
   * Y position of the decorator relative to the decorations's position field.
   */
  y_pos?: number;
  /**
   * Display width of decoration.
   */
  width?: number;
  /**
   * Display height of decoration.
   */
  height?: number;
  /**
   * Indicates whether the decorator is a hotspot or not. If true, it calls sends an event to the host app. when clicked
   */
  hotspot?: boolean;
  /**
   * CSS class name for decoration styling. It can be a space-separated list of classes.
   */
  class_name?: string;
  /**
   * Tooltip text for the decoration.
   */
  tooltip?: string;
  /**
   * If set to true, the decoration will not be serialized in the pipeline flow.
   */
  temporary?: boolean;
  [k: string]: unknown;
}
/**
 * Port definition (input/output) on a node with optional pipeline port binding for supernodes
 */
export interface CanvasBoundPort {
  /**
   * Unique identifier for this port
   */
  id: string;
  /**
   * Optional data record schema associated with the port
   */
  schema_ref?: string;
  /**
   * Optional node id binding within the current document.
   */
  subflow_node_ref?: string;
  /**
   * Parameters for the binding port
   */
  parameters?: {
    [k: string]: unknown;
  };
  /**
   * Property to capture how many data assets are allowed for this port, e.g., min: 1, max:1 implies you must supply 1 and only 1; min:0, max:1 implies it is optional and a max of one, min:0, max:-1 means it is optional and you can may have any number of data assets. The default value is 1:1 for inputs and 1:-1 for outputs.
   */
  cardinality?: {
    /**
     * Minimum data sets that are required for this port
     */
    min?: number;
    /**
     * Maximum data sets that are allowed on this port. A negative value indicates unlimited. The default value is 1 for inputs and -1 for outputs.
     */
    max?: number;
  };
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the port.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Port name
   */
  label?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
}
/**
 * Details of the connection to use for a pipeline binding node.
 */
export interface CommonPipelineConnectionDef {
  /**
   * A name tag for disambiguating connections
   */
  name?: string;
  app_data?: AppDataDef;
  /**
   * A reference to a connection by ID.
   */
  ref: string;
  /**
   * If ref is set, this refers to the ID of the catalog which contains the connection. If neither this attribute nor project_ref are specified, the connection will be assumed to exist in the project, space, or catalog which contains the pipeline.
   */
  catalog_ref?: string;
  /**
   * If ref is set, this refers to the ID of the project which contains the connection. If neither this attribute nor catalog_ref are specified, the connection will be assumed to exist in the project, space, or catalog which contains the pipeline.
   */
  project_ref?: string;
  /**
   * If ref is set, this refers to the ID of the space which contains the connection. If neither this attribute nor space_ref are specified, the connection will be assumed to exist in the project, space, or catalog which contains the pipeline.
   */
  space_ref?: string;
  /**
   * The properties for the connection. The specific properties allowed depend on the type of connection referenced.
   */
  properties?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Object containing app-specific data
 */
export interface AppDataDef {
  [k: string]: unknown;
}
/**
 * Details of the data asset contained in a catalog or project to use for a pipeline binding node.
 */
export interface CommonPipelineDataAssetDef {
  app_data?: AppDataDef;
  /**
   * A reference to a data asset by ID.
   */
  ref?: string;
  /**
   * If ref is set, this refers to the ID of the catalog which contains the data asset. If neither this attribute nor project_ref are specified, the data asset will be assumed to exist in the project, space, or catalog which contains the pipeline.
   */
  catalog_ref?: string;
  /**
   * If ref is set, this refers to the ID of the project which contains the data asset. If neither this attribute nor catalog_ref are specified, the data asset will be assumed to exist in the project, space, or catalog which contains the pipeline.
   */
  project_ref?: string;
  /**
   * If ref is set, this refers to the ID of the space which contains the data asset. If neither this attribute nor space_ref are specified, the data asset will be assumed to exist in the project, space, or catalog which contains the pipeline.
   */
  space_ref?: string;
  /**
   * Properties controlling how the data asset is used.
   */
  properties?: {
    /**
     * The ID of the data asset attachment to use. If not specified and used as a source, the first suitable attachment found will be used. If not specified and used as a target, a new attachment will be created.
     */
    attachment_ref?: string;
    /**
     * Specifies the name of the data asset to read, create or update if ref is unset.
     */
    name?: boolean & string;
    /**
     * When used as a target, whether to update the data asset with the schema when a run completes or not (will be automatically updated if not supplied by caller).
     */
    no_write_schema?: boolean;
    /**
     * When used as a target, whether to update the data asset with the status when a run completes or not (will be automatically updated if not supplied by caller).
     */
    no_write_status?: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface CanvasComment {
  /**
   * Comment identifier. Must be unique.
   */
  id: string;
  /**
   * Horizontal comment position
   */
  x_pos: number;
  /**
   * Vertical comment position
   */
  y_pos: number;
  /**
   * Comment width
   */
  width: number;
  /**
   * Comment height
   */
  height: number;
  /**
   * Comment content
   */
  content?: string;
  /**
   * CSS class(es) to apply to the comment
   */
  class_name?: string;
  /**
   * Type of content
   */
  content_type?: string;
  /**
   * Type of content
   */
  formats?: {
    field: string;
    value?: string;
  }[];
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the comment.
   */
  style?: string | {};
  [k: string]: unknown;
}
/**
 * Comment link definition
 */
export interface CanvasCommentLink {
  /**
   * Unique id of this comment link.
   */
  id?: string;
  /**
   * Link type - always 'commentLink' for links from comments to nodes
   */
  type?: "commentLink";
  /**
   * ID of the comment this link connects from.
   */
  src_node_id?: string;
  /**
   * ID of the node this link connects to.
   */
  trg_node_id?: string;
  /**
   * CSS class name for link styling
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the comment link.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Array of decorations used to decorate node links
   *
   * @minItems 0
   */
  decorations?: (NodeDecorationDef | LinkDecorationDef)[];
  [k: string]: unknown;
}
/**
 * Node link definition
 */
export interface CanvasNodeLink {
  /**
   * Unique id of this link within the pipelineFlow.
   */
  id?: string;
  /**
   * Link type - always 'nodeLink' for directional links from nodes to nodes
   */
  type?: "nodeLink";
  /**
   * ID of the source node this link connects from.
   */
  src_node_id?: string;
  /**
   * Optional ID of the port on the source node this link connects from. Defaults to the first port if omitted.
   */
  src_node_port_id?: string;
  /**
   * ID of the target node this link connects to.
   */
  trg_node_id?: string;
  /**
   * Optional ID of the port on the target node this link connects from. Defaults to the first port if omitted.
   */
  trg_node_port_id?: string;
  src_pos?: {
    [k: string]: unknown;
  };
  trg_pos?: {
    [k: string]: unknown;
  };
  /**
   * optional link name (used in parameter sets when there are multiple input sources)
   */
  link_name?: string;
  /**
   * Optional type attribute for the link. This can store optional atribute info.
   */
  type_attr?: string;
  /**
   * User-defined description
   */
  description?: string;
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * A 'style spec' object containing CSS strings to be applied to the SVG objects of the node to node link.
   */
  style?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Array of decorations used to decorate node links
   *
   * @minItems 0
   */
  decorations?: (NodeDecorationDef | LinkDecorationDef)[];
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
}
/**
 * Association link definition
 */
export interface CanvasAssociationLink {
  /**
   * Unique id of this link within the pipelineFlow.
   */
  id?: string;
  /**
   * Link type - always 'associationLink' for associations between two nodes
   */
  type?: "associationLink";
  /**
   * ID of the source node of the association.
   */
  src_node_id?: string;
  /**
   * ID of the target node of the association.
   */
  trg_node_id?: string;
  /**
   * CSS class name
   */
  class_name?: string;
  /**
   * Array of decorations used to decorate node links
   *
   * @minItems 0
   */
  decorations?: (NodeDecorationDef | LinkDecorationDef)[];
  /**
   * Object containing app-specific data
   */
  app_data?: {
    [k: string]: unknown;
  };
}
/**
 * Description of a datarecord including column types and metadata
 */
export interface RecordSchema {
  /**
   * Unique identifier
   */
  id: string;
  /**
   * Name of datarecord
   */
  name?: string;
  /**
   * Refers to the JSON schema used to validate documents of this type
   */
  json_schema?: "https://api.dataplatform.ibm.com/schemas/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json";
  /**
   * Always 'struct' for datarecord schema
   */
  type?: string;
  /**
   * Array of field definitions
   *
   * @minItems 0
   */
  fields: Field[];
  /**
   * The list of custom struct types to be used as field types
   */
  struct_types?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".".
     */
    [k: string]: {
      /**
       * Array of field definitions
       *
       * @minItems 0
       */
      fields?: Field[];
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
}
/**
 * Definition of a datarecord field
 */
export interface Field {
  /**
   * Field name. Must be unique within the datarecord
   */
  name: string;
  /**
   * Field type. Can be a primitive type (string, integer, double, date, time, timestamp, binary, boolean, array[type], map[type, type]. The type can also be a reference to a struct_type declaration.)
   */
  type: string;
  /**
   * Whether or not one can place null values into the field
   */
  nullable?: boolean;
  metadata?: Metadata;
  app_data?: AppDataDef1;
  [k: string]: unknown;
}
/**
 * Additional field metadata
 */
export interface Metadata {
  /**
   * Field description
   */
  description?: string;
  /**
   * Field measurement level
   */
  measure?:
    | "range"
    | "discrete"
    | "flag"
    | "set"
    | "ordered-set"
    | "typeless"
    | "collection"
    | "geospatial"
    | "default";
  /**
   * Field role for modeling
   */
  modeling_role?: "input" | "target" | "both" | "none" | "partition" | "split" | "frequency" | "record-id";
  /**
   * Maximum length for fields. Length is unlimited when not present
   */
  max_length?: number;
  /**
   * Minimum length for fields
   */
  min_length?: number;
  /**
   * Precision for decimal, time, and timestamp types
   */
  decimal_precision?: number;
  /**
   * Scale for decimal, time, and timestamp types
   */
  decimal_scale?: number;
  /**
   * Array of unique categorical values for the column
   *
   * @minItems 0
   */
  values?: (string | number | boolean)[];
  /**
   * Minimum and maximum discovered values for scalar data
   */
  range?: {
    /**
     * Lowest value discovered in the data
     */
    min: string | number;
    /**
     * Highest value discovered in the data
     */
    max: string | number;
    [k: string]: unknown;
  };
  /**
   * Type of runtime
   */
  runtime_type?: string;
  /**
   * A field is key
   */
  is_key?: boolean;
  /**
   * Signed or Unsigned for number
   */
  is_signed?: boolean;
  /**
   * Item record level
   */
  item_index?: number;
  /**
   * Source field for a target field
   */
  source_field_id?: string;
  [k: string]: unknown;
}
/**
 * Object containing app-specific data
 */
export interface AppDataDef1 {
  [k: string]: unknown;
}
/**
 * Runtime associated with the operations in the current pipeline
 */
export interface RuntimeDef {
  /**
   * Unique internal runtime identifier
   */
  id: string;
  /**
   * The runtime name
   */
  name: string;
  /**
   * The runtime version. When not present the latest version is assumed
   */
  version?: string;
  /**
   * Object containing app-specific data
   */
  app_data?: {
    ui_data?: RuntimeInfoDef;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Runtime information
 */
export interface RuntimeInfoDef {
  [k: string]: unknown;
}
/**
 * Refers to the external parameter set.
 */
export interface ParamsetRef {
  /**
   * The disambiguating name of the parameter set.
   */
  name?: string;
  /**
   * A reference to a parameter set by ID.
   */
  ref: string;
  /**
   * If ref is set, this refers to the ID of the catalog which contains the parameter set. If neither this attribute nor project_ref and space_ref are specified, the parameter set will be assumed to exist in the project, catalog or space which contains the pipeline.
   */
  catalog_ref?: string;
  /**
   * If ref is set, this refers to the ID of the project which contains the parameter set. If neither this attribute nor catalog_ref and space_ref are specified, the parameter set will be assumed to exist in the project, catalog or space which contains the pipeline.
   */
  project_ref?: string;
  /**
   * If ref is set, this refers to the ID of the space which contains the parameter set. If neither this attribute nor catalog_ref and project_ref are specified, the parameter set will be assumed to exist in the project, catalog or space which contains the pipeline.
   */
  space_ref?: string;
  [k: string]: unknown;
}
