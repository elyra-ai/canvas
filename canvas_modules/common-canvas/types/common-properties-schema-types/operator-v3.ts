/*
 * Copyright 2017-2024 Elyra Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { AppDataDef } from "./app-data-def-v3";

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript
 * from https://github.com/elyra-ai/pipeline-schemas/blob/main/common-pipeline/operators/operator-v3-schema.json
 * It has been modified by hand, so run a diff if you need to update it.
 */

type basicParameterTypes =
  | 'integer'
  | 'double'
  | 'string'
  | 'date'
  | 'time'
  | 'timestamp'
  | 'custom'
  | 'boolean'
  | 'password';

/** https://elyra-ai.github.io/canvas/04.01-parameter-definition/#parameter-definitions */
type allParameterTypes =
  | `array[${string}]`
  | `map[string, ${string}]`
  | basicParameterTypes
  | string;

/**
 * Operator parameters definition
 */
export type ParameterDefinition = ParameterDefinition1 & {
  /**
   * A unique name for the parameter.
   */
  id?: string;
  /**
   * Indication whether parameter is required or optional
   */
  required?: boolean;
  /**
   * Role of parameter
   */
  role?: 'column' | 'new_column' | 'expression';
  /**
   * Field type. Can be a primitive type (string, integer, double, date, time, timestamp, or custom), an array, or map containing those types(note arrays and maps can contain complex_types)
   */
  type?: allParameterTypes;
  /**
   * List of valid values. Can be used instead of specifying type.
   */
  enum?: unknown[];
  /**
   * default value based on type of parameter
   */
  default?:
    | ParameterRefDefinition
    | (
        | string
        | number
        | boolean
        | unknown[]
        | {
            [k: string]: unknown;
          }
        | null
      );
  [k: string]: unknown;
};
export type ParameterDefinition1 = {
  [k: string]: unknown;
};

/**
 * Operator schema for the Watson Data Platform
 */
export interface WatsonDataPlatformOperatorSchema {
  /**
   * Operator identifier
   */
  id: string;
  /**
   * Refers to the JSON schema used to validate documents of this type
   */
  json_schema?: 'https://api.dataplatform.ibm.com/schemas/common-pipeline/operators/operator-v3-schema.json';
  /**
   * operator type
   */
  operator_type:
    | 'model'
    | 'transformer'
    | 'estimator'
    | 'dataReader'
    | 'dataWriter';
  /**
   * List of input ports. If no ports are defined this is a source operator that accepts no data inputs. If the input_ports array is missing a single input port with id 'input_port' is assumed which accepts only a single connection.
   *
   * @minItems 0
   */
  input_ports?: PortDefinition[];
  /**
   * List of output ports. If no ports are defined this is a terminal operator that provides no data outputs. If the output_ports array is missing a single output port named 'output_port' is assumed which accepts multiple connections.
   *
   * @minItems 0
   */
  output_ports?: PortDefinition[];
  /**
   * List of complex types
   */
  complex_types?: ComplexTypeDefinition[];
  /**
   * List of parameters
   */
  parameters: ParameterDefinition[];
  app_data?: AppDataDef;
  [k: string]: unknown;
}
/**
 * Operator ports support multiple differentiated connections for either inputs or outputs.
 */
export interface PortDefinition {
  /**
   * Unique identifier within the node
   */
  id?: string;
  /**
   * Property to capture how many connections are allowed for this port, e.g., min: 1, max:1 implies you must supply 1 and only 1; min:0, max:1 implies it is optional and a max of one, min:0, max:-1 means it is optional and you can may have any number of connections. The default value is 1:1 for inputs and 1:-1 for outputs.
   */
  cardinality?: {
    /**
     * Minimum data sets that are required for this port
     */
    min?: number;
    /**
     * Maximum data sets that are allowed on this port. A negative value indicates unlimited. The default value is 1 for inputs and -1 for outputs.
     */
    max?: number;
  };
  /**
   * List of parameters
   */
  parameters?: ParameterDefinition[];
  /**
   * List of complex types
   */
  complex_types?: ComplexTypeDefinition[];
  [k: string]: unknown;
}
/**
 * Structure for parameter refs
 */
export interface ParameterRefDefinition {
  /**
   * Reference to another parameter.
   */
  parameter_ref: string;
  [k: string]: unknown;
}
/**
 * Structure for complex parameters
 */
export interface ComplexTypeDefinition {
  /**
   * Identifier of complex type, can be referenced in other places.
   */
  id: string;
  /**
   * Used to determine how parameters in the complex_type stored. Valid values are array and object.
   */
  type?: string;
  key_definition?: ParameterDefinition;
  /**
   * List of parameters
   */
  parameters: (ParameterDefinition | ComplexTypeDefinition)[];
  [k: string]: unknown;
}
