/*
 * Copyright 2017-2024 Elyra Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript
 * from https://github.com/elyra-ai/pipeline-schemas/blob/main/common-pipeline/operators/uihints-v3-schema.json
 * It has been modified by hand, so run a diff if you need to update it.
 */

import { ParameterDefinition as OperatorParameterDefinition } from './operator-v3';

/**
 * External name of operator
 */
export type ResourceDefinition = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Description of operator
 */
export type ResourceDefinition1 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Group label
 */
export type ResourceDefinition2 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Group description. Used in a textPanel and tearsheetPanel
 */
export type ResourceDefinition3 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * External name for parameter
 */
export type ResourceDefinition4 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition5 = ResourceDefinition6 & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
export type ResourceDefinition6 = {
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition7 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition8 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Static text to be displayed before the control
 */
export type TextDefinition = ResourceDefinition5 & {
  /**
   * Type of text message to display
   */
  type?: 'info';
  [k: string]: unknown;
};
/**
 * Static text to be displayed after the control
 */
export type TextDefinition1 = ResourceDefinition5 & {
  /**
   * Type of text message to display
   */
  type?: 'info';
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition9 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition10 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Button to be displayed after the table's search bar
 */
export type ButtonDefinition = ButtonDefinition1 & {
  /**
   * Button identifier used to idenify the button in the callback function
   */
  id?: string;
  label?: ResourceDefinition11;
  description?: ResourceDefinition12;
  /**
   * URL to .svg image to display
   */
  icon?: string;
  /**
   * Host provided name of Carbon icon to display. A callback function is required for the host application to return the jsx icon object imported from @carbon/icons-react library
   */
  carbon_icon?: string;
  /**
   * Button will be enabled if true, disabled if false
   */
  enabled?: boolean;
  /**
   * Display a divider before or after this button
   */
  divider?: 'before' | 'after';
  [k: string]: unknown;
};
export type ButtonDefinition1 = {
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition11 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition12 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition13 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};
/**
 * Localizable string resource
 */
export type ResourceDefinition14 = {
  [k: string]: unknown;
} & {
  default?: string;
  resource_key?: string;
  [k: string]: unknown;
};

/**
 * WDP UI Hints schema
 */
export interface WDPUIHintsSchema {
  /**
   * Operator identifier
   */
  id: string;
  /**
   * Refers to the JSON schema used to validate documents of this type
   */
  json_schema?: 'https://api.dataplatform.ibm.com/schemas/common-pipeline/operators/uihints-v3-schema.json';
  label?: ResourceDefinition;
  description?: ResourceDefinition1;
  /**
   * URL to operation icon
   */
  icon?: string;
  title_info?: {
    /**
     * List of actions to be displayed in the title section
     */
    action_refs?: string[];
    [k: string]: unknown;
  };
  group_info?: GroupDefinition[];
  /**
   * Editor size for node edits
   */
  editor_size?: 'small' | 'medium' | 'large';
  /**
   * Gives more control of editor panel width. The panel is shown at min size if editor_size is small and max size if editor_size is medium. If min and max are the same no sizing button is displayed.
   */
  pixel_width?: {
    /**
     * Minimum size in pixels for the right side editor flyout
     */
    min?: number;
    /**
     * Maximum size in pixels for the right side editor flyout
     */
    max?: number;
    [k: string]: unknown;
  };
  parameter_info?: ParameterDefinition[];
  complex_type_info?: ComplexTypeDefinition[];
  /**
   * List of UI only parameters
   */
  ui_parameters?: OperatorParameterDefinition[];
  action_info?: ActionDefinition[];
  /**
   * Help information
   */
  help?: {
    /**
     * Data passed in the helpClickHandler.
     */
    data?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Grouping for parameters and groups
 */
export interface GroupDefinition {
  /**
   * Identifier for this group
   */
  id: string;
  /**
   * The group type to be displayed
   */
  type?:
    | 'controls'
    | 'tabs'
    | 'subTabs'
    | 'panels'
    | 'columnSelection'
    | 'columnSelectionRecursive'
    | 'panelSelector'
    | 'customPanel'
    | 'summaryPanel'
    | 'actionPanel'
    | 'textPanel'
    | 'twistyPanel'
    | 'tearsheetPanel'
    | 'columnPanel';
  /**
   * Parameter name this group depends upon. Valid for panelSelector groups only.
   */
  depends_on_ref?: string;
  /**
   * Indicates whether panels, contained with a panelSelector, should be inserted between the radio buttons of a radio button set indicated by the depends_on_ref parameter.
   */
  insert_panels?: boolean;
  /**
   * Indicate whether panel should be nested. Nested panels are indented by 16px from the left and display left border. Default is false.
   */
  nested_panel?: boolean;
  /**
   * Used to determine if a panel is open or closed when UI is displayed.  Currenty only supported with twistyPanel. Default is false.
   */
  open?: boolean;
  label?: ResourceDefinition2;
  description?: ResourceDefinition3;
  /**
   * List of parameters to be displayed
   */
  parameter_refs?: string[];
  /**
   * List of actions to be displayed.  Used with an actionPanel
   */
  action_refs?: string[];
  /**
   * Data passed to custom panel when group type is 'customPanel'
   */
  data?:
    | {
        [k: string]: unknown;
      }
    | unknown[];
  group_info?: GroupDefinition[];
  /**
   * Optional class name to set for this group
   */
  class_name?: string;
  [k: string]: unknown;
}
/**
 * Operator parameters hints
 */
export interface ParameterDefinition {
  /**
   * Parameter reference to base operator parameter definition
   */
  parameter_ref: string;
  label?: ResourceDefinition4;
  /**
   * Whether to display the label or not. If not displayed, the label can still be used by screen readers
   */
  label_visible?: boolean;
  /**
   * Description of parameter with optional placement context and optional link
   */
  description?: ResourceDefinition5 & {
    /**
     * Optional placement context for the text
     */
    placement?: 'as_tooltip' | 'on_panel';
    /**
     * Optional link in the description. tooltipLinkHandler callback must be defined whenever link object is added in uiHints.
     */
    link?: {
      /**
       * link id
       */
      id: string;
      /**
       * Data passed to the tooltipLinkHandler callback
       */
      data?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Which control to use.  In most cases the control gets to be determined and should not be set
   */
  control?:
    | 'readonly'
    | 'readonlyTable'
    | 'textfield'
    | 'passwordfield'
    | 'textarea'
    | 'expression'
    | 'numberfield'
    | 'spinner'
    | 'checkbox'
    | 'radioset'
    | 'checkboxset'
    | 'toggletext'
    | 'toggle'
    | 'oneofselect'
    | 'multiselect'
    | 'someofselect'
    | 'selectcolumn'
    | 'selectcolumns'
    | 'selectschema'
    | 'structuretable'
    | 'structurelisteditor'
    | 'structureeditor'
    | 'custom'
    | 'datefield'
    | 'datepicker'
    | 'datepickerRange'
    | 'timefield'
    | 'timestampfield'
    | 'slider'
    | 'code'
    | 'list'
    | 'hidden';
  /**
   * Determines the step value to increment/decrement for spinner and slider controls
   */
  increment?: number;
  /**
   * Determines the minimum value for the slider control only
   */
  min_value?: number;
  /**
   * Determines the max value for the slider control only
   */
  max_value?: number;
  /**
   * Determines how the control is displayed
   */
  orientation?: 'vertical' | 'horizontal';
  /**
   * Percentage of group width the control should use
   */
  width?: number;
  /**
   * Limits the number of characters a user can enter into the control for string parameters only
   */
  char_limit?: number;
  /**
   * This has been deprecated and is subject to removal. Limits the number of characters displayed for a text field in a column in a table.  The text will have an ellipsis appended at this limit.
   */
  display_chars?: number;
  /**
   * Determines where to put a separator relative to the current control
   */
  separator?: 'before' | 'after';
  /**
   * Determines whether to display parameter in control. Used in complex structures
   */
  visible?: boolean;
  place_holder_text?: ResourceDefinition7;
  helper_text?: ResourceDefinition8;
  /**
   * Determines whether the control should be readonly or can be edited
   */
  read_only?: boolean;
  text_before?: TextDefinition;
  text_after?: TextDefinition1;
  /**
   * Used as a key for enum value labels
   */
  resource_key?: string;
  /**
   * Editing style of elements in a table
   */
  edit_style?: 'subpanel' | 'inline' | 'on_panel';
  /**
   * For enumerated types, this defines the set of icons for the valid values. The ordering must be consistent with the order in the parameter enum attribute.
   */
  value_icons?: string[];
  /**
   * Determines if this column values can be sorted into ascending/descending order in a table. Applies to structure parameters only.
   */
  sortable?: boolean;
  /**
   * Determines if this column values can be filtered so that only rows that match the filter in column values are shown in the table. Applies to structure parameters and multiselect control only.
   */
  filterable?: boolean;
  /**
   * Determines if this column can be resized in a table. When a column is resized, width of all the columns to the right of resized column is adjusted. Applies to structure parameters only.
   */
  resizable?: boolean;
  /**
   * The language for the expression editor syntax highlight and autocomplete workds. Applies to expression control type.
   */
  language?:
    | 'CLEM'
    | 'javascript'
    | 'text/x-hive'
    | 'text/x-rsrc'
    | 'text/x-python'
    | 'text/x-sql';
  /**
   * Determines if this column values will be shown in the summaryPanel
   */
  summary?: boolean;
  /**
   * Generates values for a column in a 'readonly' parameter.
   */
  generated_values?: {
    /**
     * Currently only 'index' is supported which will auto-increment the integer column value starting at 1. The start value can be configured by setting a start_value.
     */
    operation: 'index';
    /**
     * Optional start value to increment from when the 'type' is 'index'. If the start_value is not set, it will default to 1.
     */
    start_value?: number;
    [k: string]: unknown;
  };
  /**
   * Adds a number generation button beside the numeric control
   */
  number_generator?: {
    label: ResourceDefinition9;
    /**
     * Number generator range
     */
    range?: {
      /**
       * Maximum value for generated numbers
       */
      min: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Used within complex structures containing 'column' key_definition fields. This associates the subControl parameter with a field attribute in the current record schema.
   */
  dm_default?: 'type' | 'description' | 'measure' | 'modeling_role';
  /**
   * This can be set to display an icon of the corresponding dm type in the `role`:`column' field of a table.
   */
  dm_icon?: 'measure' | 'none';
  /**
   * Used to determine which custom control to use when control=custom.
   */
  custom_control_id?: string;
  /**
   * Data passed to custom control when control=custom
   */
  data?: {
    [k: string]: unknown;
  };
  /**
   * A format string such as YYYY-MM-DD which describes the display and entry format for a date field.
   */
  date_format?: string;
  /**
   * A format string such as HH:mm:ss which describes the display and entry format for a time field.
   */
  time_format?: string;
  /**
   * Determines if rows can be moved up or down in a table or array of strings
   */
  moveable_rows?: boolean;
  /**
   * Number of rows to display in tables
   */
  rows?: number;
  /**
   * Determines an action should be added to the control
   */
  action_ref?: string;
  /**
   * Determines if a dropdown, outside of a table, can allow a custom value to be entered
   */
  custom_value_allowed?: boolean;
  /**
   * Optional class name to set for this control
   */
  class_name?: string;
  /**
   * Determines if maximize/minimze buttons are shown for code control
   */
  enable_maximize?: boolean;
  [k: string]: unknown;
}
/**
 * Complex parameters
 */
export interface ComplexTypeDefinition {
  /**
   * Name of complex type, can be referenced in other places.
   */
  complex_type_ref: string;
  label?: ResourceDefinition10;
  key_definition?: ParameterDefinition;
  /**
   * Array of rows containing structure element names
   */
  layout?: string[][];
  /**
   * List of parameters
   */
  parameters: (ParameterDefinition | ComplexTypeDefinition)[];
  /**
   * Determines if the table can have rows added and removed
   */
  add_remove_rows?: boolean;
  /**
   * Determines how many rows can be selected at a time.  'multiple-edit': select multiple rows and allow the editing of column values for all selected rows.
   */
  row_selection?: 'single' | 'multiple' | 'multiple-edit';
  /**
   * Determines if the table header should be displayed
   */
  header?: boolean;
  /**
   * Use when `add_remove_rows` is false. Ensures the control contains a record for each field in the data model.
   */
  include_all_fields?: boolean;
  /**
   * Display custom buttons in place of any buttons from the table. Will override 'add_remove_rows' and readonlyTable edit buttons.
   */
  buttons?: ButtonDefinition[];
  [k: string]: unknown;
}
/**
 * Actions that callback to application
 */
export interface ActionDefinition {
  /**
   * Identifier for this action
   */
  id: string;
  description?: ResourceDefinition13;
  /**
   * The action type to be displayed
   */
  control?: 'button' | 'image' | 'custom';
  /**
   * Optional class name to set for this action
   */
  class_name?: string;
  label?: ResourceDefinition14;
  /**
   * Properties for button kind and size. Use when control=button.
   */
  button?: {
    /**
     * button kind
     */
    kind?:
      | 'primary'
      | 'secondary'
      | 'tertiary'
      | 'ghost'
      | 'danger'
      | 'danger--tertiary'
      | 'danger--ghost';
    /**
     * button size
     */
    size?: 'sm' | 'md' | 'lg' | 'xl';
    [k: string]: unknown;
  };
  /**
   * Properties for how the image will look.  Use when control=image.
   */
  image?: {
    /**
     * image url to be used for action
     */
    url?: string;
    /**
     * placement of the action image
     */
    placement?: 'right' | 'left';
    /**
     * pixel size of the image.
     */
    size?: {
      /**
       * image height in pixels
       */
      height?: number;
      /**
       * image width in pixels
       */
      width?: number;
      [k: string]: unknown;
    };
    /**
     * Action image tooltip direction.
     */
    tooltip_direction?: 'right' | 'left' | 'top' | 'bottom';
    [k: string]: unknown;
  };
  /**
   * Used to determine which custom action to use when control=custom.
   */
  custom_action_id?: string;
  /**
   * Data returned when action called
   */
  data?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
