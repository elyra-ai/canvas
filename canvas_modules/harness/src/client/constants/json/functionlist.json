{
	"functions": {
		"function_categories": [
			{
				"id": "generalfunctions",
				"label": {
					"default": "General Functions"
				},
				"function_refs": [
					"is_integer_1",
					"is_real_1",
					"is_number_1",
					"is_string_1",
					"is_date_1",
					"is_time_1",
					"is_timestamp_1",
					"is_datetime_1",
					"to_integer_1",
					"to_real_1",
					"to_number_1",
					"to_string_1",
					"to_date_1",
					"to_time_1",
					"to_timestamp_1",
					"to_datetime_1",
					"stb_centroid_latitude_1",
					"stb_centroid_longitude_1",
					"to_geohash_3",
					"count_equal_2",
					"count_greater_than_2",
					"count_less_than_2",
					"count_not_equal_2",
					"count_nulls_1",
					"count_non_nulls_1",
					"min_2",
					"min_n_1",
					"max_2",
					"max_n_1",
					"member_2",
					"date_before_2",
					"time_before_2",
					"first_non_null_1",
					"last_non_null_1",
					"first_index_2",
					"last_index_2",
					"min_index_1",
					"max_index_1",
					"first_non_null_index_1",
					"last_non_null_index_1",
					"value_at_2",
					"and_0",
					"or_0",
					"not_1",
					"if?then?else?endif_3",
					"if?then?elseif?then?else?endif_5",
					"abs_1",
					"exp_1",
					"fracof_1",
					"intof_1",
					"log_1",
					"log10_1",
					"negate_1",
					"round_1",
					"sign_1",
					"sqrt_1",
					"sum_n_1",
					"mean_n_1",
					"sdev_n_1",
					"arccos_1",
					"arccosh_1",
					"arcsin_1",
					"arcsinh_1",
					"arctan_1",
					"arctan2_2",
					"arctanh_1",
					"cos_1",
					"cosh_1",
					"pi_0",
					"sin_1",
					"sinh_1",
					"tan_1",
					"tanh_1",
					"cdf_chisq_2",
					"cdf_f_3",
					"cdf_normal_3",
					"cdf_t_2",
					"integer_bitcount_1",
					"integer_leastbit_1",
					"integer_length_1",
					"testbit_2",
					"oneof_1",
					"random_1",
					"random0_1",
					"norm_random_0",
					"norm_random_1",
					"norm_random_2",
					"allbutfirst_2",
					"allbutlast_2",
					"alphabefore_2",
					"count_substring_2",
					"endstring_2",
					"hasendstring_2",
					"hasmidstring_2",
					"hasstartstring_2",
					"hassubstring_2",
					"hassubstring_3",
					"isalphacode_1",
					"isendstring_2",
					"islowercode_1",
					"ismidstring_2",
					"isnumbercode_1",
					"isstartstring_2",
					"issubstring_2",
					"issubstring_3",
					"issubstring_count_3",
					"issubstring_lim_5",
					"isuppercode_1",
					"last_1",
					"length_1",
					"locchar_3",
					"locchar_back_3",
					"lowertoupper_1",
					"replace_3",
					"replicate_2",
					"skipchar_3",
					"skipchar_back_3",
					"soundex_1",
					"soundex_difference_2",
					"startstring_2",
					"stripchar_2",
					"stripctrlchars_1",
					"strmember_2",
					"subscrs_2",
					"substring_3",
					"substring_between_3",
					"trim_1",
					"trimend_1",
					"trimstart_1",
					"unicode_char_1",
					"unicode_value_1",
					"uppertolower_1",
					"textsplit_3",
					"datetime_date_3",
					"datetime_date_1",
					"datetime_time_3",
					"datetime_time_1",
					"datetime_timestamp_6",
					"datetime_timestamp_2",
					"datetime_timestamp_1",
					"datetime_year_1",
					"datetime_month_1",
					"datetime_day_1",
					"datetime_weekday_1",
					"datetime_hour_1",
					"datetime_minute_1",
					"datetime_second_1",
					"datetime_month_name_1",
					"datetime_month_short_name_1",
					"datetime_day_name_1",
					"datetime_day_short_name_1",
					"datetime_now_0",
					"datetime_in_seconds_1",
					"date_in_days_1",
					"date_in_weeks_1",
					"date_in_months_1",
					"date_in_years_1",
					"date_days_difference_2",
					"date_weeks_difference_2",
					"date_months_difference_2",
					"date_years_difference_2",
					"date_iso_day_1",
					"date_iso_week_1",
					"date_iso_year_1",
					"date_from_ywd_3",
					"time_in_hours_1",
					"time_in_mins_1",
					"time_in_secs_1",
					"time_hours_difference_2",
					"time_mins_difference_2",
					"time_secs_difference_2",
					"undef_0",
					"close_to_3",
					"crosses_2",
					"overlap_2",
					"within_2",
					"num_points_2",
					"area_1",
					"distance_2",
					"SUM_1",
					"MEAN_1",
					"MIN_1",
					"MIN_1",
					"MIN_1",
					"MIN_1",
					"MIN_1",
					"MAX_1",
					"MAX_1",
					"MAX_1",
					"MAX_1",
					"MAX_1",
					"SDEV_1",
					"MEDIAN_1",
					"COUNT_0",
					"COUNT_1",
					"VAR_1",
					"FIRST_QUARTILE_1",
					"THIRD_QUARTILE_1"
				]
			},
			{
				"id": "@functions",
				"label": {
					"default": "@ Functions"
				},
				"function_refs": [
					"@BLANK_1",
					"@NULL_1",
					"@TODAY_0",
					"@DIFF1_1",
					"@DIFF1_2",
					"@DIFF2_1",
					"@DIFF2_2",
					"@INDEX_0",
					"@LAST_NON_BLANK_1",
					"@MAX_1",
					"@MAX_2",
					"@MAX_3",
					"@MEAN_1",
					"@MEAN_2",
					"@MEAN_3",
					"@MIN_1",
					"@MIN_2",
					"@MIN_3",
					"@OFFSET_2",
					"@OFFSET_3",
					"@SDEV_1",
					"@SDEV_2",
					"@SDEV_3",
					"@SINCE_1",
					"@SINCE_2",
					"@SINCE0_1",
					"@SINCE0_2",
					"@SUM_1",
					"@SUM_2",
					"@SUM_3",
					"@THIS_1",
					"@GLOBAL_MAX_1",
					"@GLOBAL_MEAN_1",
					"@GLOBAL_MIN_1",
					"@GLOBAL_SDEV_1",
					"@GLOBAL_SUM_1",
					"@NULL_1",
					"@FIELD_0",
					"@FIELDS_BETWEEN_2",
					"@FIELDS_MATCHING_1",
					"@MULTI_RESPONSE_SET_1",
					"@TARGET_0",
					"@PREDICTED_0",
					"@PARTITION_FIELD_0",
					"@TRAINING_PARTITION_0",
					"@TESTING_PARTITION_0",
					"@VALIDATION_PARTITION_0"
				]
			},
			{
				"id": "operators",
				"label": {
					"default": "Operators"
				},
				"function_refs": [
					"+_0",
					"-_0",
					"*_0",
					"/_0",
					"**_0",
					"div_0",
					"mod_0",
					"rem_0",
					"=_0",
					"/=_0",
					"<_0",
					"<=_0",
					">_0",
					">=_0",
					"and_0",
					"or_0",
					"not_1",
					"><_0",
					"~~_0",
					"||_0",
					"||/&_0",
					"&&_0",
					"&&~~_0",
					"<<_2",
					">>_2",
					"&&=_0_0",
					"&&/=_0_0",
					"matches_2"
				]
			},
			{
				"id": "information",
				"label": {
					"default": "Information"
				},
				"function_refs": [
					"@BLANK_1",
					"@NULL_1",
					"is_integer_1",
					"is_real_1",
					"is_number_1",
					"is_string_1",
					"is_date_1",
					"is_time_1",
					"is_timestamp_1",
					"is_datetime_1",
					"hasendstring_2",
					"hasmidstring_2",
					"hasstartstring_2",
					"hassubstring_2",
					"hassubstring_3",
					"isalphacode_1",
					"isendstring_2",
					"islowercode_1",
					"ismidstring_2",
					"isnumbercode_1",
					"isstartstring_2",
					"issubstring_2",
					"issubstring_3",
					"issubstring_count_3",
					"issubstring_lim_5",
					"isuppercode_1"
				]
			},
			{
				"id": "conversion",
				"label": {
					"default": "Conversion"
				},
				"function_refs": [
					"to_integer_1",
					"to_real_1",
					"to_number_1",
					"to_string_1",
					"to_date_1",
					"to_time_1",
					"to_timestamp_1",
					"to_datetime_1",
					"stb_centroid_latitude_1",
					"stb_centroid_longitude_1",
					"to_geohash_3"
				]
			},
			{
				"id": "comparison",
				"label": {
					"default": "Comparison"
				},
				"function_refs": [
					"=_0",
					"/=_0",
					"<_0",
					"<=_0",
					">_0",
					">=_0",
					"count_equal_2",
					"count_greater_than_2",
					"count_less_than_2",
					"count_not_equal_2",
					"count_nulls_1",
					"count_non_nulls_1",
					"min_2",
					"min_n_1",
					"max_2",
					"max_n_1",
					"member_2",
					"date_before_2",
					"time_before_2",
					"first_non_null_1",
					"last_non_null_1",
					"first_index_2",
					"last_index_2",
					"min_index_1",
					"max_index_1",
					"first_non_null_index_1",
					"last_non_null_index_1",
					"value_at_2"
				]
			},
			{
				"id": "logical",
				"label": {
					"default": "Logical"
				},
				"function_refs": [
					"and_0",
					"or_0",
					"not_1",
					"if?then?else?endif_3",
					"if?then?elseif?then?else?endif_5"
				]
			},
			{
				"id": "numeric",
				"label": {
					"default": "Numeric"
				},
				"function_refs": [
					"-_0",
					"+_0",
					"*_0",
					"/_0",
					"div_0",
					"mod_0",
					"rem_0",
					"**_0",
					"abs_1",
					"exp_1",
					"fracof_1",
					"intof_1",
					"log_1",
					"log10_1",
					"negate_1",
					"round_1",
					"sign_1",
					"sqrt_1",
					"sum_n_1",
					"mean_n_1",
					"sdev_n_1"
				]
			},
			{
				"id": "trigonometric",
				"label": {
					"default": "Trigonometric"
				},
				"function_refs": [
					"arccos_1",
					"arccosh_1",
					"arcsin_1",
					"arcsinh_1",
					"arctan_1",
					"arctan2_2",
					"arctanh_1",
					"cos_1",
					"cosh_1",
					"pi_0",
					"sin_1",
					"sinh_1",
					"tan_1",
					"tanh_1"
				]
			},
			{
				"id": "probability",
				"label": {
					"default": "Probability"
				},
				"function_refs": [
					"cdf_chisq_2",
					"cdf_f_3",
					"cdf_normal_3",
					"cdf_t_2"
				]
			},
			{
				"id": "spatialfunctions",
				"label": {
					"default": "Spatial Functions"
				},
				"function_refs": [
					"close_to_3",
					"crosses_2",
					"overlap_2",
					"within_2",
					"num_points_2",
					"area_1",
					"distance_2"
				]
			},
			{
				"id": "bitwise",
				"label": {
					"default": "Bitwise"
				},
				"function_refs": [
					"~~_0",
					"||_0",
					"||/&_0",
					"&&_0",
					"&&~~_0",
					"<<_2",
					">>_2",
					"&&=_0_0",
					"&&/=_0_0",
					"integer_bitcount_1",
					"integer_leastbit_1",
					"integer_length_1",
					"testbit_2"
				]
			},
			{
				"id": "random",
				"label": {
					"default": "Random"
				},
				"function_refs": [
					"oneof_1",
					"random_1",
					"random0_1",
					"norm_random_0",
					"norm_random_1",
					"norm_random_2"
				]
			},
			{
				"id": "string",
				"label": {
					"default": "String"
				},
				"function_refs": [
					"><_0",
					"allbutfirst_2",
					"allbutlast_2",
					"alphabefore_2",
					"count_substring_2",
					"endstring_2",
					"hasendstring_2",
					"hasmidstring_2",
					"hasstartstring_2",
					"hassubstring_2",
					"hassubstring_3",
					"isalphacode_1",
					"isendstring_2",
					"islowercode_1",
					"ismidstring_2",
					"isnumbercode_1",
					"isstartstring_2",
					"issubstring_2",
					"issubstring_3",
					"issubstring_count_3",
					"issubstring_lim_5",
					"isuppercode_1",
					"last_1",
					"length_1",
					"locchar_3",
					"locchar_back_3",
					"lowertoupper_1",
					"matches_2",
					"replace_3",
					"replicate_2",
					"skipchar_3",
					"skipchar_back_3",
					"soundex_1",
					"soundex_difference_2",
					"startstring_2",
					"stripchar_2",
					"stripctrlchars_1",
					"strmember_2",
					"subscrs_2",
					"substring_3",
					"substring_between_3",
					"trim_1",
					"trimend_1",
					"trimstart_1",
					"unicode_char_1",
					"unicode_value_1",
					"uppertolower_1",
					"textsplit_3"
				]
			},
			{
				"id": "dateandtime",
				"label": {
					"default": "Date and Time"
				},
				"function_refs": [
					"@TODAY_0",
					"datetime_date_3",
					"datetime_date_1",
					"datetime_time_3",
					"datetime_time_1",
					"datetime_timestamp_6",
					"datetime_timestamp_2",
					"datetime_timestamp_1",
					"datetime_year_1",
					"datetime_month_1",
					"datetime_day_1",
					"datetime_weekday_1",
					"datetime_hour_1",
					"datetime_minute_1",
					"datetime_second_1",
					"datetime_month_name_1",
					"datetime_month_short_name_1",
					"datetime_day_name_1",
					"datetime_day_short_name_1",
					"datetime_now_0",
					"datetime_in_seconds_1",
					"date_in_days_1",
					"date_in_weeks_1",
					"date_in_months_1",
					"date_in_years_1",
					"date_days_difference_2",
					"date_weeks_difference_2",
					"date_months_difference_2",
					"date_years_difference_2",
					"date_iso_day_1",
					"date_iso_week_1",
					"date_iso_year_1",
					"date_from_ywd_3",
					"date_before_2",
					"time_before_2",
					"time_in_hours_1",
					"time_in_mins_1",
					"time_in_secs_1",
					"time_hours_difference_2",
					"time_mins_difference_2",
					"time_secs_difference_2"
				]
			},
			{
				"id": "sequence",
				"label": {
					"default": "Sequence"
				},
				"function_refs": [
					"@DIFF1_1",
					"@DIFF1_2",
					"@DIFF2_1",
					"@DIFF2_2",
					"@INDEX_0",
					"@LAST_NON_BLANK_1",
					"@MAX_1",
					"@MAX_2",
					"@MAX_3",
					"@MEAN_1",
					"@MEAN_2",
					"@MEAN_3",
					"@MIN_1",
					"@MIN_2",
					"@MIN_3",
					"@OFFSET_2",
					"@OFFSET_3",
					"@SDEV_1",
					"@SDEV_2",
					"@SDEV_3",
					"@SINCE_1",
					"@SINCE_2",
					"@SINCE0_1",
					"@SINCE0_2",
					"@SUM_1",
					"@SUM_2",
					"@SUM_3",
					"@THIS_1"
				]
			},
			{
				"id": "global",
				"label": {
					"default": "Global"
				},
				"function_refs": [
					"@GLOBAL_MAX_1",
					"@GLOBAL_MEAN_1",
					"@GLOBAL_MIN_1",
					"@GLOBAL_SDEV_1",
					"@GLOBAL_SUM_1"
				]
			},
			{
				"id": "blanksandnull",
				"label": {
					"default": "Blanks and Null"
				},
				"function_refs": [
					"@BLANK_1",
					"@LAST_NON_BLANK_1",
					"@NULL_1",
					"undef_0"
				]
			},
			{
				"id": "specialfields",
				"label": {
					"default": "Special Fields"
				},
				"function_refs": [
					"@FIELD_0",
					"@FIELDS_BETWEEN_2",
					"@FIELDS_MATCHING_1",
					"@MULTI_RESPONSE_SET_1",
					"@TARGET_0",
					"@PREDICTED_0",
					"@PARTITION_FIELD_0",
					"@TRAINING_PARTITION_0",
					"@TESTING_PARTITION_0",
					"@VALIDATION_PARTITION_0"
				]
			},
			{
				"id": "allfunctions",
				"label": {
					"default": "All Functions"
				},
				"function_refs": [
					"@BLANK_1",
					"@NULL_1",
					"is_integer_1",
					"is_real_1",
					"is_number_1",
					"is_string_1",
					"is_date_1",
					"is_time_1",
					"is_timestamp_1",
					"is_datetime_1",
					"to_integer_1",
					"to_real_1",
					"to_number_1",
					"to_string_1",
					"to_date_1",
					"to_time_1",
					"to_timestamp_1",
					"to_datetime_1",
					"stb_centroid_latitude_1",
					"stb_centroid_longitude_1",
					"to_geohash_3",
					"=_0",
					"/=_0",
					"<_0",
					"<=_0",
					">_0",
					">=_0",
					"count_equal_2",
					"count_greater_than_2",
					"count_less_than_2",
					"count_not_equal_2",
					"count_nulls_1",
					"count_non_nulls_1",
					"min_2",
					"min_n_1",
					"max_2",
					"max_n_1",
					"member_2",
					"date_before_2",
					"time_before_2",
					"first_non_null_1",
					"last_non_null_1",
					"first_index_2",
					"last_index_2",
					"min_index_1",
					"max_index_1",
					"first_non_null_index_1",
					"last_non_null_index_1",
					"value_at_2",
					"and_0",
					"or_0",
					"not_1",
					"if?then?else?endif_3",
					"if?then?elseif?then?else?endif_5",
					"-_0",
					"+_0",
					"*_0",
					"/_0",
					"div_0",
					"mod_0",
					"rem_0",
					"**_0",
					"abs_1",
					"exp_1",
					"fracof_1",
					"intof_1",
					"log_1",
					"log10_1",
					"negate_1",
					"round_1",
					"sign_1",
					"sqrt_1",
					"sum_n_1",
					"mean_n_1",
					"sdev_n_1",
					"arccos_1",
					"arccosh_1",
					"arcsin_1",
					"arcsinh_1",
					"arctan_1",
					"arctan2_2",
					"arctanh_1",
					"cos_1",
					"cosh_1",
					"pi_0",
					"sin_1",
					"sinh_1",
					"tan_1",
					"tanh_1",
					"cdf_chisq_2",
					"cdf_f_3",
					"cdf_normal_3",
					"cdf_t_2",
					"~~_0",
					"||_0",
					"||/&_0",
					"&&_0",
					"&&~~_0",
					"<<_2",
					">>_2",
					"&&=_0_0",
					"&&/=_0_0",
					"integer_bitcount_1",
					"integer_leastbit_1",
					"integer_length_1",
					"testbit_2",
					"oneof_1",
					"random_1",
					"random0_1",
					"norm_random_0",
					"norm_random_1",
					"norm_random_2",
					"><_0",
					"allbutfirst_2",
					"allbutlast_2",
					"alphabefore_2",
					"count_substring_2",
					"endstring_2",
					"hasendstring_2",
					"hasmidstring_2",
					"hasstartstring_2",
					"hassubstring_2",
					"hassubstring_3",
					"isalphacode_1",
					"isendstring_2",
					"islowercode_1",
					"ismidstring_2",
					"isnumbercode_1",
					"isstartstring_2",
					"issubstring_2",
					"issubstring_3",
					"issubstring_count_3",
					"issubstring_lim_5",
					"isuppercode_1",
					"last_1",
					"length_1",
					"locchar_3",
					"locchar_back_3",
					"lowertoupper_1",
					"matches_2",
					"replace_3",
					"replicate_2",
					"skipchar_3",
					"skipchar_back_3",
					"soundex_1",
					"soundex_difference_2",
					"startstring_2",
					"stripchar_2",
					"stripctrlchars_1",
					"strmember_2",
					"subscrs_2",
					"substring_3",
					"substring_between_3",
					"trim_1",
					"trimend_1",
					"trimstart_1",
					"unicode_char_1",
					"unicode_value_1",
					"uppertolower_1",
					"textsplit_3",
					"@TODAY_0",
					"datetime_date_3",
					"datetime_date_1",
					"datetime_time_3",
					"datetime_time_1",
					"datetime_timestamp_6",
					"datetime_timestamp_2",
					"datetime_timestamp_1",
					"datetime_year_1",
					"datetime_month_1",
					"datetime_day_1",
					"datetime_weekday_1",
					"datetime_hour_1",
					"datetime_minute_1",
					"datetime_second_1",
					"datetime_month_name_1",
					"datetime_month_short_name_1",
					"datetime_day_name_1",
					"datetime_day_short_name_1",
					"datetime_now_0",
					"datetime_in_seconds_1",
					"date_in_days_1",
					"date_in_weeks_1",
					"date_in_months_1",
					"date_in_years_1",
					"date_days_difference_2",
					"date_weeks_difference_2",
					"date_months_difference_2",
					"date_years_difference_2",
					"date_iso_day_1",
					"date_iso_week_1",
					"date_iso_year_1",
					"date_from_ywd_3",
					"time_in_hours_1",
					"time_in_mins_1",
					"time_in_secs_1",
					"time_hours_difference_2",
					"time_mins_difference_2",
					"time_secs_difference_2",
					"@DIFF1_1",
					"@DIFF1_2",
					"@DIFF2_1",
					"@DIFF2_2",
					"@INDEX_0",
					"@LAST_NON_BLANK_1",
					"@MAX_1",
					"@MAX_2",
					"@MAX_3",
					"@MEAN_1",
					"@MEAN_2",
					"@MEAN_3",
					"@MIN_1",
					"@MIN_2",
					"@MIN_3",
					"@OFFSET_2",
					"@OFFSET_3",
					"@SDEV_1",
					"@SDEV_2",
					"@SDEV_3",
					"@SINCE_1",
					"@SINCE_2",
					"@SINCE0_1",
					"@SINCE0_2",
					"@SUM_1",
					"@SUM_2",
					"@SUM_3",
					"@THIS_1",
					"@GLOBAL_MAX_1",
					"@GLOBAL_MEAN_1",
					"@GLOBAL_MIN_1",
					"@GLOBAL_SDEV_1",
					"@GLOBAL_SUM_1",
					"@NULL_1",
					"undef_0",
					"@FIELD_0",
					"@FIELDS_BETWEEN_2",
					"@FIELDS_MATCHING_1",
					"@MULTI_RESPONSE_SET_1",
					"@TARGET_0",
					"@PREDICTED_0",
					"@PARTITION_FIELD_0",
					"@TRAINING_PARTITION_0",
					"@TESTING_PARTITION_0",
					"@VALIDATION_PARTITION_0",
					"close_to_3",
					"crosses_2",
					"overlap_2",
					"within_2",
					"num_points_2",
					"area_1",
					"distance_2",
					"SUM_1",
					"MEAN_1",
					"MIN_1",
					"MIN_1",
					"MIN_1",
					"MIN_1",
					"MIN_1",
					"MAX_1",
					"MAX_1",
					"MAX_1",
					"MAX_1",
					"MAX_1",
					"SDEV_1",
					"MEDIAN_1",
					"COUNT_0",
					"COUNT_1",
					"VAR_1",
					"FIRST_QUARTILE_1",
					"THIRD_QUARTILE_1"
				]
			},
			{
				"id": "BADD",
				"label": {
					"default": "BAD Functions"
				},
				"function_refs": [
					"not_exist",
					"no_parameter",
					"no_description",
					"no_parameter_type"
				]
			}
		],
		"operator_refs": [
			"=_0",
			"/=_0",
			"<_0",
			"<=_0",
			">_0",
			">=_0",
			"-_0",
			"+_0",
			"*_0",
			"/_0",
			"div_0",
			"mod_0",
			"rem_0",
			"**_0"
		],
		"function_info": [
  {
    "id": "@BLANK_1",
    "name": "@BLANK",
    "label": {
      "default": "@BLANK(FIELD)",
      "resource_key": "@BLANK_1.label"
    },
    "description": {
      "default": "Returns true if the value of FIELD is blank according to the definition for FIELD in an upstream type node.",
      "resource_key": "@BLANK_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@NULL_1",
    "name": "@NULL",
    "label": {
      "default": "@NULL(FIELD)",
      "resource_key": "@NULL_1.label"
    },
    "description": {
      "default": "None",
      "resource_key": "@NULL_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "is_integer_1",
    "name": "is_integer",
    "label": {
      "default": "is_integer(ITEM)",
      "resource_key": "is_integer_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is an integer. Otherwise, returns a value of false.",
      "resource_key": "is_integer_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_real_1",
    "name": "is_real",
    "label": {
      "default": "is_real(ITEM)",
      "resource_key": "is_real_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a real number. Otherwise, returns a value of false.",
      "resource_key": "is_real_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_number_1",
    "name": "is_number",
    "label": {
      "default": "is_number(ITEM)",
      "resource_key": "is_number_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a number. Otherwise, returns a value of false.",
      "resource_key": "is_number_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_string_1",
    "name": "is_string",
    "label": {
      "default": "is_string(ITEM)",
      "resource_key": "is_string_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a string. Otherwise, returns a value of false.",
      "resource_key": "is_string_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_date_1",
    "name": "is_date",
    "label": {
      "default": "is_date(ITEM)",
      "resource_key": "is_date_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a date. Otherwise, returns a value of false.",
      "resource_key": "is_date_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_time_1",
    "name": "is_time",
    "label": {
      "default": "is_time(ITEM)",
      "resource_key": "is_time_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a time. Otherwise, returns a value of false.",
      "resource_key": "is_time_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_timestamp_1",
    "name": "is_timestamp",
    "label": {
      "default": "is_timestamp(ITEM)",
      "resource_key": "is_timestamp_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a timestamp. Otherwise, returns a value of false.",
      "resource_key": "is_timestamp_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "is_datetime_1",
    "name": "is_datetime",
    "label": {
      "default": "is_datetime(ITEM)",
      "resource_key": "is_datetime_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM type is a datetime (date, time, or timestamp). Otherwise, returns a value of false.",
      "resource_key": "is_datetime_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_integer_1",
    "name": "to_integer",
    "label": {
      "default": "to_integer(ITEM)",
      "resource_key": "to_integer_1.label"
    },
    "description": {
      "default": "Converts ITEM to an integer. ITEM must be a string, or a number.",
      "resource_key": "to_integer_1.desc"
    },
     "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_real_1",
    "name": "to_real",
    "label": {
      "default": "to_real(ITEM)",
      "resource_key": "to_real_1.label"
    },
    "description": {
      "default": "Converts ITEM to a real number. ITEM must be a string, or a number.",
      "resource_key": "to_real_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_number_1",
    "name": "to_number",
    "label": {
      "default": "to_number(ITEM)",
      "resource_key": "to_number_1.label"
    },
    "description": {
      "default": "Converts ITEM to a number. ITEM must be a string, or a number.",
      "resource_key": "to_number_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_string_1",
    "name": "to_string",
    "label": {
      "default": "to_string(ITEM)",
      "resource_key": "to_string_1.label"
    },
    "description": {
      "default": "Converts ITEM to a string.",
      "resource_key": "to_string_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_date_1",
    "name": "to_date",
    "label": {
      "default": "to_date(ITEM)",
      "resource_key": "to_date_1.label"
    },
    "description": {
      "default": "Converts ITEM to a date. ITEM must be a string, a timestamp, or a date.",
      "resource_key": "to_date_1.desc"
    },
    "return_type": {
      "default": "Date",
      "resource_key": "date.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_time_1",
    "name": "to_time",
    "label": {
      "default": "to_time(ITEM)",
      "resource_key": "to_time_1.label"
    },
    "description": {
      "default": "Converts ITEM to a time. ITEM must be a string, a timestamp, or a time.",
      "resource_key": "to_time_1.desc"
    },
    "return_type": {
      "default": "Time",
      "resource_key": "time.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_timestamp_1",
    "name": "to_timestamp",
    "label": {
      "default": "to_timestamp(ITEM)",
      "resource_key": "to_timestamp_1.label"
    },
    "description": {
      "default": "Converts ITEM to a timestamp. ITEM must be a string, or any datetime value.",
      "resource_key": "to_timestamp_1.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "to_datetime_1",
    "name": "to_datetime",
    "label": {
      "default": "to_datetime(ITEM)",
      "resource_key": "to_datetime_1.label"
    },
    "description": {
      "default": "Converts ITEM to a datetime value. ITEM must be a string, or a datetime value.",
      "resource_key": "to_datetime_1.desc"
    },
    "return_type": {
      "default": "Datetime",
      "resource_key": "datetime.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "stb_centroid_latitude_1",
    "name": "stb_centroid_latitude",
    "label": {
      "default": "stb_centroid_latitude(STRING)",
      "resource_key": "stb_centroid_latitude_1.label"
    },
    "description": {
      "default": "Returns an integer value for latitude corresponding to centroid of the geohash argument.",
      "resource_key": "stb_centroid_latitude_1.desc"
    },
     "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "stb_centroid_longitude_1",
    "name": "stb_centroid_longitude",
    "label": {
      "default": "stb_centroid_longitude(STRING)",
      "resource_key": "stb_centroid_longitude_1.label"
    },
    "description": {
      "default": "Returns an integer value for longitude corresponding to centroid of the geohash argument.",
      "resource_key": "stb_centroid_longitude_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "to_geohash_3",
    "name": "to_geohash",
    "label": {
      "default": "to_geohash(LATITUDE,LONGITUDE,BITS)",
      "resource_key": "to_geohash_3.label"
    },
    "description": {
      "default": "Returns the geohashed string corresponding to the LATITUDE and LONGITUDE using the specified number of BITS for the density.",
      "resource_key": "to_geohash_3.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LATITUDE"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "LONGITUDE"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "BITS"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "=_0",
    "name": "=",
    "label": {
      "default": "=",
      "resource_key": "=_0.label"
    },
    "description": {
      "default": "Used between any two comparable items. Returns true if ITEM1 is equal to ITEM2.",
      "resource_key": "=_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "/=_0",
    "name": "/=",
    "label": {
      "default": "/=",
      "resource_key": "/=_0.label"
    },
    "description": {
      "default": "Used between any two comparable items. Returns true if ITEM1 is NOT equal to ITEM2.",
      "resource_key": "/=_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "<_0",
    "name": "<",
    "label": {
      "default": "<",
      "resource_key": "<_0.label"
    },
    "description": {
      "default": "Used between any two comparable items. Returns true if ITEM1 is strictly less than ITEM2.",
      "resource_key": "<_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "<=_0",
    "name": "<=",
    "label": {
      "default": "<=",
      "resource_key": "<=_0.label"
    },
    "description": {
      "default": "Used between any two comparable items. Returns true if ITEM1 is less than or equal to ITEM2.",
      "resource_key": "<=_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": ">_0",
    "name": ">",
    "label": {
      "default": ">",
      "resource_key": ">_0.label"
    },
    "description": {
      "default": "Used between any two comparable items. Returns true if ITEM1 is strictly greater than ITEM2.",
      "resource_key": ">_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": ">=_0",
    "name": ">=",
    "label": {
      "default": ">=",
      "resource_key": ">=_0.label"
    },
    "description": {
      "default": "Used between any two comparable items. Returns true if ITEM1 is greater than or equal to ITEM2.",
      "resource_key": ">=_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "count_equal_2",
    "name": "count_equal",
    "label": {
      "default": "count_equal(ITEM1,LIST)",
      "resource_key": "count_equal_2.label"
    },
    "description": {
      "default": "Returns the number of values from a LIST of fields that are equal to ITEM1, or NULL if ITEM1 is NULL.",
      "resource_key": "count_equal_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "count_greater_than_2",
    "name": "count_greater_than",
    "label": {
      "default": "count_greater_than(ITEM1,LIST)",
      "resource_key": "count_greater_than_2.label"
    },
    "description": {
      "default": "Returns the number of values from a LIST of fields that are greater than ITEM1, or NULL if ITEM1 is NULL.",
      "resource_key": "count_greater_than_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "count_less_than_2",
    "name": "count_less_than",
    "label": {
      "default": "count_less_than(ITEM1,LIST)",
      "resource_key": "count_less_than_2.label"
    },
    "description": {
      "default": "Returns the number of values from a LIST of fields that are less than ITEM1, or NULL if ITEM1 is NULL.",
      "resource_key": "count_less_than_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "count_not_equal_2",
    "name": "count_not_equal",
    "label": {
      "default": "count_not_equal(ITEM1,LIST)",
      "resource_key": "count_not_equal_2.label"
    },
    "description": {
      "default": "Returns the number of values from a LIST of fields that are not equal to ITEM1, or NULL if ITEM1 is NULL.",
      "resource_key": "count_not_equal_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "count_nulls_1",
    "name": "count_nulls",
    "label": {
      "default": "count_nulls(LIST)",
      "resource_key": "count_nulls_1.label"
    },
    "description": {
      "default": "Returns the number of NULL values from a LIST of fields.",
      "resource_key": "count_nulls_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "count_non_nulls_1",
    "name": "count_non_nulls",
    "label": {
      "default": "count_non_nulls(LIST)",
      "resource_key": "count_non_nulls_1.label"
    },
    "description": {
      "default": "Returns the number of non-NULL values from a LIST of fields.",
      "resource_key": "count_non_nulls_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "min_2",
    "name": "min",
    "label": {
      "default": "min(ITEM1,ITEM2)",
      "resource_key": "min_2.label"
    },
    "description": {
      "default": "Returns the lesser of ITEM1 and ITEM2.",
      "resource_key": "min_2.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "min_n_1",
    "name": "min_n",
    "label": {
      "default": "min_n(LIST)",
      "resource_key": "min_n_1.label"
    },
    "description": {
      "default": "Returns the minimum value from a LIST of numeric fields, or NULL if there are no non-NULL values.",
      "resource_key": "min_n_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "max_2",
    "name": "max",
    "label": {
      "default": "max(ITEM1,ITEM2)",
      "resource_key": "max_2.label"
    },
    "description": {
      "default": "Returns the greater of ITEM1 and ITEM2.",
      "resource_key": "max_2.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "max_n_1",
    "name": "max_n",
    "label": {
      "default": "max_n(LIST)",
      "resource_key": "max_n_1.label"
    },
    "description": {
      "default": "Returns the maximum value from a LIST of numeric fields, or NULL if there are no non-NULL values.",
      "resource_key": "max_n_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "member_2",
    "name": "member",
    "label": {
      "default": "member(ITEM1,LIST)",
      "resource_key": "member_2.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM is an element of the specified list. Otherwise, returns a value of false.",
      "resource_key": "member_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "date_before_2",
    "name": "date_before",
    "label": {
      "default": "date_before(ITEM1,ITEM2)",
      "resource_key": "date_before_2.label"
    },
    "description": {
      "default": "Returns a value of true if the DATE or timestamp ITEM1 is prior to the DATE or Timestamp ITEM2.",
      "resource_key": "date_before_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "time_before_2",
    "name": "time_before",
    "label": {
      "default": "time_before(ITEM1,ITEM2)",
      "resource_key": "time_before_2.label"
    },
    "description": {
      "default": "Returns a value of true if the TIME or timestamp ITEM1 is prior to the TIME or timestamp ITEM2.",
      "resource_key": "time_before_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "first_non_null_1",
    "name": "first_non_null",
    "label": {
      "default": "first_non_null(LIST)",
      "resource_key": "first_non_null_1.label"
    },
    "description": {
      "default": "Returns the first non-NULL value in a LIST of fields, or NULL if all values are NULL.",
      "resource_key": "first_non_null_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "last_non_null_1",
    "name": "last_non_null",
    "label": {
      "default": "last_non_null(LIST)",
      "resource_key": "last_non_null_1.label"
    },
    "description": {
      "default": "Returns the last non-NULL value in a LIST of fields, or NULL if all values are NULL.",
      "resource_key": "last_non_null_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "first_index_2",
    "name": "first_index",
    "label": {
      "default": "first_index(ITEM,LIST)",
      "resource_key": "first_index_2.label"
    },
    "description": {
      "default": "Returns the index of the first field containing ITEM from a LIST of fields, or 0 if the value is not found.",
      "resource_key": "first_index_2.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "last_index_2",
    "name": "last_index",
    "label": {
      "default": "last_index(ITEM,LIST)",
      "resource_key": "last_index_2.label"
    },
    "description": {
      "default": "Returns the index of the last field containing ITEM from a LIST of fields, or 0 if the value is not found.",
      "resource_key": "last_index_2.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "min_index_1",
    "name": "min_index",
    "label": {
      "default": "min_index(LIST)",
      "resource_key": "min_index_1.label"
    },
    "description": {
      "default": "Returns the index of the field containing the minimum value from a LIST of numeric fields, or 0 if all values are NULL.",
      "resource_key": "min_index_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "max_index_1",
    "name": "max_index",
    "label": {
      "default": "max_index(LIST)",
      "resource_key": "max_index_1.label"
    },
    "description": {
      "default": "Returns the index of the field containing the maximum value from a LIST of numeric fields, or 0 if all values are NULL.",
      "resource_key": "max_index_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "first_non_null_index_1",
    "name": "first_non_null_index",
    "label": {
      "default": "first_non_null_index(LIST)",
      "resource_key": "first_non_null_index_1.label"
    },
    "description": {
      "default": "Returns the index of the first field containing a non-NULL value in a LIST of fields, or 0 if all values are NULL.",
      "resource_key": "first_non_null_index_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "last_non_null_index_1",
    "name": "last_non_null_index",
    "label": {
      "default": "last_non_null_index(LIST)",
      "resource_key": "last_non_null_index_1.label"
    },
    "description": {
      "default": "Returns the index of the last field containing a non-NULL value in a LIST of fields, or 0 if all values are NULL.",
      "resource_key": "last_non_null_index_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "value_at_2",
    "name": "value_at",
    "label": {
      "default": "value_at(INT,LIST)",
      "resource_key": "value_at_2.label"
    },
    "description": {
      "default": "Returns the value of the field at offset INT in a LIST of fields.",
      "resource_key": "value_at_2.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "and_0",
    "name": "and",
    "label": {
      "default": "and",
      "resource_key": "and_0.label"
    },
    "description": {
      "default": "Used in between two CLEM expressions. Returns a value of true if both EXPR1 and EXPR2 are true.",
      "resource_key": "and_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "not()_0",
    "name": "not()",
    "label": {
      "default": "not()",
      "resource_key": "not()_0.label"
    },
    "description": {
      "default": "Expression is not true, not(EXPR)",
      "resource_key": "not()_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "()_0",
    "name": "()",
    "label": {
      "default": "()",
      "resource_key": "()_0.label"
    },
    "description": {
      "default": "Enclose selection in parentheses",
      "resource_key": "()_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "operator_button": true
  },
  {
    "id": "or_0",
    "name": "or",
    "label": {
      "default": "or",
      "resource_key": "or_0.label"
    },
    "description": {
      "default": "Used in between two CLEM expressions. Returns a value of true if either EXPR1 or EXPR2 is true, or if both are true.",
      "resource_key": "or_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "operator_button": true
  },
  {
    "id": "not_1",
    "name": "not",
    "label": {
      "default": "not(COND)",
      "resource_key": "not_1.label"
    },
    "description": {
      "default": "Returns a value of true if COND is false. Otherwise, returns a value of 0.",
      "resource_key": "not_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "COND"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "if?then?else?endif_3",
    "name": "if?then?else?endif",
    "label": {
      "default": "if COND1 then EXPR1 else EXPR2 endif",
      "resource_key": "if?then?else?endif_3.label"
    },
    "description": {
      "default": "If COND is true, returns the result of evaluating EXPR1. Otherwise, returns the result of evaluating EXPR2.",
      "resource_key": "if?then?else?endif_3.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "COND1"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "EXPR1"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "EXPR2"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "if?then?elseif?then?else?endif_5",
    "name": "if?then?elseif?then?else?endif",
    "label": {
      "default": "if COND1 then EXPR1 elseif COND2 then EXPR2 else EXPR_N endif",
      "resource_key": "if?then?elseif?then?else?endif_5.label"
    },
    "description": {
      "default": "If COND1 is true, returns the result of EXPR1. If COND2 is true, the result of EXPR2. Otherwise, EXPRN.",
      "resource_key": "if?then?elseif?then?else?endif_5.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "COND1"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "EXPR1"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "COND2"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "EXPR2"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "EXPR_N"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "-_0",
    "name": "-",
    "label": {
      "default": "-",
      "resource_key": "-_0.label"
    },
    "description": {
      "default": "Used between two numbers: NUM1 - NUM2 (subtracts NUM2 from NUM1) or in front of a number: - NUM.",
      "resource_key": "-_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "+_0",
    "name": "+",
    "label": {
      "default": "+",
      "resource_key": "+_0.label"
    },
    "description": {
      "default": "Used between two numbers: NUM1 + NUM2. Adds NUM1 to NUM2.",
      "resource_key": "+_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "*_0",
    "name": "*",
    "label": {
      "default": "*",
      "resource_key": "*_0.label"
    },
    "description": {
      "default": "Used between two numbers: NUM1 * NUM2. Multiplies NUM1 by NUM2.",
      "resource_key": "*_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "/_0",
    "name": "/",
    "label": {
      "default": "/",
      "resource_key": "/_0.label"
    },
    "description": {
      "default": "Used between two numbers: NUM1 / NUM2. Divides NUM1 by NUM2.",
      "resource_key": "/_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "div_0",
    "name": "div",
    "label": {
      "default": "div",
      "resource_key": "div_0.label"
    },
    "description": {
      "default": "Used between two integers: INT1 div INT2. Performs integer division.",
      "resource_key": "div_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "mod_0",
    "name": "mod",
    "label": {
      "default": "mod",
      "resource_key": "mod_0.label"
    },
    "description": {
      "default": "Used between two integers: INT1 mod INT2. Returns INT1 modulo INT2.",
      "resource_key": "mod_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "rem_0",
    "name": "rem",
    "label": {
      "default": "rem",
      "resource_key": "rem_0.label"
    },
    "description": {
      "default": "Used between two integers: INT1 rem INT2. Returns the remainder, INT1 - (INT1 div INT2) * INT2.",
      "resource_key": "rem_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "**_0",
    "name": "**",
    "label": {
      "default": "**",
      "resource_key": "**_0.label"
    },
    "description": {
      "default": "Used between two numbers: BASE ** POWER. Returns BASE raised to the power POWER.",
      "resource_key": "**_0.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "operator_button": true
  },
  {
    "id": "abs_1",
    "name": "abs",
    "label": {
      "default": "abs(NUM)",
      "resource_key": "abs_1.label"
    },
    "description": {
      "default": "Returns the absolute value of NUM, which is always a number of the same type.",
      "resource_key": "abs_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "exp_1",
    "name": "exp",
    "label": {
      "default": "exp(NUM)",
      "resource_key": "exp_1.label"
    },
    "description": {
      "default": "Returns e raised to the power NUM, where e is the base of natural logarithms.",
      "resource_key": "exp_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "fracof_1",
    "name": "fracof",
    "label": {
      "default": "fracof(NUM)",
      "resource_key": "fracof_1.label"
    },
    "description": {
      "default": "Returns the fractional part of NUM, defined as NUM - intof(NUM).",
      "resource_key": "fracof_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "intof_1",
    "name": "intof",
    "label": {
      "default": "intof(NUM)",
      "resource_key": "intof_1.label"
    },
    "description": {
      "default": "Returns the integer of the same sign as NUM and with the largest magnitude such that abs(INT) <= abs(NUM).",
      "resource_key": "intof_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "log_1",
    "name": "log",
    "label": {
      "default": "log(NUM)",
      "resource_key": "log_1.label"
    },
    "description": {
      "default": "Returns the natural (base e) logarithm of NUM, which must not be a zero of any kind.",
      "resource_key": "log_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "log10_1",
    "name": "log10",
    "label": {
      "default": "log10(NUM)",
      "resource_key": "log10_1.label"
    },
    "description": {
      "default": "Returns the base 10 logarithm of NUM, which must not be a zero of any kind. This function is defined as log(NUM)/log(10).",
      "resource_key": "log10_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "negate_1",
    "name": "negate",
    "label": {
      "default": "negate(NUM)",
      "resource_key": "negate_1.label"
    },
    "description": {
      "default": "Returns the negation of NUM - that is, it returns the corresponding number with the opposite sign.",
      "resource_key": "negate_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "round_1",
    "name": "round",
    "label": {
      "default": "round(NUM)",
      "resource_key": "round_1.label"
    },
    "description": {
      "default": "Rounds NUM to an integer by taking intof(NUM+0.5) if NUM is positive, or intof(NUM-0.5) if NUM is negative.",
      "resource_key": "round_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "sign_1",
    "name": "sign",
    "label": {
      "default": "sign(NUM)",
      "resource_key": "sign_1.label"
    },
    "description": {
      "default": "Returns -1, 0/0.0, or 1 if NUM, depending on whether NUM is negative, zero, or positive.",
      "resource_key": "sign_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "sqrt_1",
    "name": "sqrt",
    "label": {
      "default": "sqrt(NUM)",
      "resource_key": "sqrt_1.label"
    },
    "description": {
      "default": "Returns the square root of NUM. NUM must be positive.",
      "resource_key": "sqrt_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "sum_n_1",
    "name": "sum_n",
    "label": {
      "default": "sum_n(LIST)",
      "resource_key": "sum_n_1.label"
    },
    "description": {
      "default": "Returns the sum of the values from a LIST of numeric fields, or NULL if there are no non-NULL values.",
      "resource_key": "sum_n_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "mean_n_1",
    "name": "mean_n",
    "label": {
      "default": "mean_n(LIST)",
      "resource_key": "mean_n_1.label"
    },
    "description": {
      "default": "Returns the mean of the values from a LIST of numeric fields, or NULL if there are no non-NULL values.",
      "resource_key": "mean_n_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "sdev_n_1",
    "name": "sdev_n",
    "label": {
      "default": "sdev_n(LIST)",
      "resource_key": "sdev_n_1.label"
    },
    "description": {
      "default": "Returns the standard deviation of the values from a LIST of numeric fields, or NULL if there are fewer than two non-NULL values.",
      "resource_key": "sdev_n_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "arccos_1",
    "name": "arccos",
    "label": {
      "default": "arccos(NUM)",
      "resource_key": "arccos_1.label"
    },
    "description": {
      "default": "Computes the arccosine of NUM.",
      "resource_key": "arccos_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "arccosh_1",
    "name": "arccosh",
    "label": {
      "default": "arccosh(NUM)",
      "resource_key": "arccosh_1.label"
    },
    "description": {
      "default": "Computes the hyperbolic arccosine of NUM.",
      "resource_key": "arccosh_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "arcsin_1",
    "name": "arcsin",
    "label": {
      "default": "arcsin(NUM)",
      "resource_key": "arcsin_1.label"
    },
    "description": {
      "default": "Computes the arcsine of NUM.",
      "resource_key": "arcsin_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "arcsinh_1",
    "name": "arcsinh",
    "label": {
      "default": "arcsinh(NUM)",
      "resource_key": "arcsinh_1.label"
    },
    "description": {
      "default": "Computes the hyperbolic arcsine of NUM.",
      "resource_key": "arcsinh_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "arctan_1",
    "name": "arctan",
    "label": {
      "default": "arctan(NUM)",
      "resource_key": "arctan_1.label"
    },
    "description": {
      "default": "Computes the arctangent of NUM.",
      "resource_key": "arctan_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "arctan2_2",
    "name": "arctan2",
    "label": {
      "default": "arctan2(NUM_Y,NUM_X)",
      "resource_key": "arctan2_2.label"
    },
    "description": {
      "default": "Computes the arctangent of NUM_Y/NUM_X. Uses signs of two numbers to derive quadrant information.",
      "resource_key": "arctan2_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM_Y"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "NUM_X"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "arctanh_1",
    "name": "arctanh",
    "label": {
      "default": "arctanh(NUM)",
      "resource_key": "arctanh_1.label"
    },
    "description": {
      "default": "Computes the hyperbolic arctangent of NUM.",
      "resource_key": "arctanh_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "cos_1",
    "name": "cos",
    "label": {
      "default": "cos(NUM)",
      "resource_key": "cos_1.label"
    },
    "description": {
      "default": "Computes the cosine of angle NUM.",
      "resource_key": "cos_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "cosh_1",
    "name": "cosh",
    "label": {
      "default": "cosh(NUM)",
      "resource_key": "cosh_1.label"
    },
    "description": {
      "default": "Computes the hyperbolic cosine of angle NUM.",
      "resource_key": "cosh_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "pi_0",
    "name": "pi",
    "label": {
      "default": "pi",
      "resource_key": "pi_0.label"
    },
    "description": {
      "default": "This constant is the best real approximation to pi.",
      "resource_key": "pi_0.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
    ]
  },
  {
    "id": "sin_1",
    "name": "sin",
    "label": {
      "default": "sin(NUM)",
      "resource_key": "sin_1.label"
    },
    "description": {
      "default": "Computes the sine of angle NUM.",
      "resource_key": "sin_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "sinh_1",
    "name": "sinh",
    "label": {
      "default": "sinh(NUM)",
      "resource_key": "sinh_1.label"
    },
    "description": {
      "default": "Computes the hyperbolic sine of angle NUM.",
      "resource_key": "sinh_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "tan_1",
    "name": "tan",
    "label": {
      "default": "tan(NUM)",
      "resource_key": "tan_1.label"
    },
    "description": {
      "default": "Computes the tangent of angle NUM.",
      "resource_key": "tan_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "tanh_1",
    "name": "tanh",
    "label": {
      "default": "tanh(NUM)",
      "resource_key": "tanh_1.label"
    },
    "description": {
      "default": "Computes the hyperbolic tangent of angle NUM.",
      "resource_key": "tanh_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "cdf_chisq_2",
    "name": "cdf_chisq",
    "label": {
      "default": "cdf_chisq(NUM,DF)",
      "resource_key": "cdf_chisq_2.label"
    },
    "description": {
      "default": "Returns the probability that a value from the chi-square distribution with DF degrees of freedom will be less than NUM.",
      "resource_key": "cdf_chisq_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "DF"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "cdf_f_3",
    "name": "cdf_f",
    "label": {
      "default": "cdf_f(NUM,DF1,DF2)",
      "resource_key": "cdf_f_3.label"
    },
    "description": {
      "default": "Returns the probability that a value from the F distribution, with degrees of freedom DF1 and DF2, will be less than NUM.",
      "resource_key": "cdf_f_3.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "DF1"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "DF2"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "cdf_normal_3",
    "name": "cdf_normal",
    "label": {
      "default": "cdf_normal(NUM,MEAN,STDDEV)",
      "resource_key": "cdf_normal_3.label"
    },
    "description": {
      "default": "Returns the probability that a value from the normal distribution with the specified MEAN and standard deviation will be less than NUM.",
      "resource_key": "cdf_normal_3.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "MEAN"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "STDDEV"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "cdf_t_2",
    "name": "cdf_t",
    "label": {
      "default": "cdf_t(NUM,DF)",
      "resource_key": "cdf_t_2.label"
    },
    "description": {
      "default": "Returns the probability that a value from Student's t distribution with DF degrees of freedom will be less than NUM.",
      "resource_key": "cdf_t_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      },
      {
        "label": {
          "default": "DF"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "~~_0",
    "name": "~~",
    "label": {
      "default": "~~",
      "resource_key": "~~_0.label"
    },
    "description": {
      "default": "Used in front of an integer. Produces the bitwise complement of INT.",
      "resource_key": "~~_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": "||_0",
    "name": "||",
    "label": {
      "default": "||",
      "resource_key": "||_0.label"
    },
    "description": {
      "default": "Used between two integers. The result is the bitwise 'inclusive or' of INT1 and INT2.",
      "resource_key": "||_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": "||/&_0",
    "name": "||/&",
    "label": {
      "default": "||/&",
      "resource_key": "||/&_0.label"
    },
    "description": {
      "default": "Used between two integers. The result is the bitwise 'exclusive or' of INT1 and INT2.",
      "resource_key": "||/&_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": "&&_0",
    "name": "&&",
    "label": {
      "default": "&&",
      "resource_key": "&&_0.label"
    },
    "description": {
      "default": "Used between two integers. The result is the bitwise 'and' of the integers INT1 and INT2.",
      "resource_key": "&&_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": "&&~~_0",
    "name": "&&~~",
    "label": {
      "default": "&&~~",
      "resource_key": "&&~~_0.label"
    },
    "description": {
      "default": "Used between two integers. The result is the bitwise 'and' of INT1 and the bitwise complement of INT2.",
      "resource_key": "&&~~_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": "<<_2",
    "name": "<<",
    "label": {
      "default": "INT1 << N",
      "resource_key": "<<_2.label"
    },
    "description": {
      "default": "Used between two integers. Produces the bit pattern of INT shifted left by N positions.",
      "resource_key": "<<_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": ">>_2",
    "name": ">>",
    "label": {
      "default": "INT1 >> N",
      "resource_key": ">>_2.label"
    },
    "description": {
      "default": "Used between two integers. Produces the bit pattern of INT shifted right by N positions.",
      "resource_key": ">>_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    }
  },
  {
    "id": "&&=_0_0",
    "name": "&&=_0",
    "label": {
      "default": "&&=_0",
      "resource_key": "&&=_0_0.label"
    },
    "description": {
      "default": "Used between two integers. Equivalent to the boolean expression INT1 && INT2 = 0.",
      "resource_key": "&&=_0_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    }
  },
  {
    "id": "&&/=_0_0",
    "name": "&&/=_0",
    "label": {
      "default": "&&/=_0",
      "resource_key": "&&/=_0_0.label"
    },
    "description": {
      "default": "Used between two integers. Equivalent to the boolean expression INT1 && INT2 /= 0.",
      "resource_key": "&&/=_0_0.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    }
  },
  {
    "id": "integer_bitcount_1",
    "name": "integer_bitcount",
    "label": {
      "default": "integer_bitcount(INT)",
      "resource_key": "integer_bitcount_1.label"
    },
    "description": {
      "default": "Counts the number of 1 or 0 bits in the two's-complement representation of INT.",
      "resource_key": "integer_bitcount_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "integer_leastbit_1",
    "name": "integer_leastbit",
    "label": {
      "default": "integer_leastbit(INT)",
      "resource_key": "integer_leastbit_1.label"
    },
    "description": {
      "default": "Returns the bit position N of the least-significant bit set in the integer INT.",
      "resource_key": "integer_leastbit_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "integer_length_1",
    "name": "integer_length",
    "label": {
      "default": "integer_length(INT)",
      "resource_key": "integer_length_1.label"
    },
    "description": {
      "default": "Returns the length in bits of INT as a two's-complement integer.",
      "resource_key": "integer_length_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "testbit_2",
    "name": "testbit",
    "label": {
      "default": "testbit(INT,N)",
      "resource_key": "testbit_2.label"
    },
    "description": {
      "default": "Tests the bit at position N in the integer INT and returns the state of bit N as a boolean value.",
      "resource_key": "testbit_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "oneof_1",
    "name": "oneof",
    "label": {
      "default": "oneof(LIST)",
      "resource_key": "oneof_1.label"
    },
    "description": {
      "default": "Returns a randomly chosen element of LIST. List items should be entered as follows: [ITEM1,ITEM2,...ITEMn.",
      "resource_key": "oneof_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "LIST"
        },
        "type": "List"
      }
    ]
  },
  {
    "id": "random_1",
    "name": "random",
    "label": {
      "default": "random(NUM)",
      "resource_key": "random_1.label"
    },
    "description": {
      "default": "Generates a uniformly distributed random number of the same type as NUM in the range 0 < ... <= NUM.",
      "resource_key": "random_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "random0_1",
    "name": "random0",
    "label": {
      "default": "random0(NUM)",
      "resource_key": "random0_1.label"
    },
    "description": {
      "default": "Generates a uniformly distributed random number of the same type as NUM in the range 0 <= ... < NUM.",
      "resource_key": "random0_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "norm_random_0",
    "name": "norm_random",
    "label": {
      "default": "norm_random",
      "resource_key": "norm_random_0.label"
    },
    "description": {
      "default": "Generates a normally distributed random number with a mean of 0.0 and standard deviation of 1.0.",
      "resource_key": "norm_random_0.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
    ]
  },
  {
    "id": "norm_random_1",
    "name": "norm_random",
    "label": {
      "default": "norm_random(NUM)",
      "resource_key": "norm_random_1.label"
    },
    "description": {
      "default": "Generates a normally distributed random number with a mean of NUM and standard deviation of 1.0.",
      "resource_key": "norm_random_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "norm_random_2",
    "name": "norm_random",
    "label": {
      "default": "norm_random(NUM1,NUM2)",
      "resource_key": "norm_random_2.label"
    },
    "description": {
      "default": "Generates a normally distributed random number with a mean of NUM1 and standard deviation of NUM2.",
      "resource_key": "norm_random_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM1"
        },
        "type": "NUM1"
      },
      {
        "label": {
          "default": "NUM2"
        },
        "type": "NUM2"
      }
    ]
  },
  {
    "id": "><_0",
    "name": "><",
    "label": {
      "default": "><",
      "resource_key": "><_0.label"
    },
    "description": {
      "default": "Used between two strings. Concatenates all of the characters of STRING1with all of the characters of STRING2.",
      "resource_key": "><_0.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "operator_button": true
  },
  {
    "id": "allbutfirst_2",
    "name": "allbutfirst",
    "label": {
      "default": "allbutfirst(N,STRING)",
      "resource_key": "allbutfirst_2.label"
    },
    "description": {
      "default": "Return a string, which is STRING with the first N characters removed.",
      "resource_key": "allbutfirst_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "allbutlast_2",
    "name": "allbutlast",
    "label": {
      "default": "allbutlast(N,STRING)",
      "resource_key": "allbutlast_2.label"
    },
    "description": {
      "default": "Return a string, which is STRING with the last N characters removed.",
      "resource_key": "allbutlast_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "alphabefore_2",
    "name": "alphabefore",
    "label": {
      "default": "alphabefore(STRING1,STRING2)",
      "resource_key": "alphabefore_2.label"
    },
    "description": {
      "default": "Returns 1 if  STRING1 is alphabetically before STRING2 or 0 if STRING1 is after STRING2; returns 1 if equal.",
      "resource_key": "alphabefore_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING1"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "STRING2"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "count_substring_2",
    "name": "count_substring",
    "label": {
      "default": "count_substring(STRING,SUBSTRING)",
      "resource_key": "count_substring_2.label"
    },
    "description": {
      "default": "Returns the number of instances of SUBSTRING that can be found in STRING",
      "resource_key": "count_substring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "endstring_2",
    "name": "endstring",
    "label": {
      "default": "endstring(N,STRING)",
      "resource_key": "endstring_2.label"
    },
    "description": {
      "default": "Returns a string consisting of the last N characters of STRING.",
      "resource_key": "endstring_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "hasendstring_2",
    "name": "hasendstring",
    "label": {
      "default": "hasendstring(STRING,SUBSTRING)",
      "resource_key": "hasendstring_2.label"
    },
    "description": {
      "default": "Same as isendstring(SUBSTRING,STRING).",
      "resource_key": "hasendstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "hasmidstring_2",
    "name": "hasmidstring",
    "label": {
      "default": "hasmidstring(STRING,SUBSTRING)",
      "resource_key": "hasmidstring_2.label"
    },
    "description": {
      "default": "Same as ismidstring(SUBSTRING,STRING).",
      "resource_key": "hasmidstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "hasstartstring_2",
    "name": "hasstartstring",
    "label": {
      "default": "hasstartstring(STRING,SUBSTRING)",
      "resource_key": "hasstartstring_2.label"
    },
    "description": {
      "default": "Same as isstartstring(SUBSTRING,STRING).",
      "resource_key": "hasstartstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "hassubstring_2",
    "name": "hassubstring",
    "label": {
      "default": "hassubstring(STRING,SUBSTRING)",
      "resource_key": "hassubstring_2.label"
    },
    "description": {
      "default": "Same as issubstring(SUBSTRING,1,STRING).",
      "resource_key": "hassubstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "hassubstring_3",
    "name": "hassubstring",
    "label": {
      "default": "hassubstring(STRING,N,SUBSTRING)",
      "resource_key": "hassubstring_3.label"
    },
    "description": {
      "default": "Same as issubstring(SUBSTRING,N,STRING).",
      "resource_key": "hassubstring_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "isalphacode_1",
    "name": "isalphacode",
    "label": {
      "default": "isalphacode(CHAR)",
      "resource_key": "isalphacode_1.label"
    },
    "description": {
      "default": "Returns a value of true if CHAR is a character whose character code is a letter. Otherwise, returns 0.",
      "resource_key": "isalphacode_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "isendstring_2",
    "name": "isendstring",
    "label": {
      "default": "isendstring(SUBSTRING,STRING)",
      "resource_key": "isendstring_2.label"
    },
    "description": {
      "default": "If STRING ends with SUBSTRING, then returns the subscript of SUBSTRING in STRING. Otherwise, returns 0.",
      "resource_key": "isendstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "islowercode_1",
    "name": "islowercode",
    "label": {
      "default": "islowercode(CHAR)",
      "resource_key": "islowercode_1.label"
    },
    "description": {
      "default": "Returns a value of true if CHAR is a lowercase letter character. Otherwise, returns 0.",
      "resource_key": "islowercode_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "ismidstring_2",
    "name": "ismidstring",
    "label": {
      "default": "ismidstring(SUBSTRING,STRING)",
      "resource_key": "ismidstring_2.label"
    },
    "description": {
      "default": "Returns SUBSTRING start position in STRING if SUBSTRING is a substring of STRING but does not start on the first character of STRING or end on the last. Otherwise, returns 0.",
      "resource_key": "ismidstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "isnumbercode_1",
    "name": "isnumbercode",
    "label": {
      "default": "isnumbercode(CHAR)",
      "resource_key": "isnumbercode_1.label"
    },
    "description": {
      "default": "Returns a value of true if CHAR is a character whose character code is a digit. Otherwise, returns 0.",
      "resource_key": "isnumbercode_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "isstartstring_2",
    "name": "isstartstring",
    "label": {
      "default": "isstartstring(SUBSTRING,STRING)",
      "resource_key": "isstartstring_2.label"
    },
    "description": {
      "default": "If STRING starts with SUBSTRING, returns 1. Otherwise, returns 0.",
      "resource_key": "isstartstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "issubstring_2",
    "name": "issubstring",
    "label": {
      "default": "issubstring(SUBSTRING,STRING)",
      "resource_key": "issubstring_2.label"
    },
    "description": {
      "default": "Searches STRING for SUBSTRING. If found, returns the starting subscript. Otherwise, returns 0.",
      "resource_key": "issubstring_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "issubstring_3",
    "name": "issubstring",
    "label": {
      "default": "issubstring(SUBSTRING,N,STRING)",
      "resource_key": "issubstring_3.label"
    },
    "description": {
      "default": "Searches STRING, starting from its Nth character, for SUBSTRING. If found, returns the starting subscript.",
      "resource_key": "issubstring_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "issubstring_count_3",
    "name": "issubstring_count",
    "label": {
      "default": "issubstring_count(SUBSTRING,N,STRING)",
      "resource_key": "issubstring_count_3.label"
    },
    "description": {
      "default": "Searches STRING for the Nth occurrence of SUBSTRING. If found, returns the starting subscript. Otherwise, returns 0.",
      "resource_key": "issubstring_count_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "issubstring_lim_5",
    "name": "issubstring_lim",
    "label": {
      "default": "issubstring_lim(SUBSTRING,N,STARTLIM,ENDLIM,STRING)",
      "resource_key": "issubstring_lim_5.label"
    },
    "description": {
      "default": "Same as issubstring(), but the match is constrained to start on or before STARTLIM and to end on or before ENDLIM.",
      "resource_key": "issubstring_lim_5.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STARTLIM"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "ENDLIM"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "isuppercode_1",
    "name": "isuppercode",
    "label": {
      "default": "isuppercode(CHAR)",
      "resource_key": "isuppercode_1.label"
    },
    "description": {
      "default": "Returns a value of true if ITEM is an uppercase letter character. Otherwise, returns 0.",
      "resource_key": "isuppercode_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "last_1",
    "name": "last",
    "label": {
      "default": "last(STRING)",
      "resource_key": "last_1.label"
    },
    "description": {
      "default": "Returns the last character of STRING (which must be at least one character long).",
      "resource_key": "last_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "length_1",
    "name": "length",
    "label": {
      "default": "length(STRING)",
      "resource_key": "length_1.label"
    },
    "description": {
      "default": "Returns the length of STRING or the number of characters in it.",
      "resource_key": "length_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "locchar_3",
    "name": "locchar",
    "label": {
      "default": "locchar(CHAR,N,STRING)",
      "resource_key": "locchar_3.label"
    },
    "description": {
      "default": "Returns the subscript at which CHAR is found in STRING. Searches from Nth character of STRING forward.",
      "resource_key": "locchar_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "locchar_back_3",
    "name": "locchar_back",
    "label": {
      "default": "locchar_back(CHAR,N,STRING)",
      "resource_key": "locchar_back_3.label"
    },
    "description": {
      "default": "Returns the subscript at which CHAR is found in STRING. Searches from Nth character of STRING backwards.",
      "resource_key": "locchar_back_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "lowertoupper_1",
    "name": "lowertoupper",
    "label": {
      "default": "lowertoupper(CHAR)",
      "resource_key": "lowertoupper_1.label"
    },
    "description": {
      "default": "Converts any lowercase characters in ITEM to uppercase.  If ITEM is not a string or character, returns ITEM.",
      "resource_key": "lowertoupper_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "matches_2",
    "name": "matches",
    "label": {
      "default": "STRING1 matches STRING2",
      "resource_key": "matches_2.label"
    },
    "description": {
      "default": "Returns a value of true if STRING1 matches the pattern defined by STRING2. \"?\" matches 1 character, \"*\" matches 0 or more characters, and \"\\\" escapes these characters.",
      "resource_key": "matches_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    }
  },
  {
    "id": "replace_3",
    "name": "replace",
    "label": {
      "default": "replace(SUBSTRING1,SUBSTRING2,STRING)",
      "resource_key": "replace_3.label"
    },
    "description": {
      "default": "Replaces all occurrences of SUBSTRING1 with SUBSTRING2 in STRING.",
      "resource_key": "replace_3.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SUBSTRING1"
        },
        "type": "SUBSTRING1"
      },
      {
        "label": {
          "default": "SUBSTRING2"
        },
        "type": "SUBSTRING2"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "replicate_2",
    "name": "replicate",
    "label": {
      "default": "replicate(N,STRING)",
      "resource_key": "replicate_2.label"
    },
    "description": {
      "default": "Returns a string consisting of the N copies of STRING.",
      "resource_key": "replicate_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "skipchar_3",
    "name": "skipchar",
    "label": {
      "default": "skipchar(CHAR,N,STRING)",
      "resource_key": "skipchar_3.label"
    },
    "description": {
      "default": "Returns the subscript at which character other than CHAR is found in STRING. Searches from Nth character of STRING forward.",
      "resource_key": "skipchar_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "skipchar_back_3",
    "name": "skipchar_back",
    "label": {
      "default": "skipchar_back(CHAR,N,STRING)",
      "resource_key": "skipchar_back_3.label"
    },
    "description": {
      "default": "Similar to skipchar, except that the search is performed backward, starting from the Nth character.",
      "resource_key": "skipchar_back_3.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "soundex_1",
    "name": "soundex",
    "label": {
      "default": "soundex(STRING)",
      "resource_key": "soundex_1.label"
    },
    "description": {
      "default": "Returns the 4-character SoundEx code for STRING.",
      "resource_key": "soundex_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "soundex_difference_2",
    "name": "soundex_difference",
    "label": {
      "default": "soundex_difference(STRING,STRING)",
      "resource_key": "soundex_difference_2.label"
    },
    "description": {
      "default": "Returns the number of matching characters in the SoundEx code for two strings as an integer between 0 and 4.",
      "resource_key": "soundex_difference_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "startstring_2",
    "name": "startstring",
    "label": {
      "default": "startstring(N,STRING)",
      "resource_key": "startstring_2.label"
    },
    "description": {
      "default": "Returns a string consisting of the first N characters of STRING.",
      "resource_key": "startstring_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "stripchar_2",
    "name": "stripchar",
    "label": {
      "default": "stripchar(CHAR,STRING)",
      "resource_key": "stripchar_2.label"
    },
    "description": {
      "default": "Removes all occurrences of CHAR from STRING.",
      "resource_key": "stripchar_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "stripctrlchars_1",
    "name": "stripctrlchars",
    "label": {
      "default": "stripctrlchars(STRING)",
      "resource_key": "stripctrlchars_1.label"
    },
    "description": {
      "default": "Removes all occurrences of any ascii control characters from STRING.",
      "resource_key": "stripctrlchars_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "strmember_2",
    "name": "strmember",
    "label": {
      "default": "strmember(CHAR,STRING)",
      "resource_key": "strmember_2.label"
    },
    "description": {
      "default": "Equivalent to locchar(CHAR,1,STRING). Returns the subscript at which CHAR first occurs, or 0.",
      "resource_key": "strmember_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "subscrs_2",
    "name": "subscrs",
    "label": {
      "default": "subscrs(N,STRING)",
      "resource_key": "subscrs_2.label"
    },
    "description": {
      "default": "Returns the Nth character of the string STRING. Can also be written in a shorthand form - STRING(N).",
      "resource_key": "subscrs_2.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "substring_3",
    "name": "substring",
    "label": {
      "default": "substring(N,LEN,STRING)",
      "resource_key": "substring_3.label"
    },
    "description": {
      "default": "Returns a string, which consists of LEN characters of STRING, starting from the character at N.",
      "resource_key": "substring_3.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "LEN"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "substring_between_3",
    "name": "substring_between",
    "label": {
      "default": "substring_between(N1,N2,STRING)",
      "resource_key": "substring_between_3.label"
    },
    "description": {
      "default": "Returns the substring of STRING, which begins at subscript N1 and ends at subscript N2",
      "resource_key": "substring_between_3.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N1"
        },
        "type": "N1"
      },
      {
        "label": {
          "default": "N2"
        },
        "type": "N2"
      },
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "trim_1",
    "name": "trim",
    "label": {
      "default": "trim(STRING)",
      "resource_key": "trim_1.label"
    },
    "description": {
      "default": "Removes all space characters from the start and end of STRING.",
      "resource_key": "trim_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "trimend_1",
    "name": "trimend",
    "label": {
      "default": "trimend(STRING)",
      "resource_key": "trimend_1.label"
    },
    "description": {
      "default": "Removes all space characters from the end of STRING.",
      "resource_key": "trimend_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "trimstart_1",
    "name": "trimstart",
    "label": {
      "default": "trimstart(STRING)",
      "resource_key": "trimstart_1.label"
    },
    "description": {
      "default": "Removes all space characters from the start of STRING.",
      "resource_key": "trimstart_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "unicode_char_1",
    "name": "unicode_char",
    "label": {
      "default": "unicode_char(N)",
      "resource_key": "unicode_char_1.label"
    },
    "description": {
      "default": "Returns the character with Unicode value N.",
      "resource_key": "unicode_char_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "unicode_value_1",
    "name": "unicode_value",
    "label": {
      "default": "unicode_value(CHAR)",
      "resource_key": "unicode_value_1.label"
    },
    "description": {
      "default": "Returns the Unicode value of CHAR.",
      "resource_key": "unicode_value_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "uppertolower_1",
    "name": "uppertolower",
    "label": {
      "default": "uppertolower(CHAR)",
      "resource_key": "uppertolower_1.label"
    },
    "description": {
      "default": "Converts any uppercase characters in ITEM to lowercase.  If ITEM is not a string or character, returns ITEM.",
      "resource_key": "uppertolower_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "textsplit_3",
    "name": "textsplit",
    "label": {
      "default": "textsplit(STRING,N,CHAR)",
      "resource_key": "textsplit_3.label"
    },
    "description": {
      "default": "Returns a string consisting of the substring the Nth position according to the delimiter character.",
      "resource_key": "textsplit_3.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      },
      {
        "label": {
          "default": "N"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "CHAR"
        },
        "type": "Character"
      }
    ]
  },
  {
    "id": "@TODAY_0",
    "name": "@TODAY",
    "label": {
      "default": "@TODAY",
      "resource_key": "@TODAY_0.label"
    },
    "description": {
      "default": "Returns the current date, as a string, in the current date format.",
      "resource_key": "@TODAY_0.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
    ]
  },
  {
    "id": "datetime_date_3",
    "name": "datetime_date",
    "label": {
      "default": "datetime_date(YEAR,MONTH,DAY)",
      "resource_key": "datetime_date_3.label"
    },
    "description": {
      "default": "Returns the date value for the given YEAR, MONTH, and DAY. The arguments must be integers.",
      "resource_key": "datetime_date_3.desc"
    },
    "return_type": {
      "default": "Date",
      "resource_key": "date.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "YEAR"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "MONTH"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "DAY"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_date_1",
    "name": "datetime_date",
    "label": {
      "default": "datetime_date(ITEM)",
      "resource_key": "datetime_date_1.label"
    },
    "description": {
      "default": "Returns the date value for a number, string, or timestamp.",
      "resource_key": "datetime_date_1.desc"
    },
    "return_type": {
      "default": "Date",
      "resource_key": "date.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "datetime_time_3",
    "name": "datetime_time",
    "label": {
      "default": "datetime_time(HOUR,MINUTE,SECOND)",
      "resource_key": "datetime_time_3.label"
    },
    "description": {
      "default": "Returns the time value for the specified HOUR, MINUTE, and SECOND. The arguments must be integers.",
      "resource_key": "datetime_time_3.desc"
    },
    "return_type": {
      "default": "Time",
      "resource_key": "time.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "HOUR"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "MINUTE"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "SECOND"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_time_1",
    "name": "datetime_time",
    "label": {
      "default": "datetime_time(ITEM)",
      "resource_key": "datetime_time_1.label"
    },
    "description": {
      "default": "Returns the time value of the given ITEM.",
      "resource_key": "datetime_time_1.desc"
    },
    "return_type": {
      "default": "Time",
      "resource_key": "time.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "datetime_timestamp_6",
    "name": "datetime_timestamp",
    "label": {
      "default": "datetime_timestamp(YEAR,MONTH,DAY,HOUR,MINUTE,SECOND)",
      "resource_key": "datetime_timestamp_6.label"
    },
    "description": {
      "default": "Returns the timestamp value for the given YEAR, MONTH, DAY, HOUR, MINUTE, and SECOND.",
      "resource_key": "datetime_timestamp_6.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "YEAR"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "MONTH"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "DAY"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "HOUR"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "MINUTE"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "SECOND"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_timestamp_2",
    "name": "datetime_timestamp",
    "label": {
      "default": "datetime_timestamp(DATE,TIME)",
      "resource_key": "datetime_timestamp_2.label"
    },
    "description": {
      "default": "Returns the timestamp value for the given DATE and TIME.",
      "resource_key": "datetime_timestamp_2.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      },
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "datetime_timestamp_1",
    "name": "datetime_timestamp",
    "label": {
      "default": "datetime_timestamp(NUM)",
      "resource_key": "datetime_timestamp_1.label"
    },
    "description": {
      "default": "Returns the timestamp value of the given NUMBER of seconds.",
      "resource_key": "datetime_timestamp_1.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "datetime_year_1",
    "name": "datetime_year",
    "label": {
      "default": "datetime_year(DATE)",
      "resource_key": "datetime_year_1.label"
    },
    "description": {
      "default": "Returns the year from a DATE or timestamp. The result is an integer such as 2001.",
      "resource_key": "datetime_year_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "datetime_month_1",
    "name": "datetime_month",
    "label": {
      "default": "datetime_month(DATE)",
      "resource_key": "datetime_month_1.label"
    },
    "description": {
      "default": "Returns the month from a DATE or timestamp. The result is an integer in the range 1 to 12.",
      "resource_key": "datetime_month_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "datetime_day_1",
    "name": "datetime_day",
    "label": {
      "default": "datetime_day(DATE)",
      "resource_key": "datetime_day_1.label"
    },
    "description": {
      "default": "Returns the day of the month from a DATE or timestamp. The result is an integer in the range 1 to 31.",
      "resource_key": "datetime_day_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "datetime_weekday_1",
    "name": "datetime_weekday",
    "label": {
      "default": "datetime_weekday(DATE)",
      "resource_key": "datetime_weekday_1.label"
    },
    "description": {
      "default": "Returns the day of the week from a DATE or timestamp. The result is an integer in the range 1 (Sunday) to 7.",
      "resource_key": "datetime_weekday_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "datetime_hour_1",
    "name": "datetime_hour",
    "label": {
      "default": "datetime_hour(TIME)",
      "resource_key": "datetime_hour_1.label"
    },
    "description": {
      "default": "Returns the hour from a TIME or timestamp. The result is an integer in the range 0 to 23.",
      "resource_key": "datetime_hour_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "datetime_minute_1",
    "name": "datetime_minute",
    "label": {
      "default": "datetime_minute(TIME)",
      "resource_key": "datetime_minute_1.label"
    },
    "description": {
      "default": "Returns the minute from a TIME or timestamp. The result is an integer in the range 0 to 59.",
      "resource_key": "datetime_minute_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "datetime_second_1",
    "name": "datetime_second",
    "label": {
      "default": "datetime_second(TIME)",
      "resource_key": "datetime_second_1.label"
    },
    "description": {
      "default": "Returns the second from a TIME or timestamp. The result is an integer in the range 0 to 59.",
      "resource_key": "datetime_second_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "datetime_month_name_1",
    "name": "datetime_month_name",
    "label": {
      "default": "datetime_month_name(MONTH)",
      "resource_key": "datetime_month_name_1.label"
    },
    "description": {
      "default": "Returns the full name of the given MONTH. The argument must be an integer in the range 1 to 12.",
      "resource_key": "datetime_month_name_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "MONTH"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_month_short_name_1",
    "name": "datetime_month_short_name",
    "label": {
      "default": "datetime_month_short_name(MONTH)",
      "resource_key": "datetime_month_short_name_1.label"
    },
    "description": {
      "default": "Returns the abbreviated name of the given MONTH. The argument must be an integer in the range 1 to 12.",
      "resource_key": "datetime_month_short_name_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "MONTH"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_day_name_1",
    "name": "datetime_day_name",
    "label": {
      "default": "datetime_day_name(DAY)",
      "resource_key": "datetime_day_name_1.label"
    },
    "description": {
      "default": "Returns the full name of the given DAY. The argument must be an integer in the range 1 (Sunday) to 7.",
      "resource_key": "datetime_day_name_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DAY"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_day_short_name_1",
    "name": "datetime_day_short_name",
    "label": {
      "default": "datetime_day_short_name(DAY)",
      "resource_key": "datetime_day_short_name_1.label"
    },
    "description": {
      "default": "Returns the abbreviated name of the given DAY. The argument must be an integer in the range 1 (Sunday) to 7.",
      "resource_key": "datetime_day_short_name_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DAY"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "datetime_now_0",
    "name": "datetime_now",
    "label": {
      "default": "datetime_now",
      "resource_key": "datetime_now_0.label"
    },
    "description": {
      "default": "Returns the current time as a timestamp.",
      "resource_key": "datetime_now_0.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
    ]
  },
  {
    "id": "datetime_in_seconds_1",
    "name": "datetime_in_seconds",
    "label": {
      "default": "datetime_in_seconds(DATETIME)",
      "resource_key": "datetime_in_seconds_1.label"
    },
    "description": {
      "default": "Returns the number of seconds in a DATETIME or timestamp.",
      "resource_key": "datetime_in_seconds_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATETIME"
        },
        "type": "Datetime"
      }
    ]
  },
  {
    "id": "date_in_days_1",
    "name": "date_in_days",
    "label": {
      "default": "date_in_days(DATE)",
      "resource_key": "date_in_days_1.label"
    },
    "description": {
      "default": "Returns the time in days from the baseline date to the given DATE or timestamp, as an integer.",
      "resource_key": "date_in_days_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_in_weeks_1",
    "name": "date_in_weeks",
    "label": {
      "default": "date_in_weeks(DATE)",
      "resource_key": "date_in_weeks_1.label"
    },
    "description": {
      "default": "Returns the time in weeks from the baseline date to the given DATE or timestamp, as a real number.",
      "resource_key": "date_in_weeks_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_in_months_1",
    "name": "date_in_months",
    "label": {
      "default": "date_in_months(DATE)",
      "resource_key": "date_in_months_1.label"
    },
    "description": {
      "default": "Returns the time in months from the baseline date to the given DATE or timestamp, as a real number.",
      "resource_key": "date_in_months_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_in_years_1",
    "name": "date_in_years",
    "label": {
      "default": "date_in_years(DATE)",
      "resource_key": "date_in_years_1.label"
    },
    "description": {
      "default": "Returns the time in years from the baseline date to the given DATE or timestamp, as a real number.",
      "resource_key": "date_in_years_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_days_difference_2",
    "name": "date_days_difference",
    "label": {
      "default": "date_days_difference(ITEM1,ITEM2)",
      "resource_key": "date_days_difference_2.label"
    },
    "description": {
      "default": "Returns the time in days from the DATE or timestamp ITEM1 to the DATE or timestamp ITEM2, as an integer.",
      "resource_key": "date_days_difference_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "date_weeks_difference_2",
    "name": "date_weeks_difference",
    "label": {
      "default": "date_weeks_difference(ITEM1,ITEM2)",
      "resource_key": "date_weeks_difference_2.label"
    },
    "description": {
      "default": "Returns the time in weeks from the DATE or timestamp ITEM1 to the DATE or timestamp ITEM2, as a real number.",
      "resource_key": "date_weeks_difference_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "date_months_difference_2",
    "name": "date_months_difference",
    "label": {
      "default": "date_months_difference(ITEM1,ITEM2)",
      "resource_key": "date_months_difference_2.label"
    },
    "description": {
      "default": "Returns the time in months from the DATE or timestamp ITEM1 to the DATE or timestamp ITEM2, as a real number.",
      "resource_key": "date_months_difference_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "date_years_difference_2",
    "name": "date_years_difference",
    "label": {
      "default": "date_years_difference(ITEM1,ITEM2)",
      "resource_key": "date_years_difference_2.label"
    },
    "description": {
      "default": "Returns the time in years from the DATE or timestamp ITEM1 to the DATE or timestamp ITEM2, as a real number.",
      "resource_key": "date_years_difference_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "date_iso_day_1",
    "name": "date_iso_day",
    "label": {
      "default": "date_iso_day(DATE)",
      "resource_key": "date_iso_day_1.label"
    },
    "description": {
      "default": "Returns the day in the week from the DATE using the ISO 8601 standard.",
      "resource_key": "date_iso_day_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_iso_week_1",
    "name": "date_iso_week",
    "label": {
      "default": "date_iso_week(DATE)",
      "resource_key": "date_iso_week_1.label"
    },
    "description": {
      "default": "Returns the week in the year from the DATE using the ISO 8601 standard.",
      "resource_key": "date_iso_week_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_iso_year_1",
    "name": "date_iso_year",
    "label": {
      "default": "date_iso_year(DATE)",
      "resource_key": "date_iso_year_1.label"
    },
    "description": {
      "default": "Returns the year from the DATE using the ISO 8601 standard.",
      "resource_key": "date_iso_year_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "date_from_ywd_3",
    "name": "date_from_ywd",
    "label": {
      "default": "date_from_ywd(YEAR,WEEK,DAY)",
      "resource_key": "date_from_ywd_3.label"
    },
    "description": {
      "default": "Converts the year, week in year and day in week to a date using the ISO 8601 standard.",
      "resource_key": "date_from_ywd_3.desc"
    },
    "return_type": {
      "default": "Date",
      "resource_key": "date.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "YEAR"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "WEEK"
        },
        "type": "Integer"
      },
      {
        "label": {
          "default": "DAY"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "time_in_hours_1",
    "name": "time_in_hours",
    "label": {
      "default": "time_in_hours(TIME)",
      "resource_key": "time_in_hours_1.label"
    },
    "description": {
      "default": "Returns the time in hours from midnight to the given TIME or timestamp, as a real number.",
      "resource_key": "time_in_hours_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "time_in_mins_1",
    "name": "time_in_mins",
    "label": {
      "default": "time_in_mins(TIME)",
      "resource_key": "time_in_mins_1.label"
    },
    "description": {
      "default": "Returns the time in minutes from midnight to the given TIME or timestamp, as a real number. ",
      "resource_key": "time_in_mins_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "time_in_secs_1",
    "name": "time_in_secs",
    "label": {
      "default": "time_in_secs(TIME)",
      "resource_key": "time_in_secs_1.label"
    },
    "description": {
      "default": "Returns the time in seconds from midnight to the given TIME or timestamp, as an integer.",
      "resource_key": "time_in_secs_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "time_hours_difference_2",
    "name": "time_hours_difference",
    "label": {
      "default": "time_hours_difference(ITEM1,ITEM2)",
      "resource_key": "time_hours_difference_2.label"
    },
    "description": {
      "default": "Returns the time difference in hours between the TIME or timestamp ITEM1 and ITEM2, as a real number.",
      "resource_key": "time_hours_difference_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "time_mins_difference_2",
    "name": "time_mins_difference",
    "label": {
      "default": "time_mins_difference(ITEM1,ITEM2)",
      "resource_key": "time_mins_difference_2.label"
    },
    "description": {
      "default": "Returns the time difference in minutes between the TIME or timestamp ITEM1 and ITEM2, as a real number.",
      "resource_key": "time_mins_difference_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "time_secs_difference_2",
    "name": "time_secs_difference",
    "label": {
      "default": "time_secs_difference(ITEM1,ITEM2)",
      "resource_key": "time_secs_difference_2.label"
    },
    "description": {
      "default": "Returns the time difference in seconds between the TIME or timestamp ITEM1 and ITEM2, as an integer.",
      "resource_key": "time_secs_difference_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM1"
        },
        "type": "Any"
      },
      {
        "label": {
          "default": "ITEM2"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "@DIFF1_1",
    "name": "@DIFF1",
    "label": {
      "default": "@DIFF1(FIELD)",
      "resource_key": "@DIFF1_1.label"
    },
    "description": {
      "default": "Returns the difference between the current value and the previous value of the FIELD.",
      "resource_key": "@DIFF1_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@DIFF1_2",
    "name": "@DIFF1",
    "label": {
      "default": "@DIFF1(FIELD1,FIELD2)",
      "resource_key": "@DIFF1_2.label"
    },
    "description": {
      "default": "Returns the first differential of FIELD1 or the first differential of FIELD1 with respect to FIELD2.",
      "resource_key": "@DIFF1_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD1"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "FIELD2"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@DIFF2_1",
    "name": "@DIFF2",
    "label": {
      "default": "@DIFF2(FIELD)",
      "resource_key": "@DIFF2_1.label"
    },
    "description": {
      "default": "Returns the difference between the first differential for the current record and that of the previous record.",
      "resource_key": "@DIFF2_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@DIFF2_2",
    "name": "@DIFF2",
    "label": {
      "default": "@DIFF2(FIELD1,FIELD2)",
      "resource_key": "@DIFF2_2.label"
    },
    "description": {
      "default": "Returns the second differential of FIELD1 or the second differential of FIELD1 with respect to FIELD2.",
      "resource_key": "@DIFF2_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD1"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "FIELD2"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@INDEX_0",
    "name": "@INDEX",
    "label": {
      "default": "@INDEX",
      "resource_key": "@INDEX_0.label"
    },
    "description": {
      "default": "Returns the index of the current record. Indices are allocated to records as they arrive at the current node.",
      "resource_key": "@INDEX_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
    ]
  },
  {
    "id": "@LAST_NON_BLANK_1",
    "name": "@LAST_NON_BLANK",
    "label": {
      "default": "@LAST_NON_BLANK(FIELD)",
      "resource_key": "@LAST_NON_BLANK_1.label"
    },
    "description": {
      "default": "Returns the last value for FIELD that was not blank, according to any blank definition for FIELD.",
      "resource_key": "@LAST_NON_BLANK_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@MAX_1",
    "name": "@MAX",
    "label": {
      "default": "@MAX(FIELD)",
      "resource_key": "@MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum value for FIELD over records received so far, including the current record.",
      "resource_key": "@MAX_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@MAX_2",
    "name": "@MAX",
    "label": {
      "default": "@MAX(FIELD,EXPR)",
      "resource_key": "@MAX_2.label"
    },
    "description": {
      "default": "Returns the maximum value for FIELD over the last EXPR records received so far.",
      "resource_key": "@MAX_2.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@MAX_3",
    "name": "@MAX",
    "label": {
      "default": "@MAX(FIELD,EXPR,INT)",
      "resource_key": "@MAX_3.label"
    },
    "description": {
      "default": "Returns the maximum value for FIELD over the last EXPR records looking back maximum INT values.",
      "resource_key": "@MAX_3.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@MEAN_1",
    "name": "@MEAN",
    "label": {
      "default": "@MEAN(FIELD)",
      "resource_key": "@MEAN_1.label"
    },
    "description": {
      "default": "Returns the mean average of values for FIELD over the records received by the current node.",
      "resource_key": "@MEAN_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@MEAN_2",
    "name": "@MEAN",
    "label": {
      "default": "@MEAN(FIELD,EXPR)",
      "resource_key": "@MEAN_2.label"
    },
    "description": {
      "default": "Returns the mean average of values for FIELD over the last EXPR records received by the current node",
      "resource_key": "@MEAN_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@MEAN_3",
    "name": "@MEAN",
    "label": {
      "default": "@MEAN(FIELD,EXPR,INT)",
      "resource_key": "@MEAN_3.label"
    },
    "description": {
      "default": "Returns the mean average of values for FIELD over the last EXPR records, looking back maximum INT values.",
      "resource_key": "@MEAN_3.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@MIN_1",
    "name": "@MIN",
    "label": {
      "default": "@MIN(FIELD)",
      "resource_key": "@MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum value for FIELD over records received so far, including the current record.",
      "resource_key": "@MIN_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@MIN_2",
    "name": "@MIN",
    "label": {
      "default": "@MIN(FIELD,EXPR)",
      "resource_key": "@MIN_2.label"
    },
    "description": {
      "default": "Returns the minimum value for FIELD over the last EXPR records received so far",
      "resource_key": "@MIN_2.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@MIN_3",
    "name": "@MIN",
    "label": {
      "default": "@MIN(FIELD,EXPR,INT)",
      "resource_key": "@MIN_3.label"
    },
    "description": {
      "default": "Returns the minimum value for FIELD over the last EXPR records looking back maximum INT values.",
      "resource_key": "@MIN_3.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@OFFSET_2",
    "name": "@OFFSET",
    "label": {
      "default": "@OFFSET(FIELD,EXPR)",
      "resource_key": "@OFFSET_2.label"
    },
    "description": {
      "default": "Returns the value of FIELD in the record offset from the current record by the value of EXPR.",
      "resource_key": "@OFFSET_2.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@OFFSET_3",
    "name": "@OFFSET",
    "label": {
      "default": "@OFFSET(FIELD,EXPR,INT)",
      "resource_key": "@OFFSET_3.label"
    },
    "description": {
      "default": "Returns the value of FIELD offset from the current record by the value of EXPR looking back max INT values.",
      "resource_key": "@OFFSET_3.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@SDEV_1",
    "name": "@SDEV",
    "label": {
      "default": "@SDEV(FIELD)",
      "resource_key": "@SDEV_1.label"
    },
    "description": {
      "default": "Returns the standard deviation of values for FIELD over records received by the current node.",
      "resource_key": "@SDEV_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@SDEV_2",
    "name": "@SDEV",
    "label": {
      "default": "@SDEV(FIELD,EXPR)",
      "resource_key": "@SDEV_2.label"
    },
    "description": {
      "default": "Returns the standard deviation of values for FIELD over the last EXPR records.",
      "resource_key": "@SDEV_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@SDEV_3",
    "name": "@SDEV",
    "label": {
      "default": "@SDEV(FIELD,EXPR,INT)",
      "resource_key": "@SDEV_3.label"
    },
    "description": {
      "default": "Returns the standard deviation of values for FIELD over the last EXPR records looking back max INT values.",
      "resource_key": "@SDEV_3.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@SINCE_1",
    "name": "@SINCE",
    "label": {
      "default": "@SINCE(EXPR)",
      "resource_key": "@SINCE_1.label"
    },
    "description": {
      "default": "Returns the number of records that have passed since EXPR was true, or @INDEX+1 if it has never been true. Does not consider current record.",
      "resource_key": "@SINCE_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@SINCE_2",
    "name": "@SINCE",
    "label": {
      "default": "@SINCE(EXPR,INT)",
      "resource_key": "@SINCE_2.label"
    },
    "description": {
      "default": "Returns the number of records that have passed since EXPR was true looking back max INT values, or @INDEX+1 if it has never been true.",
      "resource_key": "@SINCE_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@SINCE0_1",
    "name": "@SINCE0",
    "label": {
      "default": "@SINCE0(EXPR)",
      "resource_key": "@SINCE0_1.label"
    },
    "description": {
      "default": "Returns the number of records that have passed since EXPR was true, or @INDEX+1 if it has never been true. Considers current record.",
      "resource_key": "@SINCE0_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@SINCE0_2",
    "name": "@SINCE0",
    "label": {
      "default": "@SINCE0(EXPR,INT)",
      "resource_key": "@SINCE0_2.label"
    },
    "description": {
      "default": "Returns the number of records that have passed since EXPR was true looking back max INT values, or @INDEX+1 if it has never been true.",
      "resource_key": "@SINCE0_2.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@SUM_1",
    "name": "@SUM",
    "label": {
      "default": "@SUM(FIELD)",
      "resource_key": "@SUM_1.label"
    },
    "description": {
      "default": "Returns the sum of values for FIELD over records, including the current record.",
      "resource_key": "@SUM_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@SUM_2",
    "name": "@SUM",
    "label": {
      "default": "@SUM(FIELD,EXPR)",
      "resource_key": "@SUM_2.label"
    },
    "description": {
      "default": "Returns the sum of values for FIELD over the last EXPR records, including the current record.",
      "resource_key": "@SUM_2.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      }
    ]
  },
  {
    "id": "@SUM_3",
    "name": "@SUM",
    "label": {
      "default": "@SUM(FIELD,EXPR,INT)",
      "resource_key": "@SUM_3.label"
    },
    "description": {
      "default": "Returns the sum of values for FIELD over the last EXPR records, including the current record, looking back max INT values.",
      "resource_key": "@SUM_3.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "EXPR"
        },
        "type": "Expression"
      },
      {
        "label": {
          "default": "INT"
        },
        "type": "Integer"
      }
    ]
  },
  {
    "id": "@THIS_1",
    "name": "@THIS",
    "label": {
      "default": "@THIS(FIELD)",
      "resource_key": "@THIS_1.label"
    },
    "description": {
      "default": "Returns the value of the field named FIELD in the current record. This is relevant only in @SINCE expressions.",
      "resource_key": "@THIS_1.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@GLOBAL_MAX_1",
    "name": "@GLOBAL_MAX",
    "label": {
      "default": "@GLOBAL_MAX(FIELD)",
      "resource_key": "@GLOBAL_MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum value for FIELD over the whole data set, as previously generated by a Set Globals node.",
      "resource_key": "@GLOBAL_MAX_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@GLOBAL_MEAN_1",
    "name": "@GLOBAL_MEAN",
    "label": {
      "default": "@GLOBAL_MEAN(FIELD)",
      "resource_key": "@GLOBAL_MEAN_1.label"
    },
    "description": {
      "default": "Returns the mean average of values for FIELD over the whole data set, as previously generated by a Set Globals node.",
      "resource_key": "@GLOBAL_MEAN_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@GLOBAL_MIN_1",
    "name": "@GLOBAL_MIN",
    "label": {
      "default": "@GLOBAL_MIN(FIELD)",
      "resource_key": "@GLOBAL_MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum value for FIELD over the whole data set, as previously generated by a Set Globals node.",
      "resource_key": "@GLOBAL_MIN_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@GLOBAL_SDEV_1",
    "name": "@GLOBAL_SDEV",
    "label": {
      "default": "@GLOBAL_SDEV(FIELD)",
      "resource_key": "@GLOBAL_SDEV_1.label"
    },
    "description": {
      "default": "Returns the standard deviation of values for FIELD over the whole data set, as previously generated by a Set Globals node.",
      "resource_key": "@GLOBAL_SDEV_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@GLOBAL_SUM_1",
    "name": "@GLOBAL_SUM",
    "label": {
      "default": "@GLOBAL_SUM(FIELD)",
      "resource_key": "@GLOBAL_SUM_1.label"
    },
    "description": {
      "default": "Returns the sum of values for FIELD over the whole data set, as previously generated by a Set Globals node.",
      "resource_key": "@GLOBAL_SUM_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@NULL_1",
    "name": "@NULL",
    "label": {
      "default": "@NULL(ITEM)",
      "resource_key": "@NULL_1.label"
    },
    "description": {
      "default": "None",
      "resource_key": "@NULL_1.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "ITEM"
        },
        "type": "Any"
      }
    ]
  },
  {
    "id": "undef_0",
    "name": "undef",
    "label": {
      "default": "undef",
      "resource_key": "undef_0.label"
    },
    "description": {
      "default": "Used generally in CLEM expressions to enter a NULL value.",
      "resource_key": "undef_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@FIELD_0",
    "name": "@FIELD",
    "label": {
      "default": "@FIELD",
      "resource_key": "@FIELD_0.label"
    },
    "description": {
      "default": "When a CLEM expression is to be applied to multiple fields, @FIELD represents each field in turn.",
      "resource_key": "@FIELD_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@FIELDS_BETWEEN_2",
    "name": "@FIELDS_BETWEEN",
    "label": {
      "default": "@FIELDS_BETWEEN(FIELD1,FIELD2)",
      "resource_key": "@FIELDS_BETWEEN_2.label"
    },
    "description": {
      "default": "@FIELDS_BETWEEN represents a list containing FIELD1, FIELD2 and all fields between them.",
      "resource_key": "@FIELDS_BETWEEN_2.desc"
    },
    "return_type": {
      "default": "List",
      "resource_key": "list.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD1"
        },
        "type": "Field"
      },
      {
        "label": {
          "default": "FIELD2"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "@FIELDS_MATCHING_1",
    "name": "@FIELDS_MATCHING",
    "label": {
      "default": "@FIELDS_MATCHING(STRING)",
      "resource_key": "@FIELDS_MATCHING_1.label"
    },
    "description": {
      "default": "@FIELDS_MATCHING represents a list of fields whose name match the supplied pattern STRING. \"?\" matches 1 character, \"*\" matches 0 or more characters, and \"\\\" escapes these characters.",
      "resource_key": "@FIELDS_MATCHING_1.desc"
    },
    "return_type": {
      "default": "List",
      "resource_key": "list.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "@MULTI_RESPONSE_SET_1",
    "name": "@MULTI_RESPONSE_SET",
    "label": {
      "default": "@MULTI_RESPONSE_SET(STRING)",
      "resource_key": "@MULTI_RESPONSE_SET_1.label"
    },
    "description": {
      "default": "@MULTI_RESPONSE_SET represents the list of fields in the named field group.",
      "resource_key": "@MULTI_RESPONSE_SET_1.desc"
    },
    "return_type": {
      "default": "List",
      "resource_key": "list.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "@TARGET_0",
    "name": "@TARGET",
    "label": {
      "default": "@TARGET",
      "resource_key": "@TARGET_0.label"
    },
    "description": {
      "default": "@TARGET represents the target field or 'correct value' for the target/predicted pair. @TARGET can be used only with an Analysis node.",
      "resource_key": "@TARGET_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@PREDICTED_0",
    "name": "@PREDICTED",
    "label": {
      "default": "@PREDICTED",
      "resource_key": "@PREDICTED_0.label"
    },
    "description": {
      "default": "@PREDICTED represents the predicted value for the target/predicted pair. @PREDICTED can be used only with an Analysis node.",
      "resource_key": "@PREDICTED_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@PARTITION_FIELD_0",
    "name": "@PARTITION_FIELD",
    "label": {
      "default": "@PARTITION_FIELD",
      "resource_key": "@PARTITION_FIELD_0.label"
    },
    "description": {
      "default": "@PARTITION_FIELD represents the current partition field. @PARTITION_FIELD can be used in any CLEM expression with a defined partition field.",
      "resource_key": "@PARTITION_FIELD_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@TRAINING_PARTITION_0",
    "name": "@TRAINING_PARTITION",
    "label": {
      "default": "@TRAINING_PARTITION",
      "resource_key": "@TRAINING_PARTITION_0.label"
    },
    "description": {
      "default": "@TRAINING_PARTITION represents the value of the training partition. @TRAINING_PARTITION can be used in any CLEM expression with a defined partition field.",
      "resource_key": "@TRAINING_PARTITION_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@TESTING_PARTITION_0",
    "name": "@TESTING_PARTITION",
    "label": {
      "default": "@TESTING_PARTITION",
      "resource_key": "@TESTING_PARTITION_0.label"
    },
    "description": {
      "default": "@TESTING_PARTITION represents the value of the testing partition. @TESTING_PARTITION can be used in any CLEM expression with a defined partition field.",
      "resource_key": "@TESTING_PARTITION_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "@VALIDATION_PARTITION_0",
    "name": "@VALIDATION_PARTITION",
    "label": {
      "default": "@VALIDATION_PARTITION",
      "resource_key": "@VALIDATION_PARTITION_0.label"
    },
    "description": {
      "default": "@VALIDATION_PARTITION represents the value of the validation partition. @VALIDATION_PARTITION can be used in any CLEM expression with a defined partition field.",
      "resource_key": "@VALIDATION_PARTITION_0.desc"
    },
    "return_type": {
      "default": "Any",
      "resource_key": "any.return_type"
    }
  },
  {
    "id": "close_to_3",
    "name": "close_to",
    "label": {
      "default": "close_to(SHAPE1,SHAPE2,DISTANCE)",
      "resource_key": "close_to_3.label"
    },
    "description": {
      "default": "Tests whether two shapes are within a certain DISTANCE of each other. If a projected coordinate system is used, DISTANCE is in meters.",
      "resource_key": "close_to_3.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SHAPE1"
        },
        "type": "Shape"
      },
      {
        "label": {
          "default": "SHAPE2"
        },
        "type": "Shape"
      },
      {
        "label": {
          "default": "DISTANCE"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "crosses_2",
    "name": "crosses",
    "label": {
      "default": "crosses(SHAPE1,SHAPE2)",
      "resource_key": "crosses_2.label"
    },
    "description": {
      "default": "Tests whether two shapes cross each other. Suitable for two linestring shapes, or one linestring and one polygon.",
      "resource_key": "crosses_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SHAPE1"
        },
        "type": "Shape"
      },
      {
        "label": {
          "default": "SHAPE2"
        },
        "type": "Shape"
      }
    ]
  },
  {
    "id": "overlap_2",
    "name": "overlap",
    "label": {
      "default": "overlap(POLYGON1,POLYGON2)",
      "resource_key": "overlap_2.label"
    },
    "description": {
      "default": "Tests whether there is an intersection between two polygons and that the intersection is interior to both shapes.",
      "resource_key": "overlap_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "POLYGON1"
        },
        "type": "POLYGON1"
      },
      {
        "label": {
          "default": "POLYGON2"
        },
        "type": "POLYGON2"
      }
    ]
  },
  {
    "id": "within_2",
    "name": "within",
    "label": {
      "default": "within(SHAPE1,POLYGON)",
      "resource_key": "within_2.label"
    },
    "description": {
      "default": "Tests whether the entirety of SHAPE1 is contained within a POLYGON",
      "resource_key": "within_2.desc"
    },
    "return_type": {
      "default": "Boolean",
      "resource_key": "boolean.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SHAPE1"
        },
        "type": "Shape"
      },
      {
        "label": {
          "default": "POLYGON"
        },
        "type": "Polygon"
      }
    ]
  },
  {
    "id": "num_points_2",
    "name": "num_points",
    "label": {
      "default": "num_points(POLYGON,MULTIPOINT)",
      "resource_key": "num_points_2.label"
    },
    "description": {
      "default": "This function returns the number of points from a point field (MULTIPOINT) which are contained within the bounds of a POLYGON",
      "resource_key": "num_points_2.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "POLYGON"
        },
        "type": "Polygon"
      },
      {
        "label": {
          "default": "MULTIPOINT"
        },
        "type": "MULTIPOINT"
      }
    ]
  },
  {
    "id": "area_1",
    "name": "area",
    "label": {
      "default": "area(POLYGON)",
      "resource_key": "area_1.label"
    },
    "description": {
      "default": "Returns the area of the specified POLYGON. If a projected system is used function returns meters squared.",
      "resource_key": "area_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "POLYGON"
        },
        "type": "Polygon"
      }
    ]
  },
  {
    "id": "distance_2",
    "name": "distance",
    "label": {
      "default": "distance(SHAPE1,SHAPE2)",
      "resource_key": "distance_2.label"
    },
    "description": {
      "default": "Returns the distance between SHAPE1 and SHAPE2. If a projected coordinate system is used function returns meters.",
      "resource_key": "distance_2.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "SHAPE1"
        },
        "type": "Shape"
      },
      {
        "label": {
          "default": "SHAPE2"
        },
        "type": "Shape"
      }
    ]
  },
  {
    "id": "SUM_1",
    "name": "SUM",
    "label": {
      "default": "SUM(NUM)",
      "resource_key": "SUM_1.label"
    },
    "description": {
      "default": "Returns the sum of values for each key field combination.",
      "resource_key": "SUM_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "MEAN_1",
    "name": "MEAN",
    "label": {
      "default": "MEAN(NUM)",
      "resource_key": "MEAN_1.label"
    },
    "description": {
      "default": "Returns the mean values for each key field combination.",
      "resource_key": "MEAN_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "MIN_1",
    "name": "MIN",
    "label": {
      "default": "MIN(NUM)",
      "resource_key": "MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum values for each key field combination.",
      "resource_key": "MIN_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "MIN_1",
    "name": "MIN",
    "label": {
      "default": "MIN(DATE)",
      "resource_key": "MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum values for each key field combination.",
      "resource_key": "MIN_1.desc"
    },
    "return_type": {
      "default": "Date",
      "resource_key": "date.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "MIN_1",
    "name": "MIN",
    "label": {
      "default": "MIN(TIME)",
      "resource_key": "MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum values for each key field combination.",
      "resource_key": "MIN_1.desc"
    },
    "return_type": {
      "default": "Time",
      "resource_key": "time.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "MIN_1",
    "name": "MIN",
    "label": {
      "default": "MIN(TIMESTAMP)",
      "resource_key": "MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum values for each key field combination.",
      "resource_key": "MIN_1.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIMESTAMP"
        },
        "type": "Timestamp"
      }
    ]
  },
  {
    "id": "MIN_1",
    "name": "MIN",
    "label": {
      "default": "MIN(STRING)",
      "resource_key": "MIN_1.label"
    },
    "description": {
      "default": "Returns the minimum values for each key field combination.",
      "resource_key": "MIN_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "MAX_1",
    "name": "MAX",
    "label": {
      "default": "MAX(NUM)",
      "resource_key": "MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum values for each key field combination.",
      "resource_key": "MAX_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "MAX_1",
    "name": "MAX",
    "label": {
      "default": "MAX(DATE)",
      "resource_key": "MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum values for each key field combination.",
      "resource_key": "MAX_1.desc"
    },
    "return_type": {
      "default": "Date",
      "resource_key": "date.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "DATE"
        },
        "type": "Date"
      }
    ]
  },
  {
    "id": "MAX_1",
    "name": "MAX",
    "label": {
      "default": "MAX(TIME)",
      "resource_key": "MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum values for each key field combination.",
      "resource_key": "MAX_1.desc"
    },
    "return_type": {
      "default": "Time",
      "resource_key": "time.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIME"
        },
        "type": "Time"
      }
    ]
  },
  {
    "id": "MAX_1",
    "name": "MAX",
    "label": {
      "default": "MAX(TIMESTAMP)",
      "resource_key": "MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum values for each key field combination.",
      "resource_key": "MAX_1.desc"
    },
    "return_type": {
      "default": "Timestamp",
      "resource_key": "timestamp.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "TIMESTAMP"
        },
        "type": "Timestamp"
      }
    ]
  },
  {
    "id": "MAX_1",
    "name": "MAX",
    "label": {
      "default": "MAX(STRING)",
      "resource_key": "MAX_1.label"
    },
    "description": {
      "default": "Returns the maximum values for each key field combination.",
      "resource_key": "MAX_1.desc"
    },
    "return_type": {
      "default": "String",
      "resource_key": "string.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "STRING"
        },
        "type": "String"
      }
    ]
  },
  {
    "id": "SDEV_1",
    "name": "SDEV",
    "label": {
      "default": "SDEV(NUM)",
      "resource_key": "SDEV_1.label"
    },
    "description": {
      "default": "Returns the standard deviation for each key field combination.",
      "resource_key": "SDEV_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "MEDIAN_1",
    "name": "MEDIAN",
    "label": {
      "default": "MEDIAN(NUM)",
      "resource_key": "MEDIAN_1.label"
    },
    "description": {
      "default": "Returns the median values for each key field combination.",
      "resource_key": "MEDIAN_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "COUNT_0",
    "name": "COUNT",
    "label": {
      "default": "COUNT",
      "resource_key": "COUNT_0.label"
    },
    "description": {
      "default": "Returns the count of non-null values for each key field combination.",
      "resource_key": "COUNT_0.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
    ]
  },
  {
    "id": "COUNT_1",
    "name": "COUNT",
    "label": {
      "default": "COUNT(FIELD)",
      "resource_key": "COUNT_1.label"
    },
    "description": {
      "default": "Returns the count of non-null values for each key field combination for a selected field.",
      "resource_key": "COUNT_1.desc"
    },
    "return_type": {
      "default": "Integer",
      "resource_key": "integer.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "FIELD"
        },
        "type": "Field"
      }
    ]
  },
  {
    "id": "VAR_1",
    "name": "VAR",
    "label": {
      "default": "VAR(NUM)",
      "resource_key": "VAR_1.label"
    },
    "description": {
      "default": "Returns the variance values for each key field combination.",
      "resource_key": "VAR_1.desc"
    },
    "return_type": {
      "default": "Real",
      "resource_key": "real.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "FIRST_QUARTILE_1",
    "name": "FIRST_QUARTILE",
    "label": {
      "default": "FIRST_QUARTILE(NUM)",
      "resource_key": "FIRST_QUARTILE_1.label"
    },
    "description": {
      "default": "Returns the 1st quartile (25th percentile) values for each key field combination.",
      "resource_key": "FIRST_QUARTILE_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  },
  {
    "id": "THIRD_QUARTILE_1",
    "name": "THIRD_QUARTILE",
    "label": {
      "default": "THIRD_QUARTILE(NUM)",
      "resource_key": "THIRD_QUARTILE_1.label"
    },
    "description": {
      "default": "Returns the 3rd quartile (75th percentile) values for each key field combination.",
      "resource_key": "THIRD_QUARTILE_1.desc"
    },
    "return_type": {
      "default": "Number",
      "resource_key": "number.return_type"
    },
    "parameters": [
      {
        "label": {
          "default": "NUM"
        },
        "type": "Number"
      }
    ]
  }
]

	},
	"fields": {
		"field_categories":[
			{
				"id": "globals",
				"field_columns": {
					"field_column_info": {
					},
					"value_column_info": {
						"label": {
							"default": "Value"
						}
					}
				}
			},
			{
				"id": "mrs",
				"label": {
					"default": "Multi Response Set"
				},
				"field_columns": {
					"field_column_info": {
						"label": {
							"default": "Group"
						}
					},
					"value_column_info": {
						"label": {
							"default": "Counted Value"
						}
					},
					"additional_column_info": [
						{
						"id": "type",
						"label": {
							"default": "Type"
							}
						}
					]
				}
			},
			{
				"id": "parameters",
				"label": {
					"default": "Parameters"
				},
				"field_columns": {
					"field_column_info": {
						"label": {
							"default": "Parameter"
						}
					},
					"value_column_info": {
						"label": {
							"default": "Current Value"
						}
					}
				}
			}
		],
		"field_table_info": [
			{
				"id": "globals",
				"field_value_groups": [
					{
						"id": "@GLOBAL_MEAN('AGE')",
						"values": [
							{
								"value": 44.315
							}
						]
					},
					{
						"id": "@GLOBAL_SUM('AGE')",
						"values": [
							{
								"value": 8863
							}
						]
					},
					{
						"id": "@GLOBAL_MIN('AGE')",
						"values": [
							{
								"value": 15
							}
						]
					},
					{
						"id": "@GLOBAL_SDEV('AGE')",
						"values": [
							{
								"value": 16.544
							},
							{
								"value": 16.545
							}
						]
					},
					{
						"id": "@GLOBAL_MIN('BP')",
						"values": [
							{
								"value": "HIGH"
							}
						]
					},
					{
						"id": "@GLOBAL_MAX('BP')",
						"values": [
							{
								"value": "NORMAL"
							}
						]
					}
				]
			},
			{
				"id": "mrs",
				"field_value_groups": [
					{
						"id": "numberSet",
						"values": [
							{
								"value": 1
							}
						],
						"additional_column_entries": [
							{
								"id": "type",
								"value": "Multiple dichotomy set 1"
							}
						]
					},
					{
						"id": "stringSet",
						"values": [
							{
								"value": 1
							}
						],
						"additional_column_entries": [
							{
								"id": "type",
								"value": "Multiple dichotomy set 2"
							}
						]
					}
				]
			},
			{
				"id": "parameters",
				"field_value_groups": [
					{
						"id": "$P-parameter0",
						"values": [
							{
								"value": "string param"
							}
						]
					},
					{
						"id": "$P-parameter1",
						"values": [
							{
								"value": 11.1
							}
						]
					}
				]
			}
		]
	},
	"resources": {
		"globals.field_column_info.label": "Field",
		"globals.label": "Globals"
	}
}
