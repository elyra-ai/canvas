{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Elyra Canvas","text":"<p>Elyra Canvas is an open-source library providing React objects to enable applications to quickly create a fully functional flow editor allowing the user to easily create and edit flows of linked nodes.</p> <p> Elyra Canvas in action in the SPSS Modeler UI, the flagship component of IBM Watsonx </p>"},{"location":"#elyra-canvas-features","title":"Elyra Canvas Features","text":"<p>Elyra Canvas:</p> <ul> <li>Provides a comprehensive set of out-of-the-box UI components needed to build an application such as: flow editor, palette, toolbar, context menu, tooltips, command stack, clipboard support, notifications area, side panels and more!</li> <li>Is a UI-centric library and is therefore back-end and run-time agnositc, meaning the flow can display connected nodes representing any kind of operations.</li> <li>Is fast to get running - and easy to customize  - with extensive customization capability.</li> <li>Delivers a JSON powered properties management component to allow easy, no-code handling of mulltiple properties windows - for when you have a multitude of node types each with their own range of properties.</li> <li>Conforms to the IBM Carbon visual design language - and therefore plugs in easily to any application wishing to follow the Carbon standards including dark mode and light mode themes.</li> <li>Delivers built-in accessibility so there\u2019s no need to worry about keyboard navigation, accessible colors, screen reader integration, etc.</li> <li>Is translated into 12 languages.</li> <li>Is the mainstay of several IBM products/applications.</li> <li>Is delivered as a package from the NPM registry</li> </ul>"},{"location":"#whats-in-this-documentation","title":"What\u2019s in this documentation","text":"<p>The \u2018Home\u2019 and \u2018Components\u2019 tabs give a comprehensive overview of Elyra Canvas features so this is useful for any reader assessing the suitability of Elyra Canvas for their application.  Developers can then jump to the remaining tabs startiing with \u2018Initial Setup\u2019 to get common setup such as install done, and then moving on to either the \u2018Common Canvas\u2019 or \u2018Common Properties\u2019 tabs (or both) depending on which component is of interest.</p>"},{"location":"#try-elyra-canvas","title":"Try Elyra Canvas","text":"<ul> <li>The \u201cTiny App\u201d is a demonstration application which is produced with only a few lines of code. You can use it to try these features of Elyra Canvas:<ul> <li>Dragging a node</li> <li>Editing a comment (by double clicking on it)</li> <li>Dragging a node from the palette</li> <li>Clicking a button on the toolbar</li> <li>Zooming in and out using the scroll gesture</li> </ul> </li> </ul>"},{"location":"#elyra-canvas-modules","title":"Elyra Canvas Modules","text":"<p>The elyra-ai/canvas repo contains three main modules:</p> <ul> <li> <p>Common Canvas - This contains canvas functionality which is packaged into the elyra/canvas NPM module and deployed to the NPM registry. It provides a way for an application to display a flow of data operations (shown as a set of nodes connected with links) to the user, and it allows the user to interact with the display to modify the flow.</p> <p>Common Canvas is a React component. It is assisted by a regular JavaScript class called <code>CanvasController</code>, which provides an API and handles the internal data model of the flow. While Common Canvas can display a working flow editor with little initial development work, it is highly customizable. The node shape and appearance, colors, styles, layout, and more can all be customized by the application. Common Canvas handles flows parsed from, and serialized into, a pipeline flow JSON document. Its palette of available nodes is also customized by the application, which can provide a JSON document that describes groups of nodes.</p> </li> <li> <p>Common Properties - This contains properties functionality which is packaged into the elyra/canvas NPM module and deployed to the NPM registry. It provides a way to translate a JSON document, which describes a set of properties with UI hints, into a working properties dialog panel.</p> <p>Common Properties is a React component and has an associated properties controller object.</p> </li> <li> <p>Test Harness - This is a node.js application that wrappers <code>&lt;CommonCanvas&gt;</code> and <code>&lt;CommonProperties&gt;</code>. Although it is primarily for testing, the UI can be useful in other ways:</p> <ul> <li>For displaying a set of sample applications</li> <li>For trying out different Elyra Canvas features in a sandbox environment</li> </ul> </li> </ul>"},{"location":"01-canvas-components/","title":"Elyra Canvas Components Overview","text":"<p>The Elyra Canvas package delivers two decoupled React objects: Common Canvas and Common Properties.</p> <p></p>"},{"location":"01-canvas-components/#common-canvas","title":"Common Canvas","text":"<p>Common Canvas displays a flow of data operations as nodes and links (edges) which the user can create and edit to get the flow they want. These visual flows of data operations are typically translated into data processing steps performed by the application. Common Canvas provides UI functionality for the visual display of flows in the browser and leaves persistence and execution of data flows to the application.</p> <p>The common-canvas user can perform operations such as:</p> <ul> <li>Create a new node by dragging a node template from a palette onto the canvas.</li> <li>Delete a node by clicking a context menu option.</li> <li>Create a link by dragging a line from one node to another.</li> <li>Delete a link by clicking a context menu option.</li> <li>Add a comment to the canvas and draw a link from it to one or more nodes.</li> <li>Edit a comment.</li> <li>Move nodes and comments around in the canvas to get the desired arrangement.</li> <li>Create a new node by dragging a node from the OS desktop (or elsewhere on the browser page) onto the canvas. This takes a little bit of development work.</li> <li>And much more! \u2026</li> </ul>"},{"location":"01-canvas-components/#common-canvas-components","title":"Common Canvas Components","text":"<p>Common Canvas has several constituent parts that can be visible to the user and can be customized by the application:</p> <p></p> <ul> <li>Flow editor - the main area of the UI where the flow is displayed and edited.</li> <li>Palette - a set of node templates that can be dragged to the canvas to create new nodes</li> <li>Context menu - a menu of options for nodes, comments, etc.</li> <li>Context toolbar - a menu of options for nodes, comments, etc presented as a small toolbar</li> <li>Toolbar - a set of tools across the top of the UI.</li> <li>Notification panel - a panel for displaying runtime and other messages to the user.</li> <li>State Tag - a small pill-shaped component that appears over the canvas to indicate its state: locked or read-only.</li> <li>Tooltips - information tips displayed when the mouse cursor is over an object.</li> </ul> <p>In addition, there are three optional panels where application specific output can be displayed such as properties, log info or data previews. </p> <ul> <li>Right side flyout - a panel, often used to display node properties</li> <li>Top panel - a panel which can be used to display other app related information</li> <li>Bottom panel - a panel which can be used to display other app related information</li> </ul>"},{"location":"01-canvas-components/#common-properties","title":"Common Properties","text":"<p>Common Properties allows the application to display a Carbon compliant properties panel or dialog with just a Javascript (JSON) object as input. Common Properties supports the most commonly used UI components and also allows custom components to be added into its visual output.</p> <p></p>"},{"location":"01.01-flow-editor/","title":"Flow Editor Overview","text":"<p>The Flow Editor displays the flow to the user and allows the user to interact with the flow using the mouse/trackpad and the keyboard and other input devices. Typically, the flow shows a set of nodes connected by links (edges) that represent some flow of data, or flow of control, which is in the problem domain of the application.</p> <p></p> <p>The editor displays the following object types which the user can interact with:</p> <ul> <li>Nodes</li> <li>Links</li> <li>Comments</li> <li>Decorations</li> </ul>"},{"location":"01.01-flow-editor/#pipeline-flow","title":"Pipeline Flow","text":"<p>The defintions of objects displayed within the flow editor are contained in a JavaScript object descibed by the pipeline flow schema. A pipeline flow object can be serialized to, or parsed from, JSON and consequently saved to, or read from, a file.</p> <p>The storage and mangement of pipeline flow files is handled by the application. The pipeline flow can be read from the canvas controller:</p> <p><pre><code>    const pflow = canvasController.getPipelineFlow();\n</code></pre> and a previously saved pipeline flow can be provided to Common Canvas also using the canvas controller:</p> <pre><code>    canvasController.setPipelineFlow(pFlow);\n</code></pre> <p>A pipeline flow contains an array of pipelines, one of which is the \u2018primary pipeline\u2019. Other pipelines will be sub-flows for supernodes contained within the primary pipeline (or other pipelines).</p> <p>Each pipeline defines sets of nodes, links and comments with all their associated attributes.</p>"},{"location":"01.01-flow-editor/#create-nodes","title":"Create nodes","text":"<p>Nodes can be created by dragging from the palette and dropping onto the flow editor canvas:</p> <p></p> <p>Nodes can also be automatically added to the flow editor canvas by double clicking them in the palette. The node will be added at an appropriate place on the canvas and connected to the preceding node if one is available:</p> <p></p>"},{"location":"01.01-flow-editor/#object-selection","title":"Object Selection","text":"<p>Objects (nodes, links and comments) on the flow editor canvas can be selected by single clicking on them. Subsequently, if the user <code>Command/Ctrl + click</code>s on another object it will be:</p> <ul> <li>Added to the set of selected objects if it is not currently selected or</li> <li>Removed from the set of selected objects if it is currently selected.</li> </ul> <p>Clicking on the flow editor canvas background will deselect all canvas objects.</p> <p>A selection region can be pulled out to select multiple objects at once by pressing the <code>Shift key and dragging</code> on the canvas background.</p> <p></p> <p>A set of connected nodes through a flow can be selected by, clicking on a node to select it and then, <code>Shift + click</code> another downstream node. If the nodes are joined together through a set of inter-connected nodes, all of those nodes will be selected.</p> <p></p> <p>All canvas objects can be selected by displaying the default context menu or context toolbar for the flow-editor background and then clicking the \u2018Select All\u2019 option. Note: If the application provides its own canvas menus then it would need to add the <code>selectAll</code> internal action to the menu to enable the \u2018select all\u2019 function.</p> <p>Alternatively, the user can press <code>Ctrl/Command + a</code> keyborad shortcut to select all objects when the keyboard focus is on the canvas.</p> <p></p>"},{"location":"01.01-flow-editor/#create-links","title":"Create links","text":"<p>Links can be created by dragging from one node\u2019s output port to another node:</p> <p></p>"},{"location":"01.01-flow-editor/#reposition-objects","title":"Reposition Objects","text":"<p>The Flow Editor allows direct manipulation of selected objects by dragging them to a new position.</p> <p></p>"},{"location":"01.01-flow-editor/#flow-editor-canvas-context-menu-or-context-toolbar","title":"Flow editor canvas context menu or context toolbar","text":"<p>The flow editor can display a context menu or context toolbar (depending on which is enabled) that can show options for the whole flow. It is displayed by the context menu gesture which is either right-clicking the mouse, or the trackpad equivalent, while the mouse cursor is over the canvas.</p>"},{"location":"01.01-flow-editor/#zoom-objects","title":"Zoom Objects","text":"<p>The objects on the flow-editor canvas can be zoomed in and out either using the <code>zoomIn</code> or <code>zoomOut</code> toolbar buttons or by performing the zoom gesture using the mouse or trackpad. The canvas background can be panned by dragging the background.</p> <p></p> <p>A large flow can be centrally positioned, making all the nodes visible within the viewport, by clicking the <code>zoomToFit</code> button.</p> <p></p>"},{"location":"01.01-flow-editor/#command-stack","title":"Command Stack","text":"<p>Command actions that update the objects within the flow editor are added to the command stack and can be undone and then redone. The default toolbar has <code>undo</code> and <code>redo</code> buttons and the default context menu/toolbar for the canvas background has <code>undo</code> and <code>redo</code> options. There are also keyboard shortcuts to undo and redo.</p> <p></p>"},{"location":"01.01-flow-editor/#clipboard","title":"Clipboard","text":"<p>Users can <code>cut</code> and <code>copy</code> one or more objects from the canvas onto the clipboard and <code>paste</code> them into the same flow or a different flow. The default canvas toolbar provides buttons for these three actions and they can also be accessed through the default context menus/toolbars for the objects on the canvas.</p> <p>There are also keyboard shortcuts to cut, copy and paste.</p> <p></p>"},{"location":"01.01.01-nodes/","title":"Nodes","text":""},{"location":"01.01.01-nodes/#introduction","title":"Introduction","text":"<p>Nodes displayed in the flow editor can represent data operations or other types of operations for the type of flow the application displays. Nodes are joined together in a flow by data links (edges). Association links can also join two nodes together (in a non-directional relationship) and nodes can be connected to comments with a comment link.</p> <p>Nodes can be customized into a large number of different layouts depending on the needs of the application, as shown below:</p> <p> </p>"},{"location":"01.01.01-nodes/#pipeline-flow-node","title":"Pipeline Flow Node","text":"<p>Node objects are stored in the <code>nodes</code> array in a pipeline which itself is in the <code>pipelines</code> array of the pipeline flow. The node object in the pipeline holds some basic information used for node display such as:</p> <ul> <li>id - unique identifier</li> <li>position - x/y position relative to the canvas origin</li> <li>label</li> <li>description \u2013 displayed in the node tooltip (if enabled)</li> <li>image \u2013 image location on the server or a JSX object</li> <li>ports info (inputs and outputs)</li> <li>optional decoration information</li> </ul> <p>Additional information on the node layout is configured in the node layout fields.</p>"},{"location":"01.01.01-nodes/#node-elements","title":"Node Elements","text":"<p>Nodes are made up of a number of display elements:</p> <p></p> <p>In addition, the node might have an ellipsis icon if context menus are enabled and one or more decorations. All of the node elements are optional, except the selection highlighting element.</p>"},{"location":"01.01.01-nodes/#node-format","title":"Node Format","text":"<p>The <code>enableNodeFormatType</code> field of the canvas config object can be used to change the basic format of the node between \u201cHorizontal\u201d and \u201cVertical\u201d format:</p> <p></p> <p>Each format type has its own set of node layout fields which can be overriden by the application for further customization.</p>"},{"location":"01.01.01-nodes/#node-image","title":"Node image","text":"<p>The node image is specified in the <code>image</code> field of the node object in the pipeline flow and the palette. It can either be a URL to an image file on the server or a JSX object.</p> <p>Here\u2019s an example of a node using an <code>image</code> field with a URL that specifies an SVG object imported from a file on the server:</p> <p></p> <p>Here\u2019s an example of a node using a JSX object which is an icon imported from the Carbon icons library.</p> <p></p>"},{"location":"01.01.01-nodes/#node-positioning","title":"Node positioning","text":"<p>Nodes are positioned at the x/y coordinate from the canvas origin of the node\u2019s top-left corner. The x/y coordinates are stored in the node object from the pipeline flow.</p>"},{"location":"01.01.01-nodes/#ports","title":"Ports","text":"<p>A node can have zero or more input ports and zero or more output ports.</p> <ul> <li>Input ports are the objects to which connections are made from other nodes that indicate a flow of data or control into the node.</li> <li>Output ports are the objects from which connections are made to other nodes that indicate a flow of data or control out of the node.</li> </ul> <p>In many applications, nodes have just a single input and/or output port. There is no strict definition of why a node might have multiple input ports or multiple output ports. Often they are used to indicate a different kind of data flowing into or out of the node. For example, a relational-database Join node might have two input ports one for the left table data and one for the right table data in the join. Or a filter node might take data and split it into two parts based on some criteria and write out the different data to separate output nodes, like this:</p> <p></p> <p>There can be multiple connections made into an input port or out of an output port. Each port has a maximum and minimum cardinality values which indicate the limits on the number of connections for the port. Common Canvas ensures the maximum cardinality is not exceeded for port connections.</p> <p>Ports can be shown visually on, or close to, the node as circles or images. This positioning is controlled by the node layout fields.</p>"},{"location":"01.01.01-nodes/#node-selection","title":"Node Selection","text":"<p>See the Object Selection section in the flow editor page for details.</p>"},{"location":"01.01.01-nodes/#guides-for-creating-links","title":"Guides for creating links","text":"<p>A guide is an image or shape drawn at the location of an output port. The user can drag the \u2018guide\u2019 to another node to create a new link connection to that node. The appearance of the guide can be customized by altering the node layout fields and CSS for the node. If output ports are visible, it appears as if the user is dragging the port but the guide is, in fact, a different node element.</p> <p> </p>"},{"location":"01.01.01-nodes/#resizable-nodes","title":"Resizable nodes","text":"<p>Nodes can be resized if the enableResizeableNodes canvas config field is set to <code>true</code>. The node can be resized if the user drags the border area in the desired direction.</p> <p></p>"},{"location":"01.01.01-nodes/#insert-node-to-link","title":"Insert node to link","text":"<p>Nodes can be inserted into a link and the flow re-wired appropritely, if enableInsertNodeDroppedOnLink canvas config field is set to <code>true</code>.</p> <p></p>"},{"location":"01.01.01-nodes/#highlight-target-node-for-link","title":"Highlight target node for link","text":"<p>A Node can be highlighted when a guide icon is being dragged towards it and a connection is allowed, if enableHighlightNodeOnNewLinkDrag canvas config field is set to <code>true</code>.</p> <p></p>"},{"location":"01.01.01-nodes/#other-behaviors","title":"Other behaviors","text":"<p>There are other node behaviors which can be switched on or off. See the nodes section on the  canvas config object.</p>"},{"location":"01.01.01-nodes/#react-nodes","title":"React Nodes","text":"<p>The body of nodes can be drawn using a React object in place of the SVG elements usually displayed by Common Canvas. The React object is specified by the application in the <code>nodeExternalObj</code> field in the node layout fields.</p> <p>Here is an example of two nodes using the CardNode React object from the Carbon Charts (React) library.</p> <p></p>"},{"location":"01.01.01-nodes/#branch-highlighting","title":"Branch highlighting","text":"<p>Branch highlighting allows the user to highlight upstream nodes, downstream nodes or the entire branch of nodes (both upstream and downstream) by choosing one of the \u2018Highlight\u2019 options from the context menu for a particular node.</p> <p>Clicking this:</p> <p></p> <p>Results in this:</p> <p></p> <p>Common Canvas add a class called \u2018d3-branch-highlight\u2019 to the group  <code>&lt;g&gt;</code> object of the node or the link in the branch. The application can use that class to specify its own CSS styling for the branch highlighting.</p> <p>By default, Common Canvas provides colors and styles for the highlighted branch nodes and links, but the application can override them if desired using CSS like this.</p> <pre><code>d3-node-group.d3-branch-highlight {\n    .d3-node-body-outline {\n        stroke: red;\n    }\n}\n</code></pre>"},{"location":"01.01.01-nodes/#supernodes","title":"Supernodes","text":"<p>A supernode is a special kind of node that can reference another pipeline in the same pipeline flow object (internal) or, in some cases, in another pipeline flow (external). The referenced pipeline is known as a sub-flow or sub-pipeline.</p> <p>These types of supernodes/sub-flows combinations have different uses:</p> <ul> <li>Internal sub-flows are useful for organizing flows by separating out closely related sets of nodes from the main flow.</li> <li>External sub-flows are useful for function reuse. That is, if a set of nodes performs some function that is needed by more than one pipeline flow, they would be placed into their own pipeline flow and referenced by the others.</li> </ul> <p></p> <p>Common Canvas allows the user to create a supernode by selecting a set of nodes to be placed in the sub-flow:</p> <p></p> <p>And then to view it as expanded \u2018in-place:</p> <p></p> <p>The user can also navigate to a \u2018full-page\u2019 view (well, really it is a full-viewport view):</p> <p></p> <p>The sub-flow can be edited by the user, after it has been created, by adding, removing or editing its nodes, comments and links.</p> <p>Supernodes can also be:</p> <ul> <li>Deconstructed \u2013 that is, the supernode is remove from the flow and the nodes from the sub-flow are inserted back into the parent flow.</li> <li>Converted from internal to external - this means the sub-flow is removed from its current pipeline flow and placed in a separate pipeline flow object that can be saved by the application.</li> <li>Converted from an external to internal - this means the sub-flow is copied from the external pipeline flow and placed into the pipeline flow of the supernode.</li> </ul> <p>See the External Pipeline Flows page for more details.</p>"},{"location":"01.01.02-links/","title":"Links","text":""},{"location":"01.01.02-links/#introduction","title":"Introduction","text":"<p>Common Canvas will display one link line on the canvas for each link defined in the pipeline flow. There are three categories of links supported by Common Canvas:</p> <ul> <li>Data links - a directional link between the ports on two nodes</li> <li>Association links - a relationsjip link between two nodes with no implied direction</li> <li>Comment links - a link from a comment to a node</li> </ul> <p>The appearance and behavior of links can be customized by:</p> <ul> <li>Specifying canvas config fields for links</li> <li>Overriding the CSS styles applied to the elements of the link line</li> <li>By specifying decorations for the link</li> </ul>"},{"location":"01.01.02-links/#data-links","title":"Data Links","text":"<p>Data links are designed to model a flow from a source node to a target node. Data links are specified in the pipeline flow to connect a port on the source node to a port on the target node. Data links are typically displayed with an arrow head to display the flow along the link from source to target.</p> <p>There are 4 types of data link:</p> <ul> <li>Curve</li> <li>Elbow</li> <li>Parallax</li> <li>Straight</li> </ul> <p>These can be changed by specifying the enableLinkType configuration field.</p> <p>Also, data links can be drawn either:</p> <ul> <li>between ports on the source and target nodes or</li> <li>\u201cfreeform\u201d which means the link is drawn from and to the source node ignoring port positions. Typically with \u201cfreeform\u201d links the application customizes the canvas to NOT display ports.</li> </ul> <p>This choice can be changed by specifying the enableLinkMethod configuration field.</p> <p>This table shows the different combinations:</p> Type Ports Freeform Curve Elbow Parallax Straight"},{"location":"01.01.02-links/#freeform-links","title":"Freeform Links","text":"<p>The enableLinkMethod config field can be set to \u201cFreeform\u201d. With this option, links are drawn directly between nodes without any reference to ports.</p> <p>Here is an example of a \u201cFreeform\u201d link with a \u201cStraight link type:</p> <p></p> <p>The \u201cFreeform\u201d display is useful for flows where no particular direction of the flow needs to be enforced and also where the flow has nodes with multiple ports but the ports do not need to be shown in any particular order or context.</p> <p>When more than one link enters or exits into/from one side of the node the freeform links will be drawn to maintain some reasonable separation like this:</p> <p> </p>"},{"location":"01.01.02-links/#ports-links","title":"Ports Links","text":"<p>When enableLinkMethod is set to \u201cPorts\u201d, Common Canvas draws the links to maintain the flow from output ports to input ports regardless of where the nodes are positioned relative to one another.</p> <p>Here is an example of the \u201cPorts\u201d links method with a \u201cCurve\u201d link type:</p> <p></p> <p>Links between ports can be useful if the application wants to allow the user to create loops in the flow, like this:</p> <p></p>"},{"location":"01.01.02-links/#overriding-port-position-and-link-direction","title":"Overriding port position and link direction","text":"<p>Applications can configure Common Canvas to position ports by default in one of four different orientations:</p> <ul> <li>For \u201cLeftRight\u201d output ports will be on the right of the node and input ports will be on the left of the node</li> <li>For \u201cRightLeft\u201d output ports will be on the left of the node and input ports will be on the right of the node</li> <li>For \u201cTopBottom\u201d output ports will be on the bottom of the node and input ports will be on the top of the node</li> <li>For \u201cBottomTop\u201d output ports will be on the top of the node and input ports will be on the bottom of the node</li> </ul> <p>The application can further customize the position of the ports on the node if desired.</p> <p>The position of the ports will affect the way links are drawn from/to the port.</p> <p>This can result in this kind of display where links draw into/out of ports in multiple different directions:</p> <p></p>"},{"location":"01.01.02-links/#self-referencing-links","title":"Self-referencing links","text":"<p>If the enableSelfRefLinks canvas config field is set to true, the user can create links that loop back to the node they originated from. These are created by the user dragging from the output port on the node and dropping the new link onto a input port, or the body, of the same node.</p> <p>Here\u2019s an example of a self-referencing link using a \u201cFreeform\u201d link method with an \u201cElbow\u201d link type.</p> <p></p> <p>Self-referencing links behave the same as other links and can be displayed in the same combinations of link types (Curve, Elbow, Parallax and Straight) and link methods (Freeform or Ports) as other links.</p>"},{"location":"01.01.02-links/#detached-links","title":"Detached links","text":"<p>Note: Typically data links must be drawn between nodes however, if the config field enableLinkSelection is set to <code>Detachable</code>, the links are allowed to be drawn to and/or from arbitrary points on the canvas.</p> <p>With this option, the start and end of existing links can be dragged away from the nodes they are connected to and dropped onto an arbitrary point on the canvas to create a \u2018detached\u2019 link. Additionally, the end of any detached link that originates from, or points to, a point on the canvas can be dragged to a node to form a connection. Also, nodes can be dragged to the available ends of those \u2018detached\u2019 links to form a connection.</p>"},{"location":"01.01.02-links/#association-links","title":"Association Links","text":"<p>Association links are designed to capture a relationship between two nodes where there is no implied direction. By default these are displayed as a single straight link line in a dashed style. There are no arrow heads by default for that type of link.</p> <p></p>"},{"location":"01.01.02-links/#comment-links","title":"Comment Links","text":"<p>Comment links connect a comment to one or more nodes. They can be created by the user by: (a) pulling out the small handle/circle that appears below a comment and dropping it on a node. (2) by selecting nodes before the comment is selected and then creating the comment. This will automatically create a comment link from the selected nodes to the newly created comment.</p> <p></p>"},{"location":"01.01.03-comments/","title":"Comments","text":""},{"location":"01.01.03-comments/#introduction","title":"Introduction","text":"<p>Comments are used to display explanatory information to the user about the flow. Comments can be standalone:</p> <p></p> <p>or connected to one or more nodes with a link line:</p> <p></p>"},{"location":"01.01.03-comments/#creating-comments","title":"Creating comments","text":"<p>Comments can be created by the user by clicking the \u2018Create Comment\u2019 button in the default toolbar or by clicking the \u2018Create comment\u2019 option in the default canvas background context menu/toolbar.</p> <p>Note: If the application is providing its own toolbar it would need to have a button defined with the <code>createAutoComment</code> internal action and, in the context menu/toolbar for the canvas background there would need to be an option defined with the <code>createComment</code> internal action.</p>"},{"location":"01.01.03-comments/#editing-comments","title":"Editing comments","text":"<p>The comment can be changed to \u2018edit mode\u2019 by either double clicking it or clicking the \u2018Edit Comment\u2019 option in the default context menu/toolbar. If the application is providing its own context menu/toolbar it would need to provide an option with the <code>setCommentEditingMode</code> action defined.</p> Doing this: Yields this: <p>After text has been entered into the comment entry area the user can click on the canvas background to finish editing and display the comment.</p>"},{"location":"01.01.03-comments/#comment-selection","title":"Comment Selection","text":"<p>See the Object Selection section in the flow editor page for details.</p>"},{"location":"01.01.03-comments/#resizing-comments","title":"Resizing comments","text":"<p>Comments can be sized by dragging the border.</p> <p></p>"},{"location":"01.01.03-comments/#connecting-a-comment-to-a-node","title":"Connecting a comment to a node","text":"<p>The user can create a link from a comment to a node in one of two way:</p> <ol> <li>By dragging the small gray \u2018guide\u2019 circle  at the bottom of the comment and dropping it onto the target node or</li> <li>By selecting one of more nodes and then creating the comment. This will automatically add comment links from the comments to each selected node.</li> </ol> <p>By default, the connection is shown as a dashed link line.</p> <p></p>"},{"location":"01.01.03-comments/#coloring-comment-backgrounds","title":"Coloring comment backgrounds","text":"<p>Comment backgrounds can be colored by clicking the \u2018Change Color\u2019 option in the default context menu/toolbar for the comment. If the application provides its own context menu/toolbar then the <code>colorSelectedObjects</code> action must be defined.</p> <p></p>"},{"location":"01.01.03-comments/#markdown","title":"Markdown","text":"<p>Optionally, the application can switch on markdown support within comments. This allows the user to enter markdown syntax when the comment is in edit mode, which is then formated approriately in display mode.</p> Entering this: Yields this:"},{"location":"01.01.03-comments/#html-in-markdown","title":"HTML in Markdown","text":"<p>As well as markdown syntax, the user can also enter HTML into the markdown text. This is then run when the comment is presented in display mode. HTML support allows the user more extensive customization capabilities including the specification of CSS for the text.</p> <p>For example, specifying this will color the word Red: <pre><code>Some &lt;span style=\"color: red\"&gt;Red&lt;/span&gt; text\n</code></pre> Here\u2019s an example comment with some sample HTML:</p> <p></p>"},{"location":"01.01.04-decorations/","title":"Decorations","text":""},{"location":"01.01.04-decorations/#introduction","title":"Introduction","text":"<p>In Common Canvas, nodes and links can be enhanced with decorations. A decoration is either:</p> <ul> <li> <p>An image</p> <p> </p> </li> <li> <p>A label</p> <p> </p> </li> <li> <p>A shape (SVG path) or</p> <p> </p> </li> <li> <p>A JSX object</p> <p> </p> </li> </ul> <p>Decorations can be applied to a node or link in a number of ways and can be made interactable so when the user clicks on the decoration the <code>decorationActionHandler</code> is called.</p> <p>Here are some node decorations displayed by IBM\u2019s SPSS Modeler application:</p> <p></p> <p>Here are some link decorations displayed by IBM\u2019s Data Stage application:</p> <p></p> <p>Note: The link labels and the small icons on the links are decorations as well as the circle at the source of each link.</p>"},{"location":"01.01.04-decorations/#tips-for-decorations","title":"Tips for Decorations","text":"<p>A decoration can have a tooltip:</p> <p></p>"},{"location":"01.01.04-decorations/#editable-label-decoration","title":"Editable label decoration","text":"<p>Label decorations can be made to be editable.</p> <p></p>"},{"location":"01.02-palette/","title":"Palette","text":""},{"location":"01.02-palette/#introduction","title":"Introduction","text":"<p>Common Canvas can display a palette which appears in the left flyout panel. The palette can display a set of palette nodes (sometimes called node templates) split into different categories.</p> <p></p> <p>The user can drag any of the palette nodes from the palette onto the canvas to create a new instance of a node on the canvas. The user can then join nodes together by creating link lines.</p> <p></p> <p>Alternatively, the user can double click node templates to add, and automatically join, them to the current flow. When a palette node is double clicked, Common Canvas will look for the node at the end of the current flow of nodes and will add the node to the canvas to the right of the end node in the flow. Common Canvas will also automatically join the nodes together by creating a new link line.</p> <p></p>"},{"location":"01.02-palette/#populating-the-palette","title":"Populating the palette","text":"<p>The host application must tell Common Canvas what node templates and categories it wants the user to see in the palette. This is done by providing Common Canvas with a palette (JavaScript) object by calling the canvas-controller <code>setPipelineFlowPalette(palette)</code> method. The palette object is often read from a JSON document stored in the host application\u2019s repository or it can be automatically generated.</p> <p>The palette object should conform to the palette schema. The host application can ensure that palette conforms to the schema by switching on schema validation in the canvas configuration.</p>"},{"location":"01.02-palette/#palette-configuration","title":"Palette configuration","text":"<p>There are a number of configuration options that control the palette that are specified in the canvas config object:</p> <ul> <li>enablePaletteLayout</li> <li>enableNarrowPalette</li> <li>enableAutoLinkOnlyFromSelNodes</li> <li>enablePaletteHeader</li> </ul>"},{"location":"01.02-palette/#palette-operation","title":"Palette operation","text":"<p>The palette contents can be manipulated calling these canvas-controller palette methods</p> <p>The palette can be opened and closed using these canvas-controller operational methods</p>"},{"location":"01.02-palette/#search","title":"Search","text":"<p>The user can enter a search string into the Search field at the top of the palette. The behavior is as follows:</p> <ol> <li>When the search field is empty, the palette shows categories which can be expanded to show the node templates within the expanded category.</li> <li>As the user enters characters into the search field, Common Canvas immediately searches through the node template labels, node template descriptions and category labels for the characters entered and finds a subset of the node templates that match the search string. Common Canvas then replaces the category-based view of the palette with a list of node templates that match the search criteria. In this view the node templates also include the node description under the node label.</li> <li>The search is case insensitive.</li> <li>The search text is highlighted wherever it appears in the labels, descriptions or category labels.</li> <li>Common Canvas uses a ranking algorithm to order the display of node templates so those most relevant to the search text are positioned at the top of the list. The ranking algorithm puts more weight on those node templates where the search text appears in the label than if the text appears in the description or the category label.</li> <li>If the user enters words into the search field (separated by spaces), Common Canvas searches for each word separately. Therefore, if say the user entered \u201cdata import\u201d into the search field, Common Canvas would find a node with \u201c<code>Import</code> <code>Data</code>\u201d as the label or even a node with a description that said \u201cThis node does lots of things and also <code>data</code> can be <code>import</code>ed.\u201d</li> <li>Nodes that have text which have hits on multiple words are ranked more highly than node templates whose text only contains one search word.</li> <li>Common Canvas uses a debounce function so that, if the user types the search string very quickly, Common Canvas does not perform multiple searches for each key press but only runs a full search when rapid typing has ended.</li> </ol>"},{"location":"01.02-palette/#recommendation","title":"Recommendation","text":"<p>According to the schema, node template descriptions are not mandatory in the palette object. However, it is recommended you provide descriptions for each of your node templates. The reason for this is that, the search function searches through node template descriptions, as well as node template labels and category labels. This means you can write your node template descriptions to contain appropriate keywords that a user might search for when looking for a node.</p> <p>For example, if there is a node template called \u2018Import Data\u2019 and that node could import comma-separated files you could add \u2018comma-separated\u2019 and \u2018csv\u2019 into your description for that node template. If the user entered <code>comma</code> in the search field the \u2018Import Data\u2019 node template would be shown in the search results even though <code>comma</code> does not appear in the node template label.</p>"},{"location":"01.03-context-menu/","title":"Context menu","text":"<p>A context menu is a small window containing a list of options applicable to an object or set of selected objects.</p> <p>A traditional context menu, like the one shown below,  will be displayed when <code>enableContextToolbar</code> is set to <code>false</code> (or omitted) from the canvas config, and either:</p> <ul> <li>a right-click (or equivalent on a trackpad) is performed on a canvas object or the canvas background or</li> <li><code>Control + click</code> is done on an obejct or</li> <li>the ellipsis icon (only shown for nodes) is clicked</li> </ul> <p></p>"},{"location":"01.03-context-menu/#populating-the-context-menus","title":"Populating the context menus","text":"<p>By default, Common Canvas will display appropriate context toolmenus for all flow editor canvas objects. The application can override or replace the default menus by implementing the <code>contextMenuHandler</code> callback.</p>"},{"location":"01.04-context-toolbar/","title":"Context Toolbar","text":"<p>Context toolbars are an alternative to traditional context menus. It can be enabled by setting <code>enableContextToolbar</code> to <code>true</code>in the canvas config.</p> <p>A context toolbar is a small toolbar that appears above nodes, links and comments as the mouse cursor is hovered over them. A context toolbar for the canvas background can also be displayed by right-clicking on the canvas background.</p> <p>The context toolbar displays a set of icons that represent the most likely actions the user would want to perform on the object under the mouse cursor. If necessary, the toolbar can also show an overflow (vertical ellipsis) icon that, when clicked, reveals additional actions that can be performed on the object.</p> <p>For a \u201cvertical\u201d style node the context toolbar looks like this:</p> <p></p> <p>For a \u201chorizontal\u201d style node it looks like this:</p> <p></p> <p>when the user clicks the overflow icon it looks like this:</p> <p></p> <p>Note: Since the mouse cursor can be hovered over a node, comment or link that is NOT currently selected, the actions shown in the context toolbar will apply to just that object, even if there is one or more currently selected objects.</p> <p>If the mouse cursor is hovered over a selected object when there are other selected objects, the actions in the context toolbar will be applicable to all the selected objects. This is the same as how a traditional content menu shows actions that are applicable to the set of selected objects.</p>"},{"location":"01.04-context-toolbar/#populating-the-context-toolbars","title":"Populating the context toolbars","text":"<p>By default, Common Canvas will display appropriate context toolbars for all flow editor canvas objects. The application can override or replace the default toolbars by implementing the <code>contextMenuHandler</code> callback.</p>"},{"location":"01.05-toolbar/","title":"Canvas Toolbar","text":"<p>The canvas toolbar appears at the top of the <code>&lt;div&gt;</code> occupied by Common Canvas. By default, the toolbar will be displayed with appropriate buttons to perform the most popular actions. The toolbar can be customized by the application to show whatever action buttons are required. Buttons can be positioned to the left or right of the toolbar area.</p> <p></p> <p>The toolbar is customized by providing a toolbar config object as one of the <code>&lt;CommonCanvas&gt;</code> props.</p> <p>The toolbar can be hidden by setting the enableToolbarLayout field in the canvas config to \u201cNone\u201d.</p>"},{"location":"01.05-toolbar/#overflow-menu-behavior","title":"Overflow Menu Behavior","text":"<p>If there is enough width all toolbar buttons will be displayed:</p> <p></p> <p>but when the width is too narrow to accommodate all the buttons, the toolbar will display an overflow button:</p> <p></p> <p>and when the overflow button is clicked, a menu appears showing the extra action buttons:</p> <p></p>"},{"location":"01.05-toolbar/#dividers","title":"Dividers","text":"<p>Action buttons can be separated by dividers so that related buttons can be grouped together:</p> <p></p>"},{"location":"01.05-toolbar/#tooltips","title":"Tooltips","text":"<p>Action buttons will show a tooltip on hover, if a label is provided:</p> <p></p>"},{"location":"01.05-toolbar/#enableddisabled-actions","title":"Enabled/Disabled actions","text":"<p>Action buttons in the toolbar can be shown as either enabled or disabled:</p> <p> </p>"},{"location":"01.05-toolbar/#selected-state","title":"Selected state","text":"<p>Action buttons that reflect a state can be displayed as unselected or selected:</p> <p> </p>"},{"location":"01.05-toolbar/#text-with-icon","title":"Text with icon","text":"<p>Action buttons can be shown with text alongside the icon (either before or after), if a label is provided:</p> <p> </p>"},{"location":"01.05-toolbar/#carbon-button-styling","title":"Carbon button styling","text":"<p>Action buttons can be styled like Carbon buttons, if required:</p> <p></p>"},{"location":"01.05-toolbar/#sub-menu","title":"Sub-menu","text":"<p>Action buttons can be configured to display a menu of related actions:</p> <p></p>"},{"location":"01.05-toolbar/#sub-panel","title":"Sub-panel","text":"<p>Action buttons can be configured to display an application-specific panel:</p> <p></p>"},{"location":"01.05-toolbar/#dual-purpose-buttons","title":"Dual purpose buttons","text":"<p>Action buttons can be configured to be \u2018dual purpose\u2019 where the left side of the button peforms the associated action:</p> <p></p> <p>and the right side opens a panel of application-specified settings, associated with the left side part of the button:</p> <p></p>"},{"location":"01.05-toolbar/#imbedded-jsx","title":"Imbedded JSX","text":"<p>JSX can be provided to add additional information into the toolbar. In this case, the <code>Autosaved</code> time is added amongst the regular toolbar action buttons.</p> <p></p>"},{"location":"01.06-notification-panel/","title":"Notification Panel","text":"<p>The Notification Panel allows the application to display error, warning, success and info messages to the user.</p> <p></p> <p>The canvas toolbar provides a button to display a sub-panel that contains the notifications. The button will be added to the far right side of the toolbar whenever a Notification Config is specified to the <code>&lt;CommonCanvas&gt;</code> React object.</p> <p>The notifications button in the toolbar indicates the state and number of the messages in the panel.</p> <p>A colored circle will be shown to indicate the highest severity message to be shown in the notification panel: info/blue, success/green, warning/yellow or error/red. Also, a number is displayed within the icon to indicate the number of current messages.</p> <p> </p>"},{"location":"01.07-state-tag/","title":"State Tag","text":"<p>A State Tag is an optional pill-shaped object that can displays the state of the flow to the user. This can be either \u2018Locked\u2019 or \u2018Read-only\u2019. By default, no state tag is shown.</p> <p>The application can request a state tag be shown by setting the enableStateTag canvas config field.</p> <p>When the State Tag is display it will show a tooltip, with an appropriate message, if the mouse cursor is hovered over it. The application can override the default message by implementing the Tip Handler callback.</p> <p></p> <p>Note</p> <p>It is the application\u2019s reponsibility for making the flow read-only. See the Read Only or Locked Flows page for more details.</p>"},{"location":"01.08-tooltips/","title":"Tooltips","text":"<p>Tooltips (sometimes referred to as just \u2018tips\u2019) can be shown for the following objects in Common Canvas:</p> <ul> <li>Palette Categories</li> <li>Palette Nodes</li> <li>Toolbar buttons</li> <li>Nodes</li> <li>Ports</li> <li>Links</li> <li>Decorations</li> <li>State Tag</li> </ul> <p>The application can switch tooltips on and off as required for the different types of object and can also customize what text is displayed in the tooltip.</p> <p>Tooltips for the toolbar:</p> <p></p>"},{"location":"01.08-tooltips/#configuring-tooltips","title":"Configuring tooltips","text":"<p>By default, Common Canvas will display tooltips where appropriate. Tooltips can be switched on or off, for evertything except the toolbar, by specifying the <code>tipConfig</code> field for the canvas config object.</p>"},{"location":"01.08-tooltips/#customizing-tooltip-text","title":"Customizing tooltip text","text":"<p>The text for tooltips can be customized, for evertything except the toolbar, by implementing the Tip Handler callback.</p> <p>The toolbar tooltips can be customized as part of the Toolbar Config.</p>"},{"location":"01.09-panels/","title":"Panels","text":"<p>Common Canvas has three additional optional panels: top panel, bottom panel, right-flyout. These can be used by the application to display any additional content to the user such as logs or data previews or properties of selected objects. Traditionally, the right-flyout is used to display node properties.</p> <p>The application can, optionally, use Common Properties to display the controls for the properties of a node.</p> <p></p>"},{"location":"01.09-panels/#customizing-content-and-display","title":"Customizing content and display","text":"<p>The content and display of the panels is controlled by these six props of the <code>&lt;CommonCanvas&gt;</code> React object:</p> <ul> <li>showRightFlyout - a Boolean</li> <li> <p>rightFlyoutContent - JSX object showing content</p> </li> <li> <p>showBottomPanel - a Boolean</p> </li> <li> <p>bottomPanelContent - JSX object showing content</p> </li> <li> <p>showTopPanel - a Boolean</p> </li> <li>topPanelContent - JSX object showing content</li> </ul>"},{"location":"01.10-common-properties/","title":"Common Properties","text":"<p>Common Properties is a React component that allows the application to display a set of UI components (radio buttons, text entry areas, drop down lists, sliders, tables, etc) to present the properties of a node to the user. Common Properties supports the most commonly used UI components and also allows custom components to be added into its visual output.</p> <p>The Common Properties React object has a \u2018prop\u2019 called the Parameter Definition which is a Javascript (JSON) object and some configuration objects as props.</p> <p>Traditionally, the right-flyout is used to display properties but the application can choose to display them elsewhere. The UI elements displayed by Common Properties comply with the Carbon design language.</p> <p>For more details and examples of the components supported by Common Properties, see the Common Properties Components page.</p> <p>Here\u2019s an example of the type of output a <code>&lt;CommonProperties&gt;</code> React object can produce. This is from the IBM SPSS Modeler application:</p> <p></p>"},{"location":"02-set-up/","title":"Installation","text":""},{"location":"02-set-up/#npm-install","title":"NPM Install","text":"<p>You\u2019ll need to build your application with Elyra Canvas.</p> <ul> <li>Elyra Canvas requires react, react-dom, react-intl, and react-redux libraries to be installed. See peerDependencies in package.json for versions requirements.</li> </ul> <p>Use the command: <pre><code>npm install @elyra/canvas --save-dev\n</code></pre> or add this to your package.json file:</p> <p><pre><code>  \"@elyra/canvas\": \"x.x.x\"\n</code></pre> where x.x.x is the latest build and then run: <pre><code>npm install\n</code></pre></p>"},{"location":"02-set-up/#localization","title":"Localization","text":"<p>If you want to see text displayed by Elyra Canvas components in different languages you must wrapper <code>&lt;CommonCanvas&gt;</code> and <code>&lt;CommonProperties&gt;</code>in an <code>&lt;IntlProvider&gt;</code> object.</p> <p>The sample code below shows how <code>&lt;IntlProvider&gt;</code> should be imported and initialized. Your code can set <code>this.locale</code> to indicate which language should override the default which, in this sample code, is set to English <code>en</code>. The default locale will be used if <code>this.locale</code> is set to a language which is not currently supported.</p> <p>If you want to provide translations for your own application\u2019s text you can import your own bundles and load them into the <code>this.messages</code> object along with the common-canvas and common-properties text. If you do this you will have to move <code>&lt;IntlProvider/&gt;</code> so that it wrappers your React objects as well as <code>&lt;CommonCanvas/&gt;</code> and/or <code>&lt;CommonProperties&gt;</code>.</p> <pre><code>import { IntlProvider } from \"react-intl\";\n\nimport CommandActionsBundles from \"@elyra/canvas/locales/command-actions/locales\";\nimport CommonCanvasBundles from \"@elyra/canvas/locales/common-canvas/locales\";\nimport CommonPropsBundles from \"@elyra/canvas/locales/common-properties/locales\";\nimport PaletteBundles from \"@elyra/canvas/locales/palette/locales\";\nimport ToolbarBundles from \"@elyra/canvas/locales/toolbar/locales\";\n\nclass App extends React.Component {\n\nconstructor() {\n    this.locale = \"en\";\n    // Create messages object once (here in constructor) - do not create messages\n    // in the render method, otherwise unnecessary renders inside\n    // common-canvas/common-properties will be performed.\n    this.messages = this._getMessages(\n        this.locale,\n        [CommandActionsBundles, CommonCanvasBundles, CommonPropsBundles,\n         PaletteBundles, ToolbarBundles]\n    );\n}\n\n_getMessages(locale, bundles) {\n  const messages = {};\n  for (const bundle of bundles) {\n    Object.assign(messages, bundle[locale]);\n  }\n  return messages;\n}\n\nrender() {\n  &lt;IntlProvider locale={this.locale} defaultLocale=\"en\" messages={this.messages}&gt;\n    {Add your &lt;CommonCanvas/&gt; or &lt;CommonProperties/&gt; element here.}\n  &lt;/IntlProvider&gt;\n}\n</code></pre>"},{"location":"02-set-up/#overriding-styles-and-color-themes","title":"Overriding Styles and Color Themes","text":"<p>When building your application you will need to load fonts and override styles:</p>"},{"location":"02-set-up/#css-styling-for-quick-start","title":"CSS styling for quick start","text":"<p>If you just want to get up and running and don\u2019t care about scss then import these regular CSS files:</p> <ul> <li>@elyra/canvas/dist/styles/common-canvas.min.css<ul> <li>version 8.x and older @elyra/canvas/dist/common-canvas.min.css</li> </ul> </li> </ul> <p>More information about carbon components can be found here https://carbondesignsystem.com/developing/frameworks/react#getting-started</p>"},{"location":"02-set-up/#scss-styling-recommended","title":"SCSS styling (recommended)","text":"<p>If you want to use the full power of scss styling with variable overrides etc then include these imports in your main SCSS file: <pre><code>@use \"@carbon/react\"; // Bring in all the styles for Carbon in your root/global stylesheet\n@import \"@elyra/canvas/src/index.scss\";\n</code></pre></p> <ul> <li>use <code>autoprefixer</code> when building</li> <li>if using webpack under the <code>sass-loader</code> and make sure to include</li> </ul> <pre><code>options: { includePaths: [\"node_modules\"] }\n</code></pre> <p>Again, you can refer to the test harness harness.scss and common.scss files for sample code.</p>"},{"location":"02-set-up/#3rd-party-styling","title":"3rd party styling","text":"<p>If you are using Common Properties then also include the react-virtualized styles:   - react-virtualized/styles.css</p>"},{"location":"02-set-up/#loading-fonts","title":"Loading Fonts","text":"<p>To get correct and efficient display of fonts in Elyra Canvas, the build process for your application should copy the IBM Plex font files from <code>/node_modules/@ibm/plex</code>to a <code>./fonts</code> folder and the following should be added to the <code>.scss</code> file for your application:</p> <pre><code>@use \"@carbon/react\" as * with (\n    $font-path: \"/fonts\"\n);\n\n$font-prefix: './fonts';\n@import 'node_modules/@ibm/plex/scss/ibm-plex.scss';\n</code></pre> <p>You can see an example of this in the common.scss file for the Elyra Canvas Test Harness. The Test Harness is the equivalent of a host application.</p> <p>The Gruntfile that builds the Test Harness contains the following, that ensures the fonts are copied from <code>/node_modules/@ibm/plex</code> to the <code>&lt;carbon fonts folder&gt;</code>: <pre><code>copy: {\n    fonts: {\n        files: [{\n            expand: true,\n            flatten: false,\n            cwd: \"./node_modules/@ibm/plex\",\n            src: [\"IBM-Plex*/**\"],\n            dest: \".build/fonts\"\n        }]\n    }\n}\n...\nvar buildTasks = [\"copy:fonts\"];\n</code></pre></p>"},{"location":"03-common-canvas/","title":"Getting started with Common Canvas","text":""},{"location":"03-common-canvas/#hello-canvas","title":"Hello Canvas!","text":"<p>Common Canvas is a React component. The <code>&lt;CommonCanvas&gt;</code> component is displayed in a <code>&lt;div&gt;</code> provided by your application. Here\u2019s some sample code to show the minimum code needed to get a working canvas.</p> <pre><code>import React from \"react\";\nimport AllTypesCanvas from \"../../test_resources/diagrams/allTypesCanvas.json\";\nimport ModelerPalette from \"../../test_resources/palettes/modelerPalette.json\";\nimport { CommonCanvas, CanvasController } from \"@elyra/canvas\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.canvasController = new CanvasController();\n        this.canvasController.setPipelineFlow(AllTypesCanvas);\n        this.canvasController.setPipelineFlowPalette(ModelerPalette);\n    }\n\n    render() {\n        return (\n            &lt;div id=\"harness-app-container\"&gt;\n                &lt;CommonCanvas\n                    canvasController={this.canvasController}\n                /&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre> <p>This code will display this:</p> <p></p> <p>The \u201cTiny App\u201d is available as part of the test harness function. Click here to see the app running. You can try: dragging a node, editing a comment (double click on it), drag a node from the palette, click a button on the toolbar, zoom in and out using the scroll gesture.</p> <p>Some sample code to look at:</p> <ul> <li> <p>This is the source code for app-tiny.js.</p> </li> <li> <p>This app app-small.js, is more sophisticated and shows many of the options available to a Common Canvas developer such as configurations and callback handlers.</p> </li> <li> <p>You can also look at the App.js file in the test harness section of this repo to see examples of code that uses the common-canvas component.</p> </li> </ul>"},{"location":"03-common-canvas/#canvas-controller","title":"Canvas Controller","text":"<p>The only mandatory prop for the <code>&lt;CommonCanvas&gt;</code> component is a regular JavaScript class called the Canvas Controller.</p> <p>The Canvas Controller handles calls from the host application and actions performed by the user. It then updates the internal object model which stores:</p> <ol> <li>The data that describes the flow of nodes, links and comments (called a pipelineFlow);</li> <li>The data that describes the definition of the palette which contains node templates that can dragged to add nodes to the canvas;</li> <li>The set of currently selected objects.</li> <li>Notification messages</li> <li>Breadcrumbs that indicate which sub-flow is being viewed</li> <li>Layout information</li> <li>And more \u2026</li> </ol> <p>The Canvas Controller provides an API which allows the application to:</p> <ol> <li>Set a new Pipeline Flow</li> <li>Get the current pipelineFlow (after the user has edited it)</li> <li>Update and edit objects in the canvas (for example, add node, delete link etc.)</li> <li>Set the node definition data (for display of nodes in the palette)</li> <li>Operate other aspets of the UI like opening panels, zooming, etc, etc.</li> </ol>"},{"location":"03-common-canvas/#getting-started","title":"Getting started","text":"<p>To use Common Canvas in your React application complete the following steps:</p>"},{"location":"03-common-canvas/#step-1-setup","title":"Step 1 : Setup","text":"<p>Complete the setup steps documented in the Initial Setup page.</p>"},{"location":"03-common-canvas/#step-2-import-common-canvas","title":"Step 2 : Import Common Canvas","text":"<p>Import the Common Canvas and Canvas Controller from the Elyra Canvas library. Elyra Canvas produces both esm and cjs outputs. By default esm will be used when webpack is used to build the application.</p> <p><pre><code>    import { CommonCanvas, CanvasController } from \"@elyra/canvas\";\n</code></pre> Common Canvas Only</p> <p>To import only Common Canvas functionality in <code>cjs</code> format use:</p> <pre><code>    import { CommonCanvas, CanvasController } from \"@elyra/canvas/dist/lib/canvas\";\n</code></pre>"},{"location":"03-common-canvas/#step-3-create-an-instance-of-the-canvas-controller","title":"Step 3 : Create an instance of the canvas controller","text":"<p>To control the canvas you\u2019ll need an instance of the canvas controller. Create an instance like this (probably in the constructor of your object). <pre><code>    this.canvasController = new CanvasController();\n</code></pre></p>"},{"location":"03-common-canvas/#step-4-set-the-palette-data","title":"Step 4 : Set the palette data","text":"<p>Next you\u2019ll need to populate the palette data.  This step is optional if you don\u2019t want to use the palette.</p> <p>The palette data will specify the nodes (split into categories) that will appear in the palette. This is done by calling the canvas controller with:</p> <pre><code>    this.canvasController.setPipelineFlowPalette(pipelineFlowPalette);\n</code></pre> <p>The pipelineFlowPalette object should conform to the JSON schema found here:  https://github.com/elyra-ai/pipeline-schemas/tree/master/common-canvas/palette</p> <p>Some examples of palette JSON files can be found here:  https://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/test_resources/palettes</p> <p>Images</p> <p>If the palette file references any images using a path you need those image files at the appropriate location.</p>"},{"location":"03-common-canvas/#step-5-optional-set-the-flow-data","title":"Step 5 : (Optional) Set the flow data","text":"<p>This is an optional step. If you want a previously saved flow to be shown in the flow editor, so the user can start to edit it, you will need to call the canvas controller with:</p> <pre><code>    this.canvasController.setPipelineFlow(pipelineFlow);\n</code></pre> <p>The pipelineFlow object should conform to the JSON schema found here:  https://github.com/elyra-ai/pipeline-schemas/tree/master/common-pipeline/pipeline-flow</p> <p>Some examples of pipeline flow JSON files can be found here:  https://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/test_resources/diagrams</p> <p>Images</p> <p>If the palette file references any images using a path you need those image files at the appropriate location.</p>"},{"location":"03-common-canvas/#step-6-display-the-canvas","title":"Step 6 : Display the canvas","text":"<p>Inside your render code, add the following:</p> <p><pre><code>    return (\n        &lt;div&gt;\n            &lt;IntlProvider&gt;\n                &lt;CommonCanvas canvasController={this.canvasController} /&gt;\n            &lt;/IntlProvider&gt;\n        &lt;/div&gt;\n    );\n</code></pre> The <code>&lt;div&gt;</code> should have the dimensions you want for your canvas to display in your page. For the <code>canvasController</code> prop, pass the instance of canvas controller created earlier. This is the only mandatory property. After providing this, and running your code, you will have a fully functioning canvas including: a palette; default toolbar; context menus; direct manipulation (move and resize) etc. To customize these behaviors and presentation continue with the sections below.</p> <p>See the Localization section of the Initial Setup page to see how <code>&lt;IntlProvider&gt;</code> can be configured.</p>"},{"location":"03-common-canvas/#common-canvas-customization","title":"Common Canvas customization","text":"<p>If you want to customize the behavior of Common Canvas you can specify any combination of the following optional settings: <pre><code>    return (\n        &lt;div&gt;\n            &lt;CommonCanvas\n                canvasController={this.canvasController}\n\n                config={this.canvasConfig}\n                toolbarConfig={this.toolbarConfig}\n                notificationConfig={this.notificationConfig}\n                contextMenuConfig={this.contextMenuConfig}\n                keyboardConfig={this.keyboardConfig}\n\n                contextMenuHandler={this.contextMenuHandler}\n                beforeEditActionHandler={this.beforeEditActionHandler}\n                editActionHandler={this.editActionHandler}\n                clickActionHandler={this.clickActionHandler}\n                decorationActionHandler={this.decorationActionHandler}\n                layoutHandler={this.layoutHandler}\n                tipHandler={this.tipHandler}\n                idGeneratorHandler={this.idGeneratorHandler}\n                selectionChangeHandler={this.selectionChangeHandler}\n                actionLabelHandler={this.actionLabelHandler}\n\n                showRightFlyout={showRightFlyout}\n                rightFlyoutContent={rightFlyoutContent}\n\n                showBottomPanel={showBottomPanel}\n                bottomPanelContent={bottomPanelContent}\n\n                showTopPanel={showTopPanel}\n                topPanelContent={topPanelContent}\n            &gt;\n            &lt;/CommonCanvas&gt;\n        &lt;/div&gt;\n    );\n</code></pre></p>"},{"location":"03-common-canvas/#config-objects","title":"Config objects","text":"<p>Common Canvas has five optional configuration objects. They are documented here: Config Objects</p>"},{"location":"03-common-canvas/#handlers","title":"Handlers","text":"<p>There are several optional handlers implemented as callback functions. They are documented here: Common Canvas Callbacks</p>"},{"location":"03-common-canvas/#right-flyout-panel-parameters","title":"Right-flyout panel parameters","text":"<p>The right flyout panel appears on the right of the canvas area. You can add whatever content you like to this panel. Typically, it is used to display properties of nodes on the canvas. There are two optional parameters to let you manage the right flyout panel These are:</p> <ul> <li>showRightFlyout: This can be true or false to indicate whether the flyout panel is shown or not. The default is false.</li> <li>rightFlyoutContent: content to display in the right flyout which is a JSX object. Nothing is displayed by default.</li> </ul>"},{"location":"03-common-canvas/#bottom-panel-parameters","title":"Bottom panel parameters","text":"<p>The bottom panel appears below the canvas area and between the palette and the right flyout panel. You can add whatever content you like to this panel. There are two optional parameters to let you manage the bottom panel. These are:</p> <ul> <li>showBottomPanel: This can be true or false to indicate whether the bottom panel is shown or not. The default is false.</li> <li>bottomPanelContent: content to display in the bottom panel which is a JSX object. Nothing is displayed by default.</li> </ul>"},{"location":"03-common-canvas/#top-panel-parameters","title":"Top panel parameters","text":"<p>The top panel appears below the toolbar and between the palette and the right flyout panel. You can add whatever content you like to this panel. There are two optional parameters to let you manage the top panel. These are:</p> <ul> <li>showTopPanel: This can be true or false to indicate whether the top panel is shown or not. The default is false.</li> <li>topPanelContent: content to display in the top panel which is a JSX object. Nothing is displayed by default.</li> </ul>"},{"location":"03.02-configuration/","title":"Configuration Overview","text":"<p>There are five configuration objects that can be passed as props to the <code>&lt;CommonCanvas&gt;</code> React object:</p>"},{"location":"03.02-configuration/#canvas-config","title":"Canvas Config","text":"<p>This is the main canvas configuration. It allows customization of many aspects of the flow editor, visual layout, palette and tooltips.</p>"},{"location":"03.02-configuration/#toolbar-config","title":"Toolbar Config","text":"<p>Allows customization of the toolbar including the addition of application specific buttons.</p>"},{"location":"03.02-configuration/#notification-config","title":"Notification Config","text":"<p>Allows customization of the notification panel which is displayed by clicking the notification icon on the toolbar.</p>"},{"location":"03.02-configuration/#context-menu-config","title":"Context Menu Config","text":"<p>Allows some minor customization of the options the context menus/toolbars display.</p>"},{"location":"03.02-configuration/#keyboard-config","title":"Keyboard Config","text":"<p>Allows customization of the shortcut keys supported by the flow editor.</p>"},{"location":"03.02.01-canvas-config/","title":"Canvas Config object","text":"<p>The canvas config object is optional. If it is not provided, or any of the properties within it are not provided, Common Canvas will use reasonable defaults. Here\u2019s an example of a canvas config object: <pre><code>    const commonCanvasConfig = {\n       \"enableNodeFormatType\": \"Vertical\",\n       \"enableLinkType\": \"Straight\"\n       }\n    };\n</code></pre> and this is how it is specified to Common Canvas: <pre><code>    render() {\n        return (\n            &lt;CommonCanvas\n                canvasController={this.canvasController}\n                config={commonCanvasConfig}\n            /&gt;\n        );\n    }\n</code></pre></p>"},{"location":"03.02.01-canvas-config/#nodes","title":"Nodes","text":""},{"location":"03.02.01-canvas-config/#enablenodeformattype","title":"enableNodeFormatType","text":"<p>This can be \u201cHorizontal\u201d or \u201cVertical\u201d. \u201cHorizontal\u201d is the default. \u201cHorizontal\u201d will display a node with an image and the label to the right of the image. \u201cVertical\u201d will display the node with the label underneath the image. See the node customization section for details on what this will do.</p>"},{"location":"03.02.01-canvas-config/#enablenodelayout","title":"enableNodeLayout","text":"<p>This is a simple Javascript object, the properties of which override the default node layout properties. For more details see the node customization section.</p>"},{"location":"03.02.01-canvas-config/#enableresizablenodes","title":"enableResizableNodes","text":"<p>This is a boolean. The default is false. If set to true, the user can resize nodes by dragging the edges of the node to increase or decrease the width and/or height of the node. When hovering the mouse cursor over the edge of the node the user will see a sizing cursor to indicate the resize function is available. This option works best when the node has a background rectangle that shows the extent of the sizing area.</p>"},{"location":"03.02.01-canvas-config/#enableselfreflinks","title":"enableSelfRefLinks","text":"<p>This is a boolean. The default is false. If set to true, the user is allowed to create a link that points to the node the link originated from: a loop-back link. This is created by the user by dragging from the output port on the node and dropping the new link onto the same node.</p>"},{"location":"03.02.01-canvas-config/#enablelinkdirection","title":"enableLinkDirection","text":"<p>This can be \u201cLeftRight\u201d, \u201cRightLeft\u201d, \u201cTopBottom\u201d, or \u201cBottomTop\u201d. \u201cLeftRight\u201d is the default. This alters the default location for input and output ports on the node, as follows:</p> <ul> <li>For \u201cLeftRight\u201d input ports will be on the left of the node and output ports will be on the right of the node</li> <li>For \u201cRightLeft\u201d input ports will be on the right of the node and output ports will be on the left of the node</li> <li>For \u201cTopBottom\u201d input ports will be on the top of the node and output ports will be on the bottom of the node</li> <li>For \u201cBottomTop\u201d input ports will be on the bottom of the node and output ports will be on the top of the node</li> </ul> <p>In addition to these positions, the port positions can be further customized using the nodeLayout options.</p>"},{"location":"03.02.01-canvas-config/#enableinsertnodedroppedonlink","title":"enableInsertNodeDroppedOnLink","text":"<p>This is a boolean. The default is false. If set to true, the user can drag nodes from the palette or from the canvas and drop them onto existing links in the flow. This causes the dropped node to be inserted between the two nodes joined by the link, meaning new links are created that join the new node to the previously joined nodes and the old link is removed. When the user performs the drop Common Canvas will call the editActionHandler with one of two possible commands:</p> <ul> <li>\u201ccreateNodeOnLink\u201d - when a node is being dragged from the palette leading to node creation &amp; insertion</li> <li>\u201cinsertNodeIntoLink\u201d - when an existing node is dragged from the canvas leading to insertion of the existing node into the link</li> </ul>"},{"location":"03.02.01-canvas-config/#enablepositionnodeonrightflyoutopen","title":"enablePositionNodeOnRightFlyoutOpen","text":"<p>This can be a boolean or an object. The default is false. If set to true, when the right-side flyout is open the currently selected node (assuming there is one) will be automatically positioned in the center of the viewport (canvas area). Instead of true this field can also be set to a simple JavaScript object like this <code>{ x: 30, y: 40 }</code> where x and y indicate the position where the node will be positioned as a percentage of the width and height of the viewport respectively.</p>"},{"location":"03.02.01-canvas-config/#enablehighlightnodeonnewlinkdrag","title":"enableHighlightNodeOnNewLinkDrag","text":"<p>This is a boolean. The default is false. If set to true Common Canvas will add the \u201cdata-new-link-over\u201d attribute to the node\u2019s group <code>&lt;g&gt;</code> element, when the end of a new link is dragged to be close to and over a target node. This allows applications to alter the appearance of the target node as a new link is dragged towards it.</p>"},{"location":"03.02.01-canvas-config/#enablehighlightunavailablenodes","title":"enableHighlightUnavailableNodes","text":"<p>This is a boolean. The default is false. If set to true, when the user begins to drag a new link line, Common Canvas will add a new class called <code>d3-node-unavailable</code> to all nodes which cannot accept the link as input. The class will be applied to each node\u2019s group <code>&lt;g&gt;</code> element in the DOM. This class can be used for styling the unavailable nodes as desired using CSS. The default styling will \u2018gray out\u2019 the node label, node outline rectangle (if there is one) and the node icon (provided it is an SVG image). These styles can be overridden in the applications CSS if different styling is needed. This behavior also applies if the end of a partially or fully detached link is dragged.</p>"},{"location":"03.02.01-canvas-config/#enableraisenodestotoponhover","title":"enableRaiseNodesToTopOnHover","text":"<p>This is a boolean. The default is true. If set to false the nodes will be left in their original place in the DOM. If set to true, when the user moves the mouse cursor over a node, that node will be moved in the DOM so that the node appears on top of all other nodes. This is only really noticeable if nodes, or parts of nodes, overlap other nodes. It can be useful if your nodes have protruding ports or decorations and your users sometimes position nodes very close to one another. Note: the \u2018true\u2019 setting can adversely affect the behavior of scroll areas in a node that are displayed using a React object (using the <code>nodeExternalObject</code> node layout option) because when the node is moved in the DOM the scroll area gets reset to its initial position. Set this to false if you are displaying nodes using React objects.</p>"},{"location":"03.02.01-canvas-config/#enablemovenodesonsupernoderesize","title":"enableMoveNodesOnSupernodeResize","text":"<p>This is a boolean. The default is true. If true, nodes surrounding a supernode will be moved when the supernode is expanded or manually resized so that the supernode does not overlay them. When set to false, the nodes surrounding a supernode will stay in their current positions when the supernode is expanded or manually resized. This may result in the nodes being overlaid by the supernode.</p>"},{"location":"03.02.01-canvas-config/#enabledisplayfulllabelonhover","title":"enableDisplayFullLabelOnHover","text":"<p>This is a boolean. The default is false. If set to true, any abbreviated node label will be displayed in full when the pointer hovers over the label. If set to false, abbreviated node labels will remain the same when the pointer hovers over them.</p>"},{"location":"03.02.01-canvas-config/#enablesingleoutputportdisplay","title":"enableSingleOutputPortDisplay","text":"<p>This is a boolean. The default is false. If set to true, only the last of the ports from the array of output ports will be displayed for each node. This config property is only applicable to applications with very specialized styling and handling of ports. If set to true with regular applications, it may result in a confusing display to the user. The single port is displayed at a position specified by outputPortRightPosX and outputPortRightPosY layout properties. For exmaple: <pre><code>config = {\n    enableSingleOutputPortDisplay: true,\n    enableNodeLayout: {\n      outputPortRightPosX: 0,\n      outputPortRightPosY: 20\n};\n</code></pre></p>"},{"location":"03.02.01-canvas-config/#links","title":"Links","text":""},{"location":"03.02.01-canvas-config/#enablelinktype","title":"enableLinkType","text":"<p>This can be \u201cCurve\u201d, \u201cElbow\u201d, \u201cParallax\u201d or \u201cStraight\u201d. \u201cCurve\u201d is the default. This will set the link style used to connect nodes.</p>"},{"location":"03.02.01-canvas-config/#enablelinkmethod","title":"enableLinkMethod","text":"<p>This can be: \u201cPorts\u201d or \u201cFreeform\u201d. The default is \u201cPorts\u201d. When set to \u201cPorts\u201d, each link will be drawn from a specific output port on the source node to a specific input port on the target node. Note: With this option, links will be drawn to the port locations even if the port display has been switched off by the application. When set to \u201cFreeform\u201d links will be drawn from the source node to the taget node ignoring where ports have been positioned. Applications displaying freeform links usually choose not to display input and output ports.</p>"},{"location":"03.02.01-canvas-config/#enablestraightlinksasfreeform","title":"enableStraightLinksAsFreeform","text":"<p>This is a boolean. The default is true. If set to true then, when <code>enableLinkType</code> is set to \u201cStraight\u201d, <code>enableLinkMethod</code> will always be treated as if it is set to \u201cFreeform\u201d. If it is set to false, Common Canvas will use whatever value is specified in <code>enableLinkMethod</code> when <code>enableLinkType</code> is set to \u201cStraight\u201d.</p> <p>This config field was introduced to enforce the earlier Elyra Canvas behavior, where \u201cStraight\u201d links are automatically displayed as \u201cFreeform\u201d.</p> <p>enableStraightLinksAsFreeform - deprecated</p> <p>This field is deprecated and will be removed in the next major Elyra Canvas version so it is recommeneded that applications using \u201cStraight\u201d links explicitely set <code>enableLinkMethod</code> to \u201cFreeform\u201d now because that will be mandatory when migrating to the next verion.</p>"},{"location":"03.02.01-canvas-config/#enablelinkselection","title":"enableLinkSelection","text":"<p>This can be: \u201cNone\u201d, \u201cLinkOnly\u201d, \u201cHandles\u201d or \u201cDetachable\u201d. The default is \u201cNone\u201d. These have the following affect on the canvas:</p> <ul> <li>\u201cNone\u201d - no selection of links is possible however user can right click on a link to get a context menu.</li> <li>\u201cLinkOnly\u201d - a link may be selected and added to the set of currently selected objects (nodes and/or comments).</li> <li>\u201cHandles\u201d - This includes the \u201cLinkOnly\u201d function. In addition, when a link is selected a handle (either a circle or an image) is displayed at the start and end of the link. The link handle can be dragged to a new node/port position to rewire the flow.</li> <li> <p>\u201cDetachable\u201d - This includes the \u201cLinkOnly\u201d and \u201cHandles\u201d function. In addition, this option enables detachable links for the canvas. This means a link can exist either:</p> <ul> <li>between a source node and an arbitrary point on the canvas (semi-detached) OR</li> <li>between an arbitrary point on the canvas and a target node (semi-detached) OR</li> <li>between two arbitrary points on the canvas (detached)</li> </ul> <p>Additionally, \u201cDetachable\u201d mode, allows:</p> <ul> <li>semi-detached or fully-detached links to be stored in and retrieved from the pipeline flow document.</li> <li>semi-detached or fully-detached links to be manipulated with link handles. The link handles can be used to drag the end of the link away from its connecting source or target nodes and onto the canvas. Or semi-detached or fully detached links can be reattached to nodes/ports.</li> <li>a new detached link to be created by drawing out a new link from a node and dropping it onto the canvas.</li> <li>palette and canvas nodes, when they are dragged, to be dropped onto the ends of detached links to automatically attach them to the node being dragged.</li> </ul> </li> </ul>"},{"location":"03.02.01-canvas-config/#enablelinkreplaceonnewconnection","title":"enableLinkReplaceOnNewConnection","text":"<p>This is a boolean. The default is false. If set to true, the user can drag a new connection to a target node, and if the input port on the target node has a maximum cardinality of one AND there is currently a connection to that port, the existing connection will be removed and the new connection is created; essentially this gesture replaces the existing link with the new one. If set to false the new connection will not be completed and the existing link will remain in place.</p> <p>When set to true and a link is replaced, Common Canvas will call the <code>beforeEditActionHandler</code> the <code>editActionHandler</code> callback functions, if either are provided by the host application, with a <code>data</code> object parameter with the <code>editType</code> field set to <code>\"linkNodesAndReplace\"</code>.</p>"},{"location":"03.02.01-canvas-config/#enableassoclinkcreation","title":"enableAssocLinkCreation","text":"<p>This is a Boolean. The default is <code>false</code>. If set to <code>true</code> it changes the nature of links that are created between nodes as follows:</p> <ul> <li>The user is able to pull out a link from either port on the node and drag it to another node</li> <li>When a link is completed an <code>association</code> link is created rather than the regular data flow link that is created when this field is set to <code>true</code>. Association links describe an association between pairs of nodes and do not indicate any kind of data flow between those nodes.</li> </ul>"},{"location":"03.02.01-canvas-config/#enableassoclinktype","title":"enableAssocLinkType","text":"<p>This can be \u201cStraight\u201d or \u201cRightSideCurve\u201d. The default it \u201cStraight\u201d. This field changes the way association links are drawn on the canvas.</p>"},{"location":"03.02.01-canvas-config/#enablelinksovernodes","title":"enableLinksOverNodes","text":"<p>This is a boolean. The default value is <code>false</code>. If set to <code>true</code> links are placed above nodes in the canvas. Hover over nodes/links would still have links above nodes if <code>enableLinksOverNodes</code> is set to <code>true</code>. This is useful if the ports are positioned within the boundaries of the node and the link lines need to be displayed to those positions.</p>"},{"location":"03.02.01-canvas-config/#comments","title":"Comments","text":""},{"location":"03.02.01-canvas-config/#enablemarkdownincomments","title":"enableMarkdownInComments","text":"<p>This is a boolean. The default is false. When set to true the user may enter markdown syntax into comments on the canvas when in edit mode for the comment. When the editing ends, the comment is shown in presentation mode and the markdown syntax is converted to HTML which is displayed in the comment and is styled by CSS.</p>"},{"location":"03.02.01-canvas-config/#toolbar","title":"Toolbar","text":""},{"location":"03.02.01-canvas-config/#enabletoolbarlayout","title":"enableToolbarLayout","text":"<p>This can be: \u201cTop\u201d or \u201cNone\u201d. The default is \u201cTop\u201d. \u201cTop\u201d displays a toolbar at the top of the canvas area. See the Toolbar Config docs for details on how to customize the toolbar. \u201cNone\u201d stops the toolbar from appearing.</p>"},{"location":"03.02.01-canvas-config/#tips","title":"Tips","text":""},{"location":"03.02.01-canvas-config/#tipconfig","title":"tipConfig","text":"<p>This is a simple JavaScript object that configures whether tips for palette items, nodes, ports, links, decorations or the state tag are enabled (value set to true) or disabled (value set to false). By default, all tips are enabled. The following would switch off tips for ports and links. <pre><code>       \"tipConfig\": {\n           \"palette\": true,\n           \"nodes\": true,\n           \"ports\": false,\n           \"links\": false,\n           \"decorations\": true,\n           \"stateTag\": true\n       }\n</code></pre> The tips displayed by the palette can be further refined. For example, this would prevent tips for palette categories from being displayed, but would still display tips for node templates in the categories: <pre><code>       \"tipConfig\": {\n           \"palette\": {\n              \"categories\": false,\n              \"nodeTemplates\": true\n           },\n           \"nodes\": true,\n           \"ports\": false,\n           \"links\": false,\n           \"decorations\": true,\n           \"stateTag\": true\n       }\n</code></pre></p> <p>Note: The default content of tips can be overwritten by implementing the Tip Handler callback.</p>"},{"location":"03.02.01-canvas-config/#context-toolbar","title":"Context Toolbar","text":""},{"location":"03.02.01-canvas-config/#enablecontexttoolbar","title":"enableContextToolbar","text":"<p>This is a boolean. The default is false. When set to true, Common Canvas will display a context toolbar instead of a context menu for performing actions on canvas objects. A context toolbar is a small toolbar that appears above nodes, links and comments as the mouse cursor is hovered over them. The toolbar shows icons for actions the user is most likely to want to perform on the object. An overflow icon is displayed which, when clicked, shows a menu of additional actions. A context toolbar for the canvas background can also be displayed by right-clicking on the background. Common Canvas will display default context toolbars for nodes, links comments and the canvas background however, the default actions can be customized by implementing the Context Menu Handler` callback.</p>"},{"location":"03.02.01-canvas-config/#palette","title":"Palette","text":""},{"location":"03.02.01-canvas-config/#enablepalettelayout","title":"enablePaletteLayout","text":"<p>This can be: \u201cModal\u201d or \u201cFlyout\u201d or \u201cNone\u201d. The default is \u201cFlyout\u201d. \u201cFlyout\u201d displays a panel on the left side of the canvas containing the palette icons and \u201cModal\u201d shows the palette icons in a dialog window. \u201cNone\u201d stops the palette from appearing.</p>"},{"location":"03.02.01-canvas-config/#enableautolinkonlyfromselnodes","title":"enableAutoLinkOnlyFromSelNodes","text":"<p>This is a boolean. The default is false. When set to true the auto-add function (where double clicking a node in the palette automatically adds it to the canvas) will only link up nodes when a node is already selected on the canvas and then, only if the selected node can be linked to the node that was double clicked. If false, the auto-add function will make a best guess at which node the double-clicked node should be added to.</p>"},{"location":"03.02.01-canvas-config/#enablepaletteheader","title":"enablePaletteHeader","text":"<p>This is a JSX object that will displayed in an open, wide palette. It is positioned below the Seach bar and above the categories and nodes. The default is null, which means nothing will be displayed. This option can be used by the application to add application specific function into the palette, for example, a button could be added.</p>"},{"location":"03.02.01-canvas-config/#enablenarrowpalette","title":"enableNarrowPalette","text":"<p>This is a boolean.  true is the default.  If true when the palette is closed the narrow palette will be shown.  When false the palette completely closes.</p> <p>paletteInitialState - deprecated</p> <p>Deprecated \u2013 This option is deprecated and will be removed soon.  Use <code>CanvasController.openPalette()</code> to display an opened palette at start-up. This <code>openPalette()</code> can be called immediately after creating the canvas controller.</p> <p>paletteInitialState is a boolean. false is the default. If set to true the palette will be opened when Common Canvas first appears to its full (non-narrow) state.</p>"},{"location":"03.02.01-canvas-config/#zoom-scale-and-pan","title":"Zoom (scale and pan)","text":""},{"location":"03.02.01-canvas-config/#enablesavezoom","title":"enableSaveZoom","text":"<p>This can be: \u201cNone\u201d, \u201cLocalStorage\u201d or \u201cPipelineflow\u201d. The default is \u201cNone\u201d.</p> <ul> <li>\u201cNone\u201d - When the canvas is zoomed, the zoom (scale and x/y pan) are not saved anywhere so if the canvas is closed and reopened it reopens with the default zoom which is a scale of 1 and x/y pan values of 0.</li> <li>\u201cLocalStorage\u201d - The zoom for the canvas is stored in the browser\u2019s local storage and will be reapplied to the canvas each time that canvas is shown in that browser. This applies to sub-flows, when the user displays them full-screen, as well as the primary flow. Sub-flows and the primary flow each have their own zoom amounts stored in local storage. Note: Zoom amounts stored in local storage can be cleared from storage by calling the <code>canvasController.clearSavedZoomValues()</code> API method.</li> <li>\u201cPipelineflow\u201d - The zoom is serialized into the pipeline flow document and when a pipeline flow document is provided to Common Canvas through the API the zoom will be applied to the canvas display. Zoom amounts can be stored for both primary and sub pipelines. (See the pipelineFlow schema specification).</li> </ul>"},{"location":"03.02.01-canvas-config/#enablepanintoviewonopen","title":"enablePanIntoViewOnOpen","text":"<p>This can be either true or false. The default is false. If set to true, the canvas will be panned so as much of the canvas area (the area containing the nodes and comments) is visible in the viewport as possible. This will only happen when enableSaveZoom === \u201cNone\u201d or if there is no saved zoom available either in local storage (when enableSaveZoom === \u201cLocalStorage\u201d) or in the pipelineFlow (when enableSaveZoom === \u201cPipelineflow\u201d).</p>"},{"location":"03.02.01-canvas-config/#enablezoomintosubflows","title":"enableZoomIntoSubFlows","text":"<p>This is a boolean. The default is false. When set to true, Common Canvas will override the maximum zoom extent value which, by default is used for the entire canvas, to allow the user to zoom in on in-place sub-flows further than they can do on containing flows. This means the user can zoom in on multi-nested sub-flows so they are easier to view. To see this effect, the user must position the mouse pointer over the sub-flow before performing the zoom gesture.</p>"},{"location":"03.02.01-canvas-config/#canvas-content","title":"Canvas Content","text":""},{"location":"03.02.01-canvas-config/#emptycanvascontent","title":"emptyCanvasContent","text":"<p>This is a JSX or HTML snippet that contains some text or any elements (such as an image) that you want to display when the canvas is empty, that is, when it doesn\u2019t have any nodes or comments. The default behavior if this config parameter is not provided is that Common Canvas will display an image and message saying: \u201cYour flow is empty!\u201d.</p>"},{"location":"03.02.01-canvas-config/#dropzonecanvascontent","title":"dropZoneCanvasContent","text":"<p>This is a JSX or HTML snippet that contains some text or any elements (such as an image) that you want to display when a data object is dragged from the desktop over the canvas. The default behavior if this config parameter is not provided is that Common Canvas will display an image and a  message saying: \u201cDrop to add to canvas and project\u201d. The content will not be displayed unless the <code>enableDropZoneOnExternalDrag</code> configuration parameter (see above) is set to true.</p>"},{"location":"03.02.01-canvas-config/#enabledropzoneonexternaldrag","title":"enableDropZoneOnExternalDrag","text":"<p>This is a boolean. The default is false. If set to true a graphic overlay will be displayed over the canvas when a data object icon is dragged from the desktop over the canvas. The default graphic overlay will be an image and a  message saying: \u201cDrop to add to canvas and project\u201d unless the <code>dropZoneCanvasContent</code> configuration parameter is provided.</p> <p>See the Dragging an object from the desktop section for details on how to handle the drop of an external object onto the canvas.</p>"},{"location":"03.02.01-canvas-config/#enablestatetag","title":"enableStateTag","text":"<p>This can be either \u201cNone\u201d, \u201cLocked\u201d or \u201cReadOnly\u201d. The default is \u201cNone\u201d. When set to either \u201cLocked\u201d or \u201cReadOnly\u201d, a \u2018state tag\u2019 object will be shown permanently over the top of the canvas. The state tag will be positioned in the center and towards the top of the canvas. The state tag consists of a black background rectangle with rounded corners overlaid with an icon and a text label. A tooltip is displayed when the mouse pointer is hovered over the state tag. The icon, label and default tooltip will be set appropriately based on the value (\u201cLocked\u201d or \u201cReadOnly\u201d) for this setting. The host application can override the tooltip by implementing the Tip Handler callback.</p>"},{"location":"03.02.01-canvas-config/#canvas-operation","title":"Canvas Operation","text":""},{"location":"03.02.01-canvas-config/#enablekeyboardnavigation","title":"enableKeyboardNavigation","text":"<p>This can be either true or false. The default is false. If set to true, the user can use the keyboard to move the keyboard focus around the Common Canvas interface and perform actions on the flow objects using shortcut keys.</p>"},{"location":"03.02.01-canvas-config/#enableinteractiontype","title":"enableInteractionType","text":"<p>This can be \u201cMouse\u201d, \u201cCarbon\u201d or \u201cTrackpad\u201d. The default is \u201cMouse\u201d. \u201cTrackpad\u201d has been deprecated and will be removed in the future.</p> <ul> <li> <p>With this set to \u201cMouse\u201d the following interaction is enabled:</p> <ul> <li>Zoom canvas = Rotate mouse wheel. (Can be simulated with a trackpad with two finger up and down scroll)</li> <li>Pan canvas = Left mouse key down on canvas background + drag. (Can be simulated with a trackpad with press down on trackpad and drag.)</li> <li>Region select on canvas = Shift key + left mouse key down on canvas background + drag. (Can be simulated with a trackpad with Shift + finger down on trackpad + drag across canvas background)</li> </ul> </li> <li> <p>With this set to \u201cCarbon\u201d the following interaction is enabled:</p> <ul> <li>Zoom canvas = Rotate mouse wheel. (Can be simulated with a trackpad with two finger up and down scroll)</li> <li>Pan canvas = Press and hold space bar then left mouse key down on canvas background + drag. (Can be simulated with a trackpad by press and hold space bar then press down on trackpad and drag.)</li> <li>Region select on canvas = Left mouse key down on canvas background + drag. (Can be simulated with a trackpad with press down on trackpad and drag.)</li> </ul> </li> <li> <p>This setting is now deprecated With this set to \u201cTrackpad\u201d the following interactions are enabled:</p> <ul> <li>Zoom canvas = Two finger pinch or two finger spread gesture. (Can be simulated with a mouse as follows: Ctrl + rotate mouse wheel.)</li> <li>Pan canvas = Two finger horizontal or vertical scroll gesture. (Can be simulated with a mouse as follows: Vertical pan is rotate mouse wheel; Horizontal pan is Shift + rotate mouse wheel)</li> <li>Region select on canvas = Finger down + drag. (Can be simulated with a mouse as follows: Left button down + drag on canvas background)</li> </ul> </li> </ul>"},{"location":"03.02.01-canvas-config/#enableparentclass","title":"enableParentClass","text":"<p>This is a string which is a class name. The default is empty string. If a class name is provided it is applied to the top-most DOM element for Common Canvas. This can be used to make you CSS override rules more specific which means they will be used in preference to any default styles. For example, if you specify \u201cmy-app-styles\u201d for this field then CSS like this: <pre><code>    .my-app-styles .d3-node-body-outline {\n        fill: orange;\n    }\n</code></pre> will override the style from the common-canvas CSS <pre><code>    .d3-node-body-outline {\n        fill: white;\n    }\n</code></pre></p>"},{"location":"03.02.01-canvas-config/#enabledragwithoutselect","title":"enableDragWithoutSelect","text":"<p>This can be either true or false. The default is false. If set to true, the user can drag and drop a single node or a single comment without that gesture removing selection on any other nodes or comments. If the node being dragged was selected prior to the drag gesture then it and any other objects that are currently selected will be moved. With this parameter set to false (or missing) a drag and drop gesture will select the node or comment being dragged and will deselect any currently selected objects.</p>"},{"location":"03.02.01-canvas-config/#enableeditingactions","title":"enableEditingActions","text":"<p>This is a boolean. The default is true. If set to false, various editing actions on the canvas will be prevented, as follows:</p> <ol> <li> <p>Nodes cannot be created on the canvas using any of the following:</p> <p>(a) dragging and dropping a node template from the palette onto the canvas or</p> <p>(b) dragging and dropping an object onto the canvas from outside the canvas area, such as a file being dragged from the computer desktop onto the canvas (see note below), or</p> <p>(c) double clicking a node in the palette to create a node</p> <p>Note: It is not possible for Common Canvas to prevent an object being dragged from the computer desktop to the canvas so it is recommended the drop zone (which provides visual feedback about the drop) should be switched off by setting the enableDropZoneOnExternalDrag config field to <code>false</code>.</p> </li> <li> <p>Nodes and comments cannot be dragged and moved.</p> </li> <li>The end points of Links, when enableLinkSelection is set to <code>\"Detachable\"</code> or <code>\"Handles\"</code>, cannot be dragged and moved.</li> <li>Links from nodes and comments cannot be created by dragging from the port object on the source node or comment to the target node.</li> <li>Comments, node labels and text decorations cannot be edited, neither by clicking the edit icon (which does not appear) nor by double clicking the text.</li> <li> <p>Context menu options that alter the canvas objects will be removed from the context menu before it is displayed by Common Canvas. The options that will be removed are:</p> Option Text Action Identifier New Comment createComment Disconnect disconnectNode Edit-&gt;Cut cut Edit-&gt;Copy copy Edit-Paste paste Undo undo Redo redo Delete deleteSelectedObjects Create supernode createSuperNode Create external supernode createSuperNodeExternal Deconstruct supernode deconstructSuperNode Collapse supernode collapseSuperNodeInPlace Expand supernode expandSuperNodeInPlace Convert external to local convertSuperNodeExternalToLocal Convert local to external convertSupernodeLocalToExternal Delete deleteLink Save to palette saveToPalette <p>If your application adds its own editing actions to the context menu your code must remove them if they are not needed in some situations (e.g. you are displaying a read-only canvas).</p> </li> <li> <p>Any default toolbar actions (tools) that alter the canvas objects will be disabled regardless of their specified enablement status. These actions are:</p> Default Tooltip Action Undo undo Redo redo Cut cut Copy copy Paste paste Delete deleteSelectedObjects New comment createAutoComment Arrange Horizontally arrangeHorizontally Arrange Vertically arrangeVertically </li> <li> <p>Keyboard shortcuts that alter the canvas will not work. These are:</p> Shortcut Action delete delete Ctrl/Cmd + x cut Ctrl/Cmd + c copy Ctrl/Cmd + v paste Ctrl/Cmd + z undo Ctrl/Cmd + Shift + z redo Ctrl/Cmd + y redo </li> <li> <p>The browser\u2019s Edit menu options (cut, copy, paste) will not work with the canvas objects regardless of the setting for enableBrowserEditMenu.</p> </li> </ol>"},{"location":"03.02.01-canvas-config/#enableimagedisplay","title":"enableImageDisplay","text":"<p>This can be set to: \u201cSVGInline\u201d, \u201cLoadSVGToDefs\u201d or \u201cSVGAsImage\u201d. The default is \u201cSVGInline\u201d. This field controls the display of SVG image files (that is, files with a <code>.svg</code> extension) on the canvas, such as those displayed for node icons or decoration images. This option can be useful to improve performance when images are repeated a large number of times on the canvas and particularly when the browser cache is disabled. Note: this does not affect the display behavior of non-SVG files which are always displayed inside an <code>&lt;image&gt;</code> tag. The behavior for SVG image files is as follows:</p> <ul> <li>\u201cSVGInline\u201d - This is the default. With this setting, the image file is read in \u2013 from the server or cache (if available) \u2013 and the SVG tags within the file displayed in-line in the DOM. This means elements within the SVG can be customized using CSS on a node-by-node basis.</li> <li>\u201cLoadSVGToDefs\u201d - With this option, each unique SVG file is read from the server (or cache) and written into a <code>&lt;symbol&gt;</code> element within the <code>&lt;defs&gt;</code> element of the canvas SVG area. A <code>&lt;use&gt;</code> element is then written to the place in the DOM for each place where the image should be displayed. Using this option means the SVG file for each image is only read once which should improve performance if images are repeated a lot on the canvas. However, it does limit the customization possibilities for the images on a node-by-node basis. Customization colors can be passed into the images using CSS inheritance, or the <code>currentColor</code> keyword, provided there are no internal classes applied to the elements in the SVG.</li> <li>\u201cSVGAsImage\u201d - This option causes the SVG file to be displayed within an <code>&lt;image&gt;</code> element in the DOM. The file loading is handled internally by the browser. Again, with this option customization capabilities on a node-by-node basis are limited. Customization colors can be passed into the images using CSS inheritance, or the <code>currentColor</code> keyword, provided there are no internal classes applied to the elements in the SVG.</li> </ul>"},{"location":"03.02.01-canvas-config/#enableinternalobjectmodel","title":"enableInternalObjectModel","text":"<p>This is a boolean. The default is <code>true</code>. It is recommended you leave this set to <code>true</code>. If you set this to <code>false</code> your code will be responsible for handling the object model, which is NOT recommended. When set to <code>false</code>, changes are not automatically saved into the common-canvas object model and are not reflected in the canvas display. Consequently, the application is expected to listen to events and update the common-canvas object model using the canvas-controller API if it want visual changes to the canvas.</p>"},{"location":"03.02.01-canvas-config/#enablerightflyoutundertoolbar","title":"enableRightFlyoutUnderToolbar","text":"<p>This is a boolean. The default is false. If set to true the right flyout panel, when opened, will appear below the toolbar and will not cause the toolbar to compress. The default behavior is that the right flyout panel, when opened, will appear at the side of the toolbar and will compress the space available for the toolbar to be displayed. Warning: the notifications panel which is tied to the notifications icon in the toolbar will appear over the top of the right-side flyout with this option set to true.</p>"},{"location":"03.02.01-canvas-config/#enablerightflyoutdragtoresize","title":"enableRightFlyoutDragToResize","text":"<p>This is a boolean. The default is false. If set to true, the right flyout panel can be resized by dragging its left border. When hovering over the left border of the flyout, the cursor will change to indicate that resizing is possible. Users can drag the border to adjust the width of the flyout, allowing it to expand or collapse. This functionality offers more flexible layout options for the user. If set to false, the right-flyout panel, when open, will be displayed with a default width and cannot be resized by dragging its edge. The application can add its own sizing function if required.</p>"},{"location":"03.02.01-canvas-config/#enableleftflyoutundertoolbar","title":"enableLeftFlyoutUnderToolbar","text":"<p>This is a boolean. The default is false. If set to true the left flyout panel, when opened, will appear below the toolbar and will not cause the toolbar to compress. The default behavior is that the left flyout panel, when opened, will appear at the side of the toolbar and will compress the space available for the toolbar to be displayed.</p>"},{"location":"03.02.01-canvas-config/#enableexternalpipelineflows","title":"enableExternalPipelineFlows","text":"<p>This is a boolean. The default is false. If true, the context menu will include a <code>Create External Supernode</code> option when a set of objects are selected from which a supernode can be created.</p> <p>Waring: The host application must implement some of the common-canvas callbacks for external pipeline flow support to work correctly. See the section on External Pipeline Flow support for more details.</p>"},{"location":"03.02.01-canvas-config/#enablesnaptogridtype","title":"enableSnapToGridType","text":"<p>This can be: \u201cNone\u201d, \u201cDuring\u201d or \u201cAfter\u201d. The default is \u201cNone\u201d.</p> <ul> <li>\u201cNone\u201d - there is no snap to grid and objects can be moved to any position on the canvas.</li> <li>\u201cDuring\u201d - when nodes or comments are moved or sized, the objects snap to an imaginary grid while the objects are being dragged or sized. This gives a somewhat jerky effect as the move or size is happening but has the advantage of telling the user exactly where the object will be when they release the mouse button to end the action.</li> <li>\u201cAfter\u201d - nodes or comments snap to a grid when the drag or size event ends. This gives a smooth dragging and sizing effect but the user does not see the final position until they release the mouse button at the end of the action. By default the canvas uses reasonable values for the grid increments.</li> </ul>"},{"location":"03.02.01-canvas-config/#enablesnaptogridx","title":"enableSnapToGridX","text":"<p>This optional value overrides the default horizontal increment of the snap-to-grid grid. It can be either a numeric value which is a number of pixels or it can be a numeric value followed by a % sign (e.g. \u201c25%\u201d) which indicates the grid will be a percentage of the default node width. Its default is dependent on whatever is set for enableNodeFormatType. That is for \u201cHorizontal\u201d it will be \u201c20%\u201d and for \u201cVertical\u201d it will be \u201c25%\u201d.</p>"},{"location":"03.02.01-canvas-config/#enablesnaptogridy","title":"enableSnapToGridY","text":"<p>This optional value overrides the default vertical increment of the snap-to-grid grid. It can be either a numeric value which is a number of pixels or it can be a numeric value followed by a % sign (e.g. \u201c25%\u201d) which indicates the grid will be a percentage of the default node height. Its default is dependent on whatever is set for enableNodeFormatType. That is for \u201cHorizontal\u201d it will be \u201c33.33%\u201d and for \u201cVertical\u201d it will be \u201c20%\u201d.</p>"},{"location":"03.02.01-canvas-config/#enableautolayoutverticalspacing","title":"enableAutoLayoutVerticalSpacing","text":"<p>This is the spacing in pixels which is used to separate nodes vertically when either the vertical or horizontal auto layout action is used.</p>"},{"location":"03.02.01-canvas-config/#enableautolayouthorizontalspacing","title":"enableAutoLayoutHorizontalSpacing","text":"<p>This is the spacing in pixels which is used to separate nodes horizontally when either the vertical or horizontal auto layout action is used. For horizontal auto layout, Common Canvas may override this value if it decides that more space is needed to prevent connecting lines from doubling back on themselves.</p>"},{"location":"03.02.01-canvas-config/#enablebrowsereditmenu","title":"enableBrowserEditMenu","text":"<p>This is a boolean.  true is the default.  If true, the Cut/Copy/Paste items in the Browser\u2019s <code>Edit</code> menu, including keyboard input for those actions, can be used for performing those actions on objects (e.g. Nodes) in the canvas. When false, those items in the Browser\u2019s edit menu, including keyboard input for those actions, will not work for objects in the canvas. This will not prevent those actions working in the canvas when, say, invoked with the toolbar or canvas context menus, but this property can be used if the keyboard input for those actions into the canvas is disabled for Common Canvas using the Keyboard Config object.</p>"},{"location":"03.02.01-canvas-config/#schemavalidation","title":"schemaValidation","text":"<p>This is a boolean. false is the default. It tells Common Canvas whether you want pipleineFlow and palette objects to be validated against the schema files when they are submitted to the canvas controller, using the <code>setPipelineFlow(pFlow)</code> or <code>setPipelineFlowPalette(palette)</code> methods. If any validation errors are found messages are displayed in the browser console. It is recommended this option be set to true during development and testing but switched off in production since schema validation can be somewhat slow for large objects.</p>"},{"location":"03.02.02-toolbar-config/","title":"Toolbar Config object","text":"<p>The canvas toolbar config object is optional. If it is not provided Common Canvas will display a reasonable default toolbar.</p> <p></p> <p>If the toolbar config is provided, it configures which action buttons and dividers are shown in the toolbar. A toolbar will be displayed for Common Canvas if the canvas configuration field <code>enableToolbarLayout</code> is set to \u201cTop\u201d (which is the default).</p> <p>The toolbar config object specifies actions for the left and right side of the toolbar. The application can also optionally tell the toolbar not to handle the enable/disable state for the standard toolbar buttons using <code>overrideAutoEnableDisable</code>.</p> <p>When the user clicks one of the action buttons the action will be performed either by Common Canvas or by the application, if it is an applicaiton specific action. In both cases, Common Canvas will call the beforeEditActionHandler and editActionHandler callbacks.</p> <p>The toolbar supports a number of keyboard shortcuts for accessibility</p> <p>The <code>leftBar</code> and <code>rightBar</code> fields contain an array of action objects: one element for each toolbar item. Here is an example, toolbar configuration object:</p> <p><pre><code>    import { Bookmark } from \"@carbon/react/icons\";\n    ...\n    ...\n    const toolbarConfig = {\n        leftBar: [\n            { action: \"undo\", label: \"Undo\" },\n            { action: \"redo\", label: \"Redo\" },\n            { divider: true },\n            { action: \"cut\", label: \"Cut\" },\n            { action: \"copy\", label: \"Copy\" },\n            { action: \"paste\", label: \"Paste\" },\n            { divider: true },\n            { action: \"createAutoComment\", label: \"Add Comment\", enable: true },\n            { action: \"deleteSelectedObjects\", label: \"Delete\" },\n            { action: \"arrangeHorizontally\", label: \"Arrange Horizontally\", enable: true }\n            { divider: true },\n            { action: \"myBookmrk\", label: \"Add bookmark\", enable: true, iconEnabled: (&lt;Bookmark size={32}/&gt;) }\n        ],\n        rightBar: [\n            { action: \"stop\", label: \"Stop Execution\", enable: false },\n            { divider: true },\n            { action: \"run\", label: \"Run Pipeline\", enable: false }\n        ],\n        overrideAutoEnableDisable: false\n    };\n    ...\n    ...\n    return &lt;CommonCanvas toolbarConfig={toolbarConfig} canvasController={canvasController}/&gt;\n</code></pre> Where:</p> <ul> <li> <p>leftBar - an array of action items to specify what is displayed on the left side of the toolbar.</p> </li> <li> <p>rightBar - an array of action items to specify what is displayed on the right side of the toolbar. If this is omitted, Common Canvas will automatically populate the right side of the toolbar with zoom-in, zoom-out, and zoom-to-fit actions. To suppress these right side actions, specify the <code>rightBar</code> field as an empty array or an array containing the actions required on the right.</p> </li> <li> <p>overrideAutoEnableDisable - a boolean. The default is false. By default Common Canvas has an auto-enablement feature that controls the enablement of common tools in the toolbar based on user actions (e.g enable the <code>Delete</code> icon when items are selected). If <code>overrideAutoEnableDisable</code> set to true it will switch off the auto-enablement feature. This is useful if the host application wants to disable all the nodes under certain circumstances. If set to true, the <code>enable</code> property in the action items for each tool is used to decide whether to display the icon as enabled or disabled. If set to false or omitted, Common Canvas will handle the auto-enablement of common actions. (See the <code>action</code>section below for more details.)</p> </li> </ul> <p>The toolbar will display the objects in the same order they are defined in the leftBar and rightBar arrays.</p>"},{"location":"03.02.02-toolbar-config/#toolbar-action-object-definition","title":"Toolbar action object definition","text":"<p>Here is an example of an action object which must contain a unique <code>action</code> field as a minimum. <pre><code>    {\n        action: \"run\",\n        label: \"Run\",\n        enable: true,\n        iconEnabled: \"/image/myOwnEnabledIcon.svg\",\n        iconDisabled: \"/image/myOwnDisabledIcon.svg\",\n        incLabelWithIcon: \"before\",\n        kind: \"primary\",\n        tooltip: \"Run the flow\",\n        isSelected: false\n    }\n</code></pre></p> <ul> <li> <p>action - a unique identifier string which is the name of the action to be performed. This action name will set in the <code>editType</code> field of the <code>data</code> parameter passed into the beforeEditActionHandler and editActionHandler callback methods. The application can use these callbacks to detect what action the user clicked in the toolbar.</p> <p>The toolbar supports two types of action:</p> <ul> <li> <p>Internal actions -  These are requested by the application by specifying one of the reserved internal actions names. These actions are performed internally by Common Canvas. A default icon will be provided by Common Canvas for the most popular actions. For example, if the <code>deleteSelectedObjects</code> action is specified a trash can icon will be displayed in the toolbar and any selected objects will be deleted from the flow editor when the action is clicked. The application can override the default icon by specifying the <code>iconEnabled</code> field.</p> <p>Disablement of these built in actions is also handled by Common Canvas: \u201cundo\u201d, \u201credo\u201d, \u201ccut\u201d, \u201ccopy\u201d, \u201cpaste\u201d, \u201cdeleteSelectedObjects\u201d, \u201ccreateAutoComment\u201d, \u201carrangeHorizontally\u201d \u201carrangeVertically\u201d, \u201czoomIn\u201d, \u201czoomOut\u201d, \u201czoomToFit\u201d.</p> <p>For example, when no canvas objects are selected the <code>deleteSelectedObjects</code> action (trash can icon) will be automatically disabled.</p> <p>The application can switch off this automatic enable/disable function by setting <code>overrideAutoEnableDisable</code> field in the toolbar config to <code>true</code>. When <code>overrideAutoEnableDisable</code> set to true, the <code>enable</code> field in each action object will set the enablement appearance of the item.</p> </li> <li> <p>External actions - These are specified by the application and must be handled by the application in the beforeEditActionHandler and editActionHandler callbacks. An icon must be specified for these actions. The application can use icons imported from the Carbon Icon library. For example, in the sample code above <code>myBookmrk</code> has been specified as a external action with the Carbon <code>Bookmark</code> icon specified.  Common Canvas will ignore this action when the button is clicked and pass it through in the <code>data.editType</code> field to the editActionHandler callback.</p> </li> </ul> </li> <li> <p>label - a short string or a JSX object that describes the action. This is used as the tooltip text or is (optionally) displayed next to the icon if <code>incLabelWithIcon</code> is specified.</p> </li> <li> <p>enable - A boolean. The action button is clickable when set to true. If false, the button will be disabled. If not set, it will default to disabled (false). If <code>overrideAutoEnableDisable</code> is set to false, or omitted, this field is ignored for the standard action items (like cut, copy, paste) because Common Canvas handles their enable/disable appearance. If <code>overrideAutoEnableDisable</code> is set to true, this field will be used for standard action items.</p> <p> </p> </li> <li> <p>iconEnabled - specifies the icon to display when <code>enable</code> is true. Common Canvas will provide icons for some of the reserved internal actions so the application doesn\u2019t need to specify <code>iconEnabled</code> or <code>iconDisabled</code> for them:</p> <p>It can be either:</p> <ul> <li>a string containing the path to a custom SVG file to display or</li> <li>a JSX expression, for example <code>(&lt;Edit32 /&gt;)</code> where Edit32 is an icon imported from carbon icons. It is recommended to only pass very simple JSX expressions.</li> </ul> </li> <li> <p>iconDisabled - specifies the icon to display when <code>enable</code> is false. If <code>iconDisabled</code> is not specified <code>iconEnabled</code> will be used instead. It can be omitted for any of the standard actions (see <code>iconEnabled</code> above).</p> <p>It can be either:</p> <ul> <li>a string containing the path to a custom SVG file to display or</li> <li>a JSX expression, for example <code>(&lt;Edit32 /&gt;)</code> where Edit32 is an icon imported from carbon icons. It is recommended to only pass very simple JSX expressions.</li> </ul> </li> <li> <p>incLabelWithIcon - can be set to \u201cno\u201d, \u201cbefore\u201d or \u201cafter\u201d. The default is \u201cno\u201d. This field specifies whether the label should be displayed in the toolbar with the icon and if so, where it is displayed with respect to the icon.</p> <p> </p> </li> <li> <p>kind - can be set to \u201cdefault\u201d, \u201cprimary\u201d, \u201cdanger\u201d, \u201csecondary\u201d, \u201ctertiary\u201d or \u201cghost\u201d. The default it \u201cdefault\u201d. These give the action the same styling as the equivalent kind\u2019s of buttons in the carbon library.</p> <p></p> </li> <li> <p>tooltip - A string or JSX object. The tooltip that will be displayed for the action. If this is not provided the label will be displayed as the tooltip instead.</p> </li> <li> <p>isSelected - A boolean. When set to true the toolbar button displays a selection highlight. This is displayed as either a blue bar along the bottom border of buttons in the toolbar</p> <p> </p> <p>or a checkmark for items that appear in sub-menus.</p> <p></p> <p>When applied This is useful for implementing a button that switches on and off a mode, as opposed to a regular button which does not have any state.</p> <p>This property can also be used to indicate a current state between a number of mutually exclusive settings. In this case, one button would be added to the toolbar for each setting and then the <code>isSelected</code> property would be set to true for the setting that is currently active. Then, when the user clicks a different option in the set, the application code would set <code>isSelected</code> to true for that button and set it to false for the previously selected button. (This would give behavior like a radio button set.)</p> </li> <li> <p>className - This a string that will be appended to the <code>class</code> field for the top-level <code>&lt;div&gt;</code> that surrounds the action button. This can be used to set application-specific CSS for the button.</p> </li> <li> <p>textContent - This is an additional string that will be displayed on top of the action button. It can be used to specify adittional information to enahance the icon. For example, a count of messages could be displayed over a icon that, when clicked, shows a messages panel.</p> </li> </ul>"},{"location":"03.02.02-toolbar-config/#automatic-toolbar-items","title":"Automatic toolbar items","text":"<p>Two toolbar items are automatically added to the toolbar:</p> <ul> <li>A palette action which is used for opening and closing the palette. This is added to the left side of the toolbar if the <code>enablePaletteLayout</code> field is set to either \u201cFlyout\u201d (the default) or \u201cModal\u201d in the canvas configuration.</li> <li>A notification panel action which is used to open and close the notifications panel. This will be added to the right side of the toolbar if a notification configuration object is specified to the <code>&lt;CommonCanvas&gt;</code> react object.</li> </ul> <p>The position and a subset of fields for these items can be customized by providing an appropriate object in either the leftBar or rightBar arrays. The <code>action</code> field for the items should be either \u201ctogglePalette\u201d or \u201ctoggleNotificationPanel\u201d. Any of the following fields can be optionally provided to override the default values: label, iconEnabled, incLabelWithIcon and tooltip.</p> <p>For example, if the application provides the following in, say, the leftBar array:  <pre><code>   import { AddAlt, SubtractAlt, Notification } from \"@carbon/react/icons\";\n   ...\n\n   const toolbarConfig = {\n       leftBar: [\n           ...\n           { action: \"togglePalette\",\n             label: this.canvasController.isPaletteOpen() ? \"Close Palette\" : \"Open Palette\",\n              iconEnabled: this.canvasController.isPaletteOpen() ? (&lt;SubtractAlt /&gt;) : (&lt;AddAlt /&gt;),\n              incLabelWithIcon: \"after\" },\n           { divider: true },\n           { action: \"toggleNotificationPanel\", iconEnabled: (&lt;Notification /&gt;) },\n           ...\n       ]\n   };\n</code></pre></p> <p>Will look like this:</p> <p></p>"},{"location":"03.02.02-toolbar-config/#sub-area-properties","title":"Sub-area properties","text":"<p>The toolbar button can show a \u2018sub-area\u2019 below the button when the button is clicked. This can be either a sub-menu which is a list of text options or a sub-panel which is a small window that can show whatever the application wants such as settings or messages.</p> <ul> <li> <p>subMenu - Specify either this or the <code>subPanel</code> field. This is an array of action objects (the same as those specified for the toolbar) which will displayed as a menu of options that appears under the icon on the toolbar.</p> <p>This code:</p> <p><pre><code>import { TextScale } from \"@carbon/react/icons\";\n...\nconst subMenuTextSize = [\n    { action: \"title\", label: \"Title\", enable: true },\n    { action: \"header\", label: \"Header\", enable: true },\n    { action: \"subheader\", label: \"Subheader\", enable: true },\n    { action: \"body\", label: \"Body\", enable: true }\n];\n...\nconst toolbarConfig = {\n  leftBar: [\n    ...\n    { action: \"text-size-submenu\", incLabelWithIcon: \"after\", iconEnabled: (&lt;TextScale size={32} /&gt;),\n          label: \"Text Size\", enable: true, subMenu: subMenuTextSize, closeSubAreaOnClick: true\n    }\n    ...\n  ]\n}\n</code></pre> will display this:</p> <p></p> <p>when the user clicks the options in the menu the associated action will be executed by calling the beforeEditActionHandler and editActionHandler callbacks.</p> </li> <li> <p>subPanel - Specify either this or the <code>subMenu</code> field. This is a React object that will render the contents of a panel that appears under the action icon.</p> <p>This code:</p> <p><pre><code>import { Settings } from \"@carbon/react/icons\";\n...\nconst toolbarConfig = {\n  leftBar: [\n    ...\n      { action: \"settingspanel\", iconEnabled: (&lt;Settings /&gt;), label: \"Settings\", enable: true,\n        subPanel: AppSettingsPanel,\n        subPanelData: { saveData: (settings) =&gt; window.alert(\"Settings: \" + settings) }\n      }\n    ...\n  ]\n}\n</code></pre> where this is the AppSettingsPanel class</p> <p>will display this:</p> <p></p> </li> <li> <p>subPanelData - This is a JavaScript object that will be passed as one of the props into the React object specified in the <code>subPanel</code> field. The application can use this to pass into the <code>subPanel</code> class any data or callback functions needed for the panel to do its job.</p> </li> <li> <p>purpose - can be set to \u201csingle\u201d or \u201cdual\u201d.  The default is \u201csingle\u201d. If set to \u201cdual\u201d the button will have two parts. The icon will be displayed to the left and to the right will be an up/down chevron icon. If the user clicks the icon on the left the action specified in the <code>action</code> field will be executed. If the user clicks the chevron a panel will be displayed below the chevron with the contents that are specified in the object specified in the <code>subPanel</code> field.</p> <p>This code:</p> <pre><code>const toolbarConfig = {\n  leftBar: [\n    ...\n      { action: \"undo\", label: \"Undo\", enable: true, purpose: \"dual\",\n          subPanel: MultiCommandPanel, subPanelData: {} }\n    ...\n  ]\n}\n</code></pre> <p>where this is the MultiCommandPanel class</p> <p>will display this:</p> <p></p> </li> <li> <p>closeSubAreaOnClick - This is a boolean. The default is <code>false</code>. If set to <code>true</code> the sub-area will be close when sany element in it is clicked. This behavior might be useful if the sub-area displays a menu of options where only a single click on one of them is required.</p> </li> </ul>"},{"location":"03.02.02-toolbar-config/#toolbar-divider-object-definition","title":"Toolbar divider object definition","text":"<p>Dividers can be added to separate groups of actions from other actions. This is displayed as a thin gray line. The divider object has one attribute: <pre><code>    {\n       divider: true\n    }\n</code></pre></p> <ul> <li>divider - To show a divider in the toolbar, add an object with <code>divider</code> attribute set to true.</li> </ul>"},{"location":"03.02.02-toolbar-config/#advanced-jsx-actions","title":"Advanced: JSX actions","text":"<p>Regular toolbar buttons, explained above, are displayed as set of Carbon <code>Button</code>s. If the application needs to display something not wrappered in a button, you can provide your own JSX to display in the toolbar. Be aware however that, because of the way the toolbar is designed, there are restrictions on what the toolbar can do to display your JSX. For example, it cannot display anything with a height greater than the toolbar height.</p> <p>If you provide your own JSX object it is displayed in a simple <code>div</code> in the toolbar. Some attributes are applied to the <code>div</code> to allow the action to work correctly within the toolbar - these cannot be changed.  You are responsible for styling your JSX object to get it to appear the way you want.</p> <p>Also be aware that, if the width of the toolbar reduces (maybe by the user sizing the page) your action may get moved into the overflow menu. It is also your responsibility to style the button so it appears as you want in the overflow menu as well as in the toolbar.</p> <p>The JSX can be provided in the <code>jsx</code> field. Here is an example. The only other fields that are recognized with the <code>jsx</code> field are <code>action</code> and <code>tooltip</code>, all other fields will be ignored.</p> <pre><code>    {\n       action: \"custom-loading\",\n       jsx: (&lt;div style={{ padding: \"0 11px\" }}&gt;&lt;InlineLoading\n                status=\"active\" description=\"Loading...\" /&gt;&lt;/div&gt;),\n       tooltip: \"Loading the thing you wanted.\"\n    }\n</code></pre> <ul> <li> <p>action - a unique identifier and the name of the action to be performed.</p> </li> <li> <p>jsx - A JSX object or a funciton returning a JSX object. This will be displayed as the action in the toolbar.</p> <p>To make the JSX object accessible inside the toolbar this field should be provided as a function. The function will pass a <code>tabIndex</code> field which should be set into the tabIndex property of the display object being created (see expample below). Additionally, the display object should have the `className set to \u201ctoolbar-jsx-obj\u201d (see example below).</p> </li> <li> <p>tooltip - A string or JSX object. This will be displayed as the tooltip for the action in the toolbar. If <code>tooltip</code> is omitted no tooltip will be added to your action. If <code>tooltip</code> is specified the <code>jsx</code> will be inside a tooltip <code>div</code> which is in the toolbar <code>div</code> mentioned above.</p> </li> </ul> <p>For example, the following code that includes some Carbon React components: <pre><code>toolbarConfig = {\n    leftBar: [\n        {\n            action: \"custom-loading\",\n            tooltip: \"A custom loading!\",\n            jsx: (tabIndex) =&gt; (\n                &lt;div style={{ padding: \"4px 11px\" }}&gt;\n                    &lt;InlineLoading status=\"active\" description=\"Loading...\"\n                        className={\"toolbar-jsx-obj\"}\n                        tabIndex={tabIndex}\n                    /&gt;\n                &lt;/div&gt;\n            )\n        },\n        { divider: true },\n        {\n            action: \"custom-dropdown\",\n            tooltip: () =&gt; (this.suppressTooltip ? null : \"A drop down using the overflow menu!\"),\n            jsx: (tabIndex) =&gt; (\n                &lt;div className=\"toolbar-custom-button\"&gt;\n                    &lt;OverflowMenu\n                        id={\"ovf1\"}\n                        renderIcon={TextScale32}\n                        iconDescription={\"\"}\n                        onOpen={() =&gt; (\n                            this.suppressTooltip = true)\n                        }\n                        onClose={() =&gt; {\n                            this.suppressTooltip = false;\n                            window.alert(\"Option selected\");\n                        }}\n                        className={\"toolbar-jsx-obj\"}\n                        tabIndex={tabIndex}\n                    &gt;\n                        &lt;OverflowMenuItem itemText=\"Big\" /&gt;\n                        &lt;OverflowMenuItem itemText=\"Medium\" /&gt;\n                        &lt;OverflowMenuItem itemText=\"Little\" /&gt;\n                  &lt;/OverflowMenu&gt;\n                &lt;/div&gt;\n            )\n        }\n    ]\n};\n</code></pre></p> <p>will display this:</p> <p></p> <p>Deprecated toolbar config</p> <p>The old toolbar configuration is still supported for now (but is deprecated). This allows the config to be provided as an array that defines just the left side of the toolbar. The right side will always show the zoom actions (zoomIn, zoomOut, zoomToFit) and a notifications panel icon (if a notification configuration object is provided in the <code>&lt;CommonCanvas&gt;</code> React object). These right side actions will always show on the right-hand side of the toolbar and are handled internally by the canvas. The entries in the array follow the same definition as described above. Note: there is no need to provide a <code>palette</code> action in the array because a palette icon and following divider will automatically be added to the toolbar when a palette is specified for the canvas.</p> <p>An example of the toolbar config array should look like this: <pre><code>const toolbarConfig = [\n   { action: \"stop\", label: \"Stop Execution\", enable: false },\n   { action: \"run\", label: \"Run Pipeline\", enable: false },\n   { action: \"undo\", label: \"Undo\", enable: true },\n   { action: \"redo\", label: \"Redo\", enable: true },\n   { action: \"cut\", label: \"Cut\", enable: false },\n   { action: \"copy\", label: \"Copy\", enable: false },\n   { action: \"paste\", label: \"Paste\", enable: false },\n   { action: \"createAutoComment\", label: \"Add Comment\", enable: true },\n   { action: \"deleteSelectedObjects\", label: \"Delete\", enable: true },\n   { action: \"arrangeHorizontally\", label: \"Arrange Horizontally\", enable: true }\n];\n</code></pre></p>"},{"location":"03.02.03-notification-config/","title":"Notification Config object","text":"<p>The Notification Config object specifies the appearance of the notifications panel. If a Notification Config is passed to Common Canvas a notifications button will be shown on the far right of the canvas toolbar. When clicked, the button opens the Notificaiton Panel.</p> <p>For information about the structure of notification messages, refer to the Notification Messages page. Messages can be added and removed from the notification panel by calling the notification methods in the canvas-controller..</p> <p>The Notification Config object looks like this: <pre><code>    const notificationConfig = {\n       action: \"notification\",\n       label: \"Notifications\",\n       enable: true,\n       notificationHeader: \"Notification Messages\",\n       notificationSubtitle: \"subtitle\",\n       emptyMessage: \"You don't have any notifications right now.\",\n       clearAllMessage: \"Clear all\",\n       keepOpen: true,\n       clearAllCallback: () =&gt; { console.log(\"Clear All clicked\"); }\n    };\n</code></pre></p> <ul> <li> <p>action - \u201cnotification\u201d enables the notifications button to appear in the far right of the toolbar.</p> </li> <li> <p>label - the Tooltip label to display for the notifications button in the toolbar.</p> </li> <li> <p>enable - Toolbar button will have hover effect and is clickable when set to true. If false, the button will be disabled and unclickable. If not set, it will default to disabled (enable: false)</p> </li> <li> <p>notificationHeader - String to display in the notification panel header. If not set, it will default to \u201cNotifications\u201d.</p> </li> <li> <p>notificationSubtitle - String to be displayed as a sub-title in the panel header. If not set, panel header will be sized to only contain the <code>notificationHeader</code> string.</p> </li> <li> <p>emptyMessage - String to be displayed when there are no notification messages to display.</p> </li> <li> <p>clearAllMessage - String to be displayed on a button displayed at the bottom of the panel. The button can be clicked to clear all the messages from the panel. If omitted the button, and the footer area of the panel it appears in, will not be displayed.</p> </li> <li> <p>keepOpen - A boolean which indicates when the panel will close. The default is false. If set to false, the panel will close when the user clicks on the page somewhere outside the panel. If set to true the panel will remain open when the user clicks somewhere on the page outside of the panel. With the option the user must click the <code>x</code> icon in the top right of the panel, or click the notification toolbar icon, to close the panel.</p> </li> <li> <p>clearAllCallback - An optional callback function that will be called every time the \u201cclear all\u201d button is clicked.</p> </li> <li> <p>secondaryButtonLabel - Label for the optional secondary button to be displayed in the notification panel. Both <code>secondaryButtonLabel</code> and <code>secondaryButtonCallback</code> must be specified for the button to appear.</p> </li> <li>secondaryButtonCallback - A callback function that will be called when the secondary button is clicked.</li> <li>secondaryButtonDisabled - Specify whether the secondary button is disabled or not.</li> </ul>"},{"location":"03.02.04-context-menu-config/","title":"Context Menu Config object","text":"<p>The context menu config object configures whether certain actions are available in the default context menu.</p> <pre><code>    const contextMenuConfig = {\n       enableCreateSupernodeNonContiguous: false,\n       defaultMenuEntries: {\n          saveToPalette: true,\n          createSupernode: false,\n          displaySupernodeFullPage: true,\n          colorBackground: false\n       }\n    };\n</code></pre> <ul> <li> <p>enableCreateSupernodeNonContiguous - Allows the creation of supernodes from non-contiguous nodes. When set to <code>true</code>, the \u201cCreate supernode\u201d menu item will be added to the default context menu when the currently selected nodes are contiguous or non-contiguous. When set to <code>false</code>, the \u201cCreate supernode\u201d menu item is only added to the default context menu when the selected nodes are contiguous. The default value is <code>false</code>.</p> </li> <li> <p>defaultMenuEntries - Controls what entries are generated in the default context menu generated by Common Canvas. This has the following properties:</p> <ul> <li>\u2018saveToPalette\u2019 - This is a boolean. The default is false. If set to true, Common Canvas will add a \u2018Save to palette\u2019 option to the default node context menu.</li> <li>\u2018createSupernode\u2019 - This is a boolean. The default is true. If set to false, Common Canvas will not show the \u2018Create Supernode\u2019 option in the default context menu for nodes.</li> <li>\u2018displaySupernodeFullPage\u2019 - This is a boolean. The default is true. If set to false, Common Canvas will not show the \u2018Display full page\u2019 option in the default context menu for supernodes. When true, the option will be displayed. Clicking that option navigates the user to the full page view of the supernode\u2019s pipeline as if the user had clicked the expansion icon of the expanded in-place supernode view.</li> <li>\u2018colorBackground\u2019 - This is a boolean. The default is true. If set to false, Common Canvas will not show the \u2018Color background\u2019 option in the default context menu for comments. When true, the option will be displayed.</li> </ul> </li> </ul> <p>[Note: If any host app wants more control over the default context menu here, please open an issue.]</p>"},{"location":"03.02.05-keyboard-config/","title":"Keyboard Config object","text":"<p>The keyboard config object configures whether certain actions are available from the keyboard when focus is on the flow editor. See the Keyboard Support section for what key combinations are supported.</p> <p><pre><code>    const keyboardConfig = {\n       actions: {\n          delete: false,\n          undo: false,\n          redo: false,\n          selectAll: false,\n          deselectAll: false,\n          cutToClipboard: false,\n          copyToClipboard: false,\n          pasteFromClipboard: false\n    };\n</code></pre> All actions are <code>true</code> by default so it is only necessary to specify those actions you don\u2019t want as <code>false</code>.</p>"},{"location":"03.03-callbacks/","title":"Callbacks Overview","text":"<p>You can optionally provide callback listeners.  These will be called when the user interacts with the canvas and allows your application to perform processing specific to your application\u2019s needs based on user interactions. If you don\u2019t implement any of the callbacks, Common Canvas will perform appropriate actions if necessary.</p> <p>These listeners are as follows:</p>"},{"location":"03.03-callbacks/#context-menu-handler","title":"Context Menu Handler","text":"<p>Overrides or adds to the default context menu (or context toolbar) displayed for nodes, links, comments, etc.</p>"},{"location":"03.03-callbacks/#before-edit-action-handler","title":"Before Edit Action Handler","text":"<p>Called for each edit action on the canvas. It is called before the internal object model has been updated and the edit action has completed, so this can be used to cancel user actions if necessary.</p>"},{"location":"03.03-callbacks/#edit-action-handler","title":"Edit Action Handler","text":"<p>Called for each edit action on the canvas. It is called after the internal object model has been updated and the edit action has completed.</p>"},{"location":"03.03-callbacks/#layout-handler","title":"Layout Handler","text":"<p>Allows the application to override layout settings for nodes on a node-by-node basis.</p>"},{"location":"03.03-callbacks/#decoration-action-handler","title":"Decoration Action Handler","text":"<p>Called whenever the user clicks on a decoration which has its <code>hotspot</code> field set to <code>true</code>.</p>"},{"location":"03.03-callbacks/#tip-handler","title":"Tip Handler","text":"<p>Allows the application to override the tips displayed for canvas objects such as nodes and links.</p>"},{"location":"03.03-callbacks/#id-generator-handler","title":"ID Generator Handler","text":"<p>Called whenever a new object is created and allows the application to specify its own IDs for canvas objects.</p>"},{"location":"03.03-callbacks/#selection-change-handler","title":"Selection Change Handler","text":"<p>Called whenever the set of selected objects changes.</p>"},{"location":"03.03-callbacks/#click-action-handler","title":"Click Action Handler","text":"<p>Called whenever something is clicked, double-clicked or right-clicked on the canvas. This can be used, for example, to open a properties window when a node is double clicked.</p>"},{"location":"03.03-callbacks/#action-label-handler","title":"Action Label Handler","text":"<p>Allows the application to override labels displayed for command actions that are shown for undo and redo actions.</p>"},{"location":"03.03.01-context-menu-handler/","title":"Context Menu Handler","text":"<p>This callback is optional. You don\u2019t need to implement anything for it. If implemented, it must return an array of actions that describe what options are displayed in the Context Menu or Context Toolbar.</p> <p>If this callback is not provided Common Canvas will handle context menu/toolbars, and their actions, internally. You only need to implement this callback if you want to add or remove options to/from the context menu/toolbar or provide your own menus in place of the default ones.</p>"},{"location":"03.03.01-context-menu-handler/#when-is-it-called","title":"When is it called","text":""},{"location":"03.03.01-context-menu-handler/#for-context-menu","title":"For Context Menu","text":"<p>This callback will be called if the <code>enableContextToolbar</code> canvas config option is set to <code>false</code> (which is the default) and when the user performs a context menu gesture, such as mouse \u2018right click\u2019 or clicking an ellipsis icon, on a:</p> <ul> <li>Node</li> <li>Link</li> <li>Comment</li> <li>Port</li> <li>The canvas background or</li> <li>Combination of objects - if a number of objects are selected<ul> <li>Note: With multiple selected objects, the convention is that a context menu/toolbar should display actions that are applicable to all the objects that are selected, rather than just the object for which the menu was requested.</li> </ul> </li> </ul>"},{"location":"03.03.01-context-menu-handler/#for-context-toolbar","title":"For Context Toolbar","text":"<p>This callback will be called if the <code>enableContextToolbar</code> canvas config option is set to <code>true</code> and when the mouse cursor is hovered over any of the objects mentioend above.</p>"},{"location":"03.03.01-context-menu-handler/#contextmenuhandler","title":"contextMenuHandler","text":"<pre><code>    contextMenuHandler(source, defaultMenu)\n</code></pre>"},{"location":"03.03.01-context-menu-handler/#source-parameter","title":"\u2018source\u2019 parameter","text":"<p>The source object passed in looks like this: <pre><code>    {\n      type: \"node\",\n      targetObject: {&lt;object_info&gt;},\n      selectedObjectIds: [\"node_1\", \"node_2\"],\n      mousePos: {x: \"10\", y:\"20\"}\n    }\n</code></pre> type - Indicates the type of object for which the context menu was selected. Can be \u201cnode\u201d, \u201cinput_port\u201d, \u201coutput_port\u201d, \u201clink\u201d, \u201ccanvas\u201d or \u201ccomment\u201d</p> <p>targetObject - The object for which the context menu was requested. Not provided when type is \u201ccanvas\u201d.</p> <p>selectedObjectIds -  An array containing the IDs of all currently selected nodes and/or comments and/or links.</p> <p>mousePos - An object containing the coords of the mouse when the context menu was requested</p>"},{"location":"03.03.01-context-menu-handler/#defaultmenu-parameter","title":"\u2018defaultMenu\u2019 parameter","text":"<p>This is an array describing the default menu that Common Canvas would usually display. If necessary, you can modify this array with your own elements or remove elements and then return the modified array. Alternatively, you can ignore this parameter and just return your own array.</p>"},{"location":"03.03.01-context-menu-handler/#return-array-for-context-menus","title":"Return array for Context Menus","text":"<p>The callback must return an array, that describes the context menu to be displayed. If the callback returns a null, then no menu/toolbar will be displayed.</p> <p>There is one element in the array for each entry in the context menu. An entry can be either a context menu item, which consists of a label and an action, or a divider. An action can be disabled by setting the \u2018enable\u2019 field to false.</p> <p>Here\u2019s an example of a contextMenuHandler:</p> <pre><code>    contextMenuHandler(source, defaultMenu) {\n        if (source.type === \"node\") {\n            return [\n                { action: \"deleteSelectedObjects\", label: \"Delete\" },\n                { divider: true},\n                { action: \"myApp_Action1\", label: \"My Action\" },\n                { action: \"paste\", label: \"Paste from clipboard\", enable: false }\n            ];\n        }\n        return defaultMenu;\n    }\n</code></pre> <p>The above array will produce a context menu like this:</p> <p></p>"},{"location":"03.03.01-context-menu-handler/#customizing-the-default-context-menu","title":"Customizing the default context menu","text":"<p>If you want to simply add your action to the default context menu provided by Common Canvas you can take the defaultMenu parameter provided to the callback, and add your menu item to it. Alternatively, you can provide a complete new context menu of your own.</p> <p>Here is a sample implementation of contextMenuHandler, which takes a source object (described above) and the defaultMenu as parameters, and adds a custom action to the default menu when the user \u2018right clicks\u2019 the canvas background.</p> <pre><code>    contextMenuHandler(source, defaultMenu) {\n        let customMenu = defaultMenu;\n        if (source.type === \"canvas\") {\n            customMenu = customMenu.concat({ action: \"myApp_Action1\", label: \"My Action\" });\n        }\n        return customMenu;\n    }\n</code></pre>"},{"location":"03.03.01-context-menu-handler/#return-array-for-context-toolbar","title":"Return array for Context Toolbar","text":"<p>To display a context toolbar the same type of array is returned as described above for context menu. However, there are some extra fields for the action elements in the array. These are</p> <p>isToolbarItem - This is a boolean. The default is false. If set to true the action will be added to the toolbar and if set to false the action will be displayed in the overflow menu.</p> <p>icon - This is the icon to display for the action. If <code>isToolbarItem</code> is set to true you must provide an icon otherwise the action will show as an empty space in the toolbar. If an icon is specified and <code>isToolbarItem</code> is set to false, the icon will be displayed next to the action in the overflow menu.  For many internal actions, Common Canvas will automatically display an appropriate  Carbon icon. See the Internal Actions page for a list of actions that have associated icons.</p> <p>Dividers can also be added to the context toolbar by specifying \u2018toolbarItem: true\u2019</p> <p><pre><code>  import { Add } from \"@carbon/react/icons\";\n\n  ...\n\n  contextMenuHandler(source, defaultMenu) {\n        if (source.type === \"node\") {\n            return [\n                { action: \"deleteSelectedObjects\", label: \"Delete\", toolbarItem: true },\n                { divider: true, toolbarItem: true },\n                { action: \"myAction1\", label: \"My Action1\", toolbarItem: true, icon: (&lt;Add /&gt;) },\n                { action: \"disconnectNode\", label: \"Disconnect\", enable: false },\n                { action: \"cut\", label: \"Cut\" },\n                { action: \"copy\", label: \"Copy\" }\n            ];\n        }\n        return defaultMenu;\n    }\n</code></pre> This will produce a context toolbar like this:</p> <p></p> <p>And when the overflow icon is clicked, like this:</p> <p></p>"},{"location":"03.03.01-context-menu-handler/#warning","title":"Warning","text":"<p>The contents of the context toolbar is dependent on which object the mouse cursor is currently hovering over (which may be different to any of the currently selected objects). You should make sure the actions you return in the array are applicable to the object the mouse cursor is hovering over or, if it is hovering over a selected object and other objects are also selected, to the set of selected objects.</p> <p>To help decide whether the mouse cursor is hovering over a selected object or not, the application can call the canvas controller\u2019s helper function: \u2018isContextToolbarForNonSelectedObj(source)\u2019. This will return true if the mouse cursor is over a non-selected object.</p>"},{"location":"03.03.01-context-menu-handler/#actions","title":"Actions","text":"<p>When the user clicks an action in the menu the action is executed either internally or externally.</p>"},{"location":"03.03.01-context-menu-handler/#internal-acitons","title":"Internal acitons","text":"<p>Internal actions are implemented inside Common Canvas, like \u201cdeleteSelectedObjects\u201d in the example above. Common Canvas supports a large number of internal actions.</p>"},{"location":"03.03.01-context-menu-handler/#external-actions","title":"External actions","text":"<p>External actions are custom actions you want Common Canvas to display for your application like \u201cmyApp_Action1\u201d, in the example above. Tip: To avoid any future name clashes with internal actions that might be added it is recommended you should make sure you action names are unique. For example, by adding a prefix to your application specfic actions.</p>"},{"location":"03.03.01-context-menu-handler/#handling-actions","title":"Handling actions","text":"<p>When the user clicks an option in the context menu (or context toolbar) it causes the Before Edit Action Handler and then the Edit Action Handler callbacks to be called.</p>"},{"location":"03.03.02-before-edit-action-handler/","title":"Before Edit Action Handler","text":"<p>This callback is optional. It is called before user actions are completed, so it provides the opportunity for the application to alter or cancel an action before it is applied to the object model and reflected in the flow editor display.</p>"},{"location":"03.03.02-before-edit-action-handler/#beforeeditactionhandler","title":"beforeEditActionHandler","text":"<p><pre><code>    beforeEditActionHandler(data, command)\n</code></pre> You don\u2019t need to implement anything for it but if you do implement it you must return either a data object or null. This callback is called in all the same instances where the editActionHandler is called. The difference is that this callback is called before the internal object model is updated. This gives your application the opportunity to examine the action that is about to be performed and either: let it continue; modify it and let it continue; or cancel it.</p> <p>This callback is provided with two parameters: <code>data</code> and <code>command</code>.</p> <ol> <li>data parameter - this is the same as the data object described for <code>editActionHandler</code> (see above)</li> <li>command parameter - typically this will be null but for <code>undo</code> operations (that is where data.editType === \u201cundo\u201d) this will be the command that is about to be undone. For <code>redo</code> operations (that is where data.editType === \u201credo\u201d) this will be the command that is about to be redone.</li> </ol> <p>This callback must return either the data object that was passed in or null. <code>beforeEditActionHandler</code> will behave as follows based on what is returned:</p> <ul> <li>If the data object is returned unmodified: the action will be performed as normal.</li> <li>If the data object is returned modified: the action will be performed based on the modified data object. This means your application can alter the behavior of the action that will be performed. For example, you could intercept a <code>createNode</code> command and change the label for the new node in the nodeTemplate to something different. Then when the node is created the new label will be used. It is recommended you be very very careful when updating this object since there is no error checking in Common Canvas to ensure you modified the object correctly.</li> <li>If <code>null</code> is returned: the action will be cancelled and not performed on the internal object model nor will <code>editActionHandler</code> be called.</li> </ul> <p>If you need to do any asynchronous activity in the beforeEditActionHandler callback you can:</p> <ul> <li>Return null from the callback - which will cancel the current action</li> <li>Do your asynchronous activity. While this is happening, the user ought to be prevented from modifying the canvas so you should display some sort of progress indicator or modal dialog to inform the user that some activity is occurring.</li> <li>Then call <code>CanvasController.editActionHandler(data)</code> passing in the <code>data</code> object as a parameter with the modified properties. This will then execute the action as before. Note: This means the <code>beforeEditActionHandler</code> will be called a second time so be sure you put in a check to make sure you don\u2019t get into a loop.</li> </ul>"},{"location":"03.03.03-edit-action-handler/","title":"Edit Action Handler","text":"<p>This callback is optional. You don\u2019t need to implement anything for it and it doesn\u2019t return anything. It is called whenever the user does the following gestures on the canvas:</p> <ul> <li>Clicks a tool/icon in the toolbar.</li> <li>Clicks an option in the context menu or context toolbar</li> <li>Presses a key combination on the keyboard to cause the canvas to change.</li> <li>Performs some direct manipulation on the canvas such as:<ul> <li>Create a node</li> <li>Moves one or a set of nodes/comments</li> <li>Edits a comment</li> <li>Links two nodes together</li> <li>etc</li> </ul> </li> </ul> <p>These is will either perform one of the many internal actions supported by Common Canvas or the application\u2019s own external actions, if they have been added to the context menu/toolbar or the main canvas toolbar.</p>"},{"location":"03.03.03-edit-action-handler/#editactionhandler","title":"editActionHandler","text":"<pre><code>    editActionHandler(data, command)\n</code></pre> <p>This callback is called after the common-canvas internal object model has been updated.  This callback is provided with two parameters: <code>data</code> and <code>command</code>.</p> <ol> <li>data parameter - This is the data for the initial request create by whatever action the user performed. The data fields can vary depending on the action. Here is an example: <pre><code>    {\n      editType: \"createComment\",\n      editSource: \"contextmenu\",\n      selectedObjects: [],\n      selectedObjectIds: [],\n      offsetX: 100,\n      offsetY: 42\n    }\n</code></pre></li> </ol> <ul> <li> <p>editType - This is the action that originates from either the toolbar, context menu, keyboard action or direct manipulation on the canvas. If you specified your own action in the context menu or in the toolbar this field will be your action\u2019s name.</p> </li> <li> <p>editSource - This is the source of the action. It can be set to \u201ctoolbar\u201d, \u201ccontextmenu\u201d, \u201ckeyboard\u201d or \u201ccanvas\u201d (for an action caused by direct manipulation on the canvas).</p> </li> <li> <p>selectedObjects - An array of the currently selected objects.</p> </li> <li> <p>selectedObjectIds - An array of the IDs of currently selected objects. Included for backward compatibility.</p> </li> <li> <p>Other fields - Numerous other fields which vary based on the action and the source of the action.</p> </li> </ul> <ol> <li> <p>command parameter - This is a Javascript class which is the command object that was executed to run the action \u2018requested\u2019 by the user and added to the command stack. The command object may contain fields which are the result of executing the command. For example, when the user creates a new node on the canvas the \u2018createNode\u2019 action will be performed and the command parameter in <code>editActionHandler</code> will contain a field called <code>newNode</code> which is the node that was created on the canvas.</p> <p>If the user performed an <code>undo</code> action this will be the command that has been undone. If the user performed a <code>redo</code> action this will be the command that was redone.</p> </li> </ol>"},{"location":"03.03.03-edit-action-handler/#handling-external-actions","title":"Handling external actions","text":"<p>If you specified your application\u2019s own \u2018external\u2019 action you can do whatever is necessary in this callback.</p> <p>The <code>editType</code> field of the first parameter, passed in to the callback, will be set to the action name.</p> <p>Here\u2019s a simple expmple:</p> <pre><code>    editActionHandler(data, command) {\n        if (data.editType === \"myAction\") {\n            // Execute my action code here.\n        }\n    }\n</code></pre>"},{"location":"03.03.04-layout-handler/","title":"Layout Handler","text":"<p>This is an optional handler you don\u2019t need to implement anything for it unless you want to. The layoutHandler callback, when provided, is called for each node on the canvas and allows the application to customize the node layout properties on a node-by-node basis.</p>"},{"location":"03.03.04-layout-handler/#layouthandler","title":"layoutHandler","text":"<p><pre><code>    layoutHandler(data)\n</code></pre>  The callback should return a JavaScript object whose properties will override the default properties for node layout. The callback is provided with a parameter <code>data</code> which is the node object. Your code can look at the node properties and decide which properties it needs to override. This can be used to change the node shape, styling and position and size of node elements like the image, main label etc.</p> <p>For more details see the Node Customization section for more details.</p>"},{"location":"03.03.05-decoration-action-handler/","title":"Decoration Action Handler","text":"<p>Decorations are small images that can be displayed on or near to your nodes and links. They can be for display only or actionable (so the user can click on them). See the canvas JSON schema for information on how to define decorations for your nodes.</p> <p>This callback is called when the user clicks on an actionable decoration. You don\u2019t need to implement anything for this callback unless you added actionable decorations to your nodes. It doesn\u2019t return anything. It is called whenever the user clicks on a decoration that you added to a node in the canvas JSON.</p>"},{"location":"03.03.05-decoration-action-handler/#decorationactionhandler","title":"decorationActionHandler","text":"<pre><code>    decorationActionHandler(object, id, pipelineId)\n</code></pre> <p>It is provided with these parameters:</p> <ul> <li>object \u2013 the node or link with which the decoration is associated.</li> <li>id \u2013 the ID of the decoration that you provided in the canvas JSON or through the canvas-controller API</li> <li>pipelineId \u2013 the ID of the pipeline for the node or link.</li> </ul>"},{"location":"03.03.06-tip-handler/","title":"Tip Handler","text":"<p>This optional callback can be implemented to override the tooltip content that is displayed by default for each canvas object. It is called before tips are shown for: palette categories, palette node templates, nodes, ports, links, decorations and the state tag.</p>"},{"location":"03.03.06-tip-handler/#tiphandler","title":"tipHandler","text":"<p><pre><code>    tipHandler(tipType, data)\n</code></pre> Note: The display of tooltips (or not) can be controlled using the <code>tipConfig</code> field of the canvas config object.</p> <p>Common Canvas provides default implementations for all of the tips except for links and decorations, as follows:</p> Object Default tip behavior Palette category Contains the category name and the category description. Palette node template Contains the category name, the node type and node description. Node Contains the name, description and status icon and optionally, if the name was modified from the original name, the original node type. Port The port label is shown Link No tip is shown by default Decoration No tip is shown by default State tag An appropriate explanation for the state displayed by the tag <p>To override the content, you can return either a string or JSX object. If your code returns <code>null</code> for a particular type of tip, Common Canvas will display the default tip for that object. See App.js in the test harness code for an example tipHandler.</p> <p>Common Canvas calls the <code>tipHandler</code> callback with two parameters:</p> <ul> <li>tipType - the type of the tip</li> <li>data - an object that describes the canvas element for which the tip was requested</li> </ul> <p>Here are some specific examples:</p>"},{"location":"03.03.06-tip-handler/#palette-categories","title":"Palette categories:","text":"<ul> <li>tipType: \u201ctipTypePaletteCategory\u201d</li> <li>data: An object with category information, like this:</li> </ul> <pre><code>{\n    category: {\n        id: \"1234\",\n        label: \"Import\",\n        description: \"Category for import nodes\",\n        image: \"/images/import.svg\"\n    }\n}\n</code></pre>"},{"location":"03.03.06-tip-handler/#palette-nodes-templates","title":"Palette nodes templates:","text":"<ul> <li>tipType: \u201ctipTypePaletteItem\u201d</li> <li>data: An object with node template information: <pre><code>{\n    nodeTemplate: {\n        label: \"C50\",\n        description: \"C50 Model\",\n        operator_id_ref: \"com.ibm.commonicons.models.c50\",\n        type: \"model_node\",\n        image: \"/images/common_node_icons/models/model_c50.svg\",\n        input_ports: [{...}],\n        output_ports: []\n    }\n}\n</code></pre></li> </ul>"},{"location":"03.03.06-tip-handler/#nodes","title":"Nodes:","text":"<ul> <li>tipType: \u201ctipTypeNode\u201d</li> <li>data: An object with pipelineId and node information: <pre><code>{\n    pipelineId: \"153651d6-9b88-423c-b01b-861f12d01489\",\n    node: {\n        id: \"idGWRVT47XDV\",\n        type: \"execution_node\",\n        operator_id_ref: \"type\",\n        output_ports: [...],\n        input_ports: [...],\n        label: \"Define Types\",\n        description: \"\",\n        image: \"\",\n        x_pos: 445,\n        y_pos: 219\n    }\n}\n</code></pre></li> </ul>"},{"location":"03.03.06-tip-handler/#ports","title":"Ports:","text":"<ul> <li>tipType: \u201ctipTypePort\u201d</li> <li>data: An object with pipelineId, node and port information: <pre><code>{\n    pipelineId: \"153651d6-9b88-423c-b01b-861f12d01489\",\n    node: {\n        id: \"idGWRVT47XDV\",\n        type: \"execution_node\",\n        operator_id_ref: \"type\",\n        output_ports: [{...}],\n        input_ports: [{...}],\n        label: \"Define Types\",\n        description: \"\",\n        image: \"\",\n        x_pos: 445,\n        y_pos: 219\n    },\n    port: {\n        id: \"outPort\",\n        label: \"Output Port\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"03.03.06-tip-handler/#links","title":"Links","text":"<ul> <li>tipType: \u201ctipTypeLink\u201d</li> <li>data: An object with pipelineId and link information. <pre><code>{\n    pipelineId: \"153651d6-9b88-423c-b01b-861f12d01489\",\n    link: {\n        id: \"canvas_link_3\",\n        x1: 515,\n        y1: 248,\n        x2: 611,\n        y2: 180,\n        class_name: \"canvas-data-link\",\n        type: \"nodeLink\",\n        src: {\n            id: \"idGWRVT47XDV\",\n            type: \"execution_node\",\n            operator_id_ref: \"type\",\n            output_ports: [{...}],\n            input_ports: [{...}],\n            label: \"Define Types\",\n            description: \"\",\n            image: \"\",\n            x_pos: 445,\n            y_pos: 219\n        },\n        srcPortId: \"outPort\",\n        trg: {\n            id: \"id8I6RH2V91XW\",\n            type: \"binding\",\n            operator_id_ref: \"c50\",\n            output_ports: [],\n            input_ports: [{...}],\n            label: \"C5.0\",\n            description: \"\",\n            image: \"\",\n            x_pos: 611,\n            y_pos: 151\n        },\n        trgPortId: \"inPort\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"03.03.06-tip-handler/#decorations","title":"Decorations","text":"<ul> <li>tipType: \u201ctipTypeDec\u201d</li> <li>data: An object with pipelineId and decoration information. <pre><code>{\n    pipelineId: \"153651d6-9b88-423c-b01b-861f12d01489\",\n    decoration: {\n        \"id\": \"2016\",\n        \"position\": \"topRight\",\n        \"label\": \"LCFC\",\n        \"tooltip\": \"Foxes never quit\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"03.03.06-tip-handler/#state-tag","title":"State tag","text":"<ul> <li>tipType: \u201ctipTypeStateTag\u201d</li> <li>data: An object with pipelineId and decoration information. <pre><code>{\n    stateTagText: \"This flow is locked and cannot be edited.\",\n    stateTagType: \"Locked\"\n}\n</code></pre></li> </ul>"},{"location":"03.03.07-id-generator-handler/","title":"ID Generator Handler","text":"<p>This is an optional callback. It is called when new objects are created in the canvas and allows the application to provide its own method to generate a unique id for the object.</p>"},{"location":"03.03.07-id-generator-handler/#idgeneratorhandler","title":"idGeneratorHandler","text":"<p><pre><code>    idGeneratorHandler(action, data)\n</code></pre>  If no idGeneratorHandler is set or the method returns null, an appropriate UUID is generated by Common Canvas for each object. The callback is called with a two parameters:  * An enumerated string to describe the action being performed (create_node, create_comment, create_node_link, create_comment_link, clone_node, clone_comment, clone_node_link or clone_comment_link) and  * A JavaScript object with additional data to describe the object</p> <p>The callback should return a string containing the application\u2019s unique ID for the object. Here are more details about the different action and their parameters.</p> <ul> <li>Create node:<ul> <li>action: create_node</li> <li>data:</li> </ul> </li> </ul> <pre><code>nodeType:\n{\n   \"label\":\"C50\",\n   \"description\":\"C50 Model\",\n   \"operator_id_ref\":\"com.ibm.commonicons.models.c50\",\n   \"type\":\"model_node\",\n   \"image\":\"/images/common_node_icons/models/model_c50.svg\",\n   \"input_ports\":[\n      {\n         \"id\":\"inPort\",\n         \"label\":\"Input Port\",\n         \"cardinality\":{\n            \"min\":0,\n            \"max\":1\n         }\n      }\n   ],\n   \"output_ports\":[\n\n   ]\n}\n</code></pre> <ul> <li> <p>Create comment:</p> <ul> <li>action: create_comment</li> <li>data: n/a</li> </ul> </li> <li> <p>Create node link:</p> <ul> <li>action: create_node_link</li> <li>data:</li> </ul> </li> </ul> <pre><code>sourceNode: {\n   \"id\":\"6a547456-f1ea-48a6-9721-45d6ae70dd6b\",\n   \"label\":\"Aggregate\",\n   \"type\":\"execution_node\",\n   \"operator_id_ref\":\"com.ibm.commonicons.operations.aggregate\",\n   \"image\":\"/images/common_node_icons/operations/operation_aggregate.svg\",\n   \"class_name\":\"d3-node-body\",\n   \"input_ports\":[...],\n   \"output_ports\":[...],\n   \"x_pos\":55,\n   \"y_pos\":97.5,\n   \"inputPortsHeight\":20,\n   \"outputPortsHeight\":20,\n   \"height\":75,\n   \"width\":70\n},\ntargetNode: {\n   \"id\":\"71c96629-be46-418b-be63-0a02ef2fe2e0\",\n   \"label\":\"Append\",\n   \"type\":\"execution_node\",\n   \"operator_id_ref\":\"com.ibm.commonicons.operations.append\",\n   \"image\":\"/images/common_node_icons/operations/operation_append.svg\",\n   \"class_name\":\"d3-node-body\",\n   \"input_ports\":[...],\n   \"output_ports\":[...],\n   \"x_pos\":264,\n   \"y_pos\":83.5,\n   \"inputPortsHeight\":20,\n   \"outputPortsHeight\":20,\n   \"height\":75,\n   \"width\":70\n}\n</code></pre> <ul> <li>Create comment link:<ul> <li>action: create_comment_link</li> <li>data:</li> </ul> </li> </ul> <pre><code>comment: {\n   \"id\":\"8c81aac7-ebe5-4f96-9d63-eabc22b09635\",\n   \"class_name\":\"d3-comment-rect\",\n   \"content\":\"\",\n   \"height\":42,\n   \"width\":175,\n   \"x_pos\":50,\n   \"y_pos\":50\n},\ntargetNode: {\n   \"id\":\"71c96629-be46-418b-be63-0a02ef2fe2e0\",\n   \"label\":\"Append\",\n   \"type\":\"execution_node\",\n   \"operator_id_ref\":\"com.ibm.commonicons.operations.append\",\n   \"image\":\"/images/common_node_icons/operations/operation_append.svg\",\n   \"class_name\":\"d3-node-body\",\n   \"input_ports\":[...],\n   \"output_ports\":[...],\n   \"x_pos\":264,\n   \"y_pos\":83.5,\n   \"inputPortsHeight\":20,\n   \"outputPortsHeight\":20,\n   \"height\":75,\n   \"width\":70\n}\n</code></pre> <ul> <li>Clone node: triggered when copying &amp; pasting a node<ul> <li>action: clone_node</li> <li>data:</li> </ul> </li> </ul> <pre><code>node: {\n   \"id\":\"56d30c83-3a08-4147-933e-b01d3c348ac1\",\n   \"label\":\"Append\",\n   \"type\":\"execution_node\",\n   \"operator_id_ref\":\"com.ibm.commonicons.operations.append\",\n   \"image\":\"/images/common_node_icons/operations/operation_append.svg\",\n   \"class_name\":\"d3-node-body\",\n   \"input_ports\":[...],\n   \"output_ports\":[...],\n   \"x_pos\":265,\n   \"y_pos\":177.5,\n   \"inputPortsHeight\":20,\n   \"outputPortsHeight\":20,\n   \"height\":75,\n   \"width\":70\n}\n</code></pre> <ul> <li>Clone comment: triggered when copying &amp; pasting a comment<ul> <li>action: clone_comment</li> <li>data:</li> </ul> </li> </ul> <pre><code>comment: {\n   \"id\":\"8c81aac7-ebe5-4f96-9d63-eabc22b09635\",\n   \"class_name\":\"d3-comment-rect\",\n   \"content\":\"\",\n   \"height\":42,\n   \"width\":175,\n   \"x_pos\":50,\n   \"y_pos\":50\n}\n</code></pre> <ul> <li>Clone node link: triggered when copying &amp; pasting two connected nodes<ul> <li>action: clone_node_link</li> <li>data:</li> </ul> </li> </ul> <p><pre><code>link: {\n   \"id\":\"12c4308e-f572-402a-8dd3-604d438539d4\",\n   \"class_name\":\"d3-data-link\",\n   \"srcNodeId\":\"2b1af6c2-f98b-4728-97b3-416d40224bce\",\n   \"trgNodeId\":\"b43fffe6-dc01-4d30-8b6d-abd977850a2e\",\n   \"type\":\"nodeLink\"\n},\nsourceNodeId: \"56d30c83-3a08-4147-933e-b01d3c348ac1\",\ntargetNodeId: \"815271f0-f4da-4793-ab8f-c4c32d3dd7e0\"\n</code></pre> Note that the link to be cloned has references to the original source and target nodes, while the sourceNodeId and targetNodeId are the new node ids for the copied nodes. The new nodes are not part of the model yet.</p> <ul> <li>clone comment link: triggered when copying&amp;pasting a comment and a node that are connected<ul> <li>action: clone_comment_link</li> <li>data:</li> </ul> </li> </ul> <p><pre><code>link: {\n   \"id\":\"12c4308e-f572-402a-8dd3-604d438539d4\",\n   \"class_name\":\"d3-comment-link\",\n   \"srcNodeId\":\"2b1af6c2-f98b-4728-97b3-416d40224bce\",\n   \"trgNodeId\":\"b43fffe6-dc01-4d30-8b6d-abd977850a2e\",\n   \"type\":\"commentLink\"\n},\nsourceNodeId: \"56d30c83-3a08-4147-933e-b01d3c348ac1\",\ntargetNodeId: \"815271f0-f4da-4793-ab8f-c4c32d3dd7e0\"\n</code></pre> Note that the link to be cloned has references to the original comment and target node, while the sourceNodeId and targetNodeId are the new ids for the copied comment and node. The new node and comment are not part of the model yet.</p>"},{"location":"03.03.08-selection-change-handler/","title":"Selection Change Handler","text":"<p>This is an optional callback. It is triggered whenever the set of selected objects on the canvas changes either through selection or deselection.</p>"},{"location":"03.03.08-selection-change-handler/#selectionchangehandler","title":"selectionChangeHandler","text":"<p><pre><code>    selectionChangeHandler(data)\n</code></pre> The callback contains a JavaScript object with the following format: <pre><code>{\n    \"selection\": [\n      \"id6PXRG57DGIV\"\n    ],\n    \"selectedNodes\": [\n      {\n        \"id\": \"id6PXRG57DGIV\",\n        \"type\": \"binding\",\n        \"operator_id_ref\": \"variablefile\",\n        \"output_ports\": [...],\n        \"input_ports\": [],\n        \"label\": \"DRUG1n\",\n        \"description\": \"\",\n        \"image\": \"\",\n        \"x_pos\": 96,\n        \"y_pos\": 219,\n        \"class_name\": \"canvas-node\",\n        \"decorations\": [],\n        \"parameters\": [],\n        \"messages\": [],\n        \"inputPortsHeight\": 0,\n        \"outputPortsHeight\": 20,\n        \"height\": 75,\n        \"width\": 70\n      }\n    ],\n    \"selectedComments\": [],\n    \"addedNodes\": [\n      {\n        \"id\": \"id6PXRG57DGIV\",\n        \"type\": \"binding\",\n        \"operator_id_ref\": \"variablefile\",\n        \"output_ports\": [...],\n        \"input_ports\": [],\n        \"label\": \"DRUG1n\",\n        \"description\": \"\",\n        \"image\": \"\",\n        \"x_pos\": 96,\n        \"y_pos\": 219,\n        \"class_name\": \"canvas-node\",\n        \"decorations\": [],\n        \"parameters\": [],\n        \"messages\": [],\n        \"inputPortsHeight\": 0,\n        \"outputPortsHeight\": 20,\n        \"height\": 75,\n        \"width\": 70\n      }\n    ],\n    \"addedComments\": [],\n    \"deselectedNodes\": [\n      {\n        \"id\": \"id2PZSCTRPRIJ\",\n        \"type\": \"execution_node\",\n        \"operator_id_ref\": \"derive\",\n        \"output_ports\": [...],\n        \"input_ports\": [...],\n        \"label\": \"Na_to_K\",\n        \"description\": \"\",\n        \"image\": \"\",\n        \"x_pos\": 219.01116943359375,\n        \"y_pos\": 162.3754425048828,\n        \"class_name\": \"canvas-node\",\n        \"decorations\": [],\n        \"parameters\": [],\n        \"messages\": [...],\n        \"inputPortsHeight\": 20,\n        \"outputPortsHeight\": 20,\n        \"height\": 75,\n        \"width\": 70\n      }\n    ],\n    \"deselectedComments\": [\n      {\n        \"id\": \"id42ESQA3VPXB\",\n        \"content\": \" comment 1\",\n        \"height\": 34,\n        \"width\": 128,\n        \"x_pos\": 132,\n        \"y_pos\": 103,\n        \"class_name\": \"canvas-comment-1\"\n      }\n    ],\n    previousPipelineId: \"123-456\",\n    selectedPipelineId: \"789-012\"\n}\n</code></pre></p> <ul> <li>selection: Array with ids of selected nodes and comments</li> <li>selectedNodes: Array of selected node objects</li> <li>selectedComments: Array of selected comment objects</li> <li>addedNodes: Array with node objects that were added to the selection</li> <li>addedComments: Array with comment objects that were added to the selection</li> <li>deselectedNodes: Array with node objects that were removed from the selection</li> <li>deselectedComments: Array with comment objects that were removed from the selection</li> <li>previousPipelineId: The ID of the Pipeline for the selected objects prior to the selection action</li> <li>selectedPipelineId: The ID of the Pipeline for the newly selected objects</li> </ul>"},{"location":"03.03.09-click-action-handler/","title":"Click Action Handler","text":"<p>This callback is optional. You don\u2019t need to implement anything for it and it doesn\u2019t need to return anything to Common Canvas. It is called whenever the user clicks or double clicks on something on the canvas. You could use this callback to implement opening a properties dialog when the user double clicks a node.</p>"},{"location":"03.03.09-click-action-handler/#clickactionhandler","title":"clickActionHandler","text":"<pre><code>    clickActionHandler(source)\n</code></pre> <p>The callback is called with a single <code>source</code> parameter which contain information about the object that was clicked.</p> <p>Note: When handling selections, it is recommended the selectionChangeHandler be used in preference to this handler when possible. selectionChangeHandler will notify you of all selection changes regardless of how they occur, such as when the user presses Ctrl+A on the keyboard to select all objects.</p> <p>At the moment only click/double-click/context-menu  on nodes and the canvas background are returned. It is provided with one parameter that looks like this:</p> <p><pre><code>    {\n      clickType: \"DOUBLE_CLICK\"\n      id: \"node_1\",\n      objectType: \"node\",\n      selectedObjectIds: [\"node_1\", \"node_2\"]\n    }\n</code></pre> The fields can be:</p> <ul> <li>clickType - This can be either \u201cSINGLE_CLICK\u201d, \u201cSINGLE_CLICK_CONTEXTMENU\u201d or \u201cDOUBLE_CLICK\u201d</li> <li>objectType - Can be either \u201cnode\u201d, \u201ccomment\u201d, \u201ccanvas\u201d or \u201cregion\u201d. \u201cregion\u201d is specified when the user pulls out a selection rectangle around a set of objects that might include nodes and comments.</li> <li>id - The ID of the node or comment clicked. Only provided when objectType is \u201cnode\u201d or \u201ccomment\u201d</li> <li>selectedObjectIds - An array of the selected objects (after the click action was performed).</li> </ul> <p>Note: \u201cSINGLE_CLICK_CONTEXTMENU\u201d indicates that the user performed a contextmenu gesture when doing the click such as pressing the right-side mouse button or a two finger tap on a trackpad.</p>"},{"location":"03.03.10-action-label-handler/","title":"Action Label Handler","text":"<p>This is an optional handler you don\u2019t need to implement anything for it unless you want to. This callback allows your code to override the default tooltip text for the <code>Undo</code> and <code>Redo</code> buttons.</p>"},{"location":"03.03.10-action-label-handler/#actionlabelhandler","title":"actionLabelHandler","text":"<pre><code>    actionLabelHandler(action)\n</code></pre> <p>The <code>actionLabelHandler</code> callback, when provided, is called for each action that is performed in Common Canvas. The <code>action</code> object parameter, passed in to the callback, contains details of the action being performed. This callback should return either a string or null. If a string is returned it will be shown in the tooltip for the <code>Undo</code> button in the toolbar preceded by \u201cUndo:\u201d and the string will also appear in the tooltip for the <code>Redo</code> button (when appropriate) preceded by \u201cRedo:\u201d. If null is returned, Common Canvas will display the default text for the <code>Undo</code> and <code>Redo</code> buttons.</p>"},{"location":"03.04-canvas-controller/","title":"Canvas Controller API","text":"<p>Your application code can programmatically perform many of the actions that the user can do in the Common Canvas using the Canvas Controller API. Note: See this page for differences between the structure of objects in the API and the schema.</p> <p>In most cases within the API, the pipelineId parameter is optional. If pipelineId is omitted, the method will default to the pipeline that is currently displayed in the main canvas viewport.</p> <p>Warning 1: Do not alter the IDs of objects that currently exist on the canvas. Changing object IDs can cause internal problems, in particular with the command stack.</p> <p>Warning 2: When using external pipeline flows, Pipeline IDs must be globally unique identifiers.</p> <p>The API provides the following:</p>"},{"location":"03.04-canvas-controller/#pipeline-flow-methods","title":"Pipeline Flow methods","text":"<pre><code>// Loads the pipelineFlow document provided into Common Canvas and displays it.\n// The document must conform to the pipelineFlow schema as documented in the\n// elyra-ai pipeline-schemas repo. Documents conforming to older versions may be\n// provided but they will be upgraded to the most recent version.\nsetPipelineFlow(flow)\n\n// Clears the pipleine flow and displays an empty canvas.\nclearPipelineFlow()\n\n// Returns the current pipelineFlow document in the latest version of the\n// pipelineFlow schema as documented in the elyra-ai pipeline-schemas repo.\ngetPipelineFlow()\n\n// Returns the current pipelineFlow document ID.\ngetPipelineFlowId()\n\n// Returns the ID of the primary pipeline from the pipelineFlow.\ngetPrimaryPipelineId()\n\n// Returns the external pipeline flow for the url passed in. The external\n// flow must have been loaded through some Common Canvas action for this\n// method to be able to return anything.\ngetExternalPipelineFlow(url)\n\n// Returns the internal format of all canvas data stored in memory by\n// Common Canvas. Nodes, comments and links are returned in the internal\n// format.\ngetCanvasInfo()\n\n// Returns the IDs of the ancestor pipleline of the pipeline ID passed in.\ngetAncestorPipelineIds(pipelineId)\n\n// Removes all styles from nodes, comments and links. See the setObjectsStyle\n// and setLinkStyle methods for details on setting styles.\n// temporary - is a boolean that indicates whether temporary or permanent\n// styles should be removed.\nremoveAllStyles(temporary)\n\n// Specifies the new styles for objects that are not highlighted during\n// branch highlighting.\n// newStyle - is a style specification object.\nsetSubdueStyle(newStyle)\n</code></pre>"},{"location":"03.04-canvas-controller/#pipeline-methods","title":"Pipeline methods","text":"<pre><code>// Returns the pipeline object for the pipeline Id passed in.\ngetPipeline(pipelineId)\n\n// Returns the ID of the pipeline object which is currently on display\n// in the canvas. Typically, this is the primary pipeline but will be\n// different if the user has navigated into one or more supernodes; in\n// which case it will be the ID of the pipeline at the level in the\n// supernode hierarchy that is currently on display.\ngetCurrentPipelineId()\n\n// Returns truty if the pipeline is external (that is it is part of an\n// external pipeline flow). Otherwise, return falsy to indicate the pipeline\n// is local.\nisPipelineExternal(pipelineId)\n\n// Returns the flow validation messages for the pipeline ID passed in.\ngetFlowMessages(pipelineId)\n\n// Returns a boolean to indicate whether there are any messages of\n// includeMsgsType in the pipeline identified by the pipeline ID passed in.\n// includeMsgsType - can be either \"error\" or \"warning\"\nisFlowValid(includeMsgTypes, pipelineId)\n\n// Rearranges the nodes in the canvas in the direction specified for the\n// pipeline ID passed in.\n// layoutDirection - can be \"horizontal\" or \"vertical\"\nautoLayout(layoutDirection, pipelineId)\n</code></pre>"},{"location":"03.04-canvas-controller/#palette-methods","title":"Palette methods","text":"<pre><code>// Loads the palette data as described in the palette schema in\n// elyra-ai pipeline-schemas repo. Any version can be loaded and it will be\n// upgraded to the latest version.\nsetPipelineFlowPalette(palette)\n\n// Clears the palette data from Common Canvas.\nclearPaletteData()\n\n// Sets the loading text of the category. If set to a non-empty string the\n// category will show an InlineLoading control in the palette category div\n// with this text as the label. If set to falsey the palette category\n// will display as normal.\nsetCategoryLoadingText(categoryId, loadingText)\n\n// Sets the empty text of the category. If set to a non-empty string and the\n// category does not have any nodes, the palette will show a warning icon with\n// this text as a message under the category title when the category is opened.\n// This message will not be displayed if the field is set to falsey or if\n// nodetypes are added to the category.\nsetCategoryEmptyText(categoryId, emptyText)\n\n// Adds a new node into the palette:\n// nodeTypeObj - must conform to the style of node used by the palette as\n// described in the palette schema. See objects in nodeTypes array in the\n// palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - Is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypeToPalette(nodeTypeObj, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Adds an array of new node into the palette:\n// nodeTypeObjs - an array of nodetypes that must conform to the style of\n// nodes used by the palette as described in the palette schema. See objects\n// in nodeTypes array in the palette schema:\n//  https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/palette/palette-v3-schema.json\n// category - is the name of the palette category where the node will be\n// added. If the category doesn't exist it will be created.\n// categoryLabel - is an optional param. If a new category is created it will\n// be displayed with this label.\n// categoryImage - the image displayed for the category provided as a\n// reference to an image or the image itself.\n// categoryDescription - Is an optional param. If a new category is created\n// it will be displayed with this description.\n// categoryImage - Is an optional param. The image displayed for the category provided as a\n// reference to an image or the image itself.\naddNodeTypesToPalette(nodeTypeObjs, categoryId, categoryLabel, categoryDescription, categoryImage)\n\n// Removes nodetypes from a palette category\n// selObjectIds - an array of object IDs to identify the nodetypes to be\n// removed\n// categoryId - the ID of the category from which the nodes will be removed\nremoveNodesFromPalette(selObjectIds, categoryId)\n\n// Returns the palette data document which will conform to the latest version\n// of the palette schema.\ngetPaletteData()\n\n// Returns the palette node identified by the operator ID passed in.\ngetPaletteNode(operatorId)\n\n// Returns the palette node identified by the node ID passed in.\ngetPaletteNodeById(nodeId)\n\n// Returns the category of the palette node identified by the operator passed in\ngetCategoryForNode(nodeOpIdRef)\n\n// Converts a node template from the format use in the palette (that conforms\n// to the schema) to the internal node format.\nconvertNodeTemplate(nodeTemplate)\n\n// Opens the palette category identified by the category ID passed in.\nopenPaletteCategory(categoryId)\n\n// Closes the palette category idetified by the category ID passed in.\nclosePaletteCategory(categoryId)\n\n// Opens all the palette categories.\nopenAllPaletteCategories()\n\n// Closes all the palette categories.\ncloseAllPaletteCategories()\n\n// Returns true or false to indicate whether a palette category is open or not.\nisPaletteCategoryOpen(categoryId)\n</code></pre>"},{"location":"03.04-canvas-controller/#selections-methods","title":"Selections methods","text":"<pre><code>// Sets the currently selected objects replacing any current selections.\n// newSelection - An array of object IDs for nodes and/or comments\n// pipelineId - Optional. The ID of the pipeline where the objects exist.\n// Selected objects can only be in one pipeline. If this parameter is omitted\n// it is assumed the selections will be for objects in the 'top-level' pipeline\n// being displayed.\nsetSelections(newSelection, pipelineId)\n\n// Clears all the current selections from the canvas.\nclearSelections()\n\n// Selects all the objects on the canvas.\nselectAll()\n\n// Returns an array of the IDs of the currently selected objects.\ngetSelectedObjectIds()\n\n// Returns the currently selected Nodes.\ngetSelectedNodes()\n\n// Returns the currently selected Comments.\ngetSelectedComments()\n\n// Returns the ID of the pipeline in which the currently selected objects\n// exist. Only one pipeline may contain selected objects.\ngetSelectedPipelineId()\n\n// Deletes all currently selected objects.\ndeleteSelectedObjects()\n\n// Returns true if the currently selected objects are all linked together.\n// This is used when deciding to creating a supernode.\nareSelectedNodesContiguous()\n</code></pre>"},{"location":"03.04-canvas-controller/#notification-messages-methods","title":"Notification messages methods","text":"<p>The notification panel is displayed by the user by clicking the notifications icon in the toolbar. Your application can display whatever messages it wants in the notification panel. See the Notification Messages paage for the structure of message objects. The contents of the notification panel can be managed using the methods below: <pre><code>// Overwrites the array of notification messages shown in the notification\n// panel.\n// newMessage - An array of messages (see getNotificationMessages)\nsetNotificationMessages(newMessages)\n\n// Deletes all notification messages shown in the notification panel.\nclearNotificationMessages()\n\n// Removes the notification messages from the given array of ids\ndeleteNotificationMessages(ids)\n\n// Returns the array of current notification messages. If the messageType is\n// provided only messages of that type will be returned. If messageType is\n// not provided, all messages will be returned. The format of a notification\n// message is an object with these fields:\n// {\n//   \"id\": string (Required),\n//   \"type\" : enum, oneOf [\"info\", \"success\", \"warning\", \"error\"] (Required),\n//   \"callback\": function, the callback function when a message is clicked (Required),\n//   \"title\": string (Optional),\n//   \"content\": string, html, JSX Object (Optional),\n//   \"timestamp\": string (Optional),\n//   \"closeMessage\": string (Optional)\n// }\ngetNotificationMessages(messageType)\n\n// Returns the maximum notification message type present in the current set\n// of notification messages. For this: (\"error\" &gt; \"warning\" &gt; \"success\" &gt; \"info\")\ngetNotificationMessagesMaxType()\n</code></pre></p>"},{"location":"03.04-canvas-controller/#node-and-comment-methods","title":"Node AND comment methods","text":"<p>In Common Canvas nodes and comments are collectively known as objects. The following methods may be used to manage either collections of comments or nodes or a mixture of both. Note:</p> <ul> <li>See this sections if you are working with styles.</li> <li>See this section if you are working with decorations.</li> <li>See this section for differences between the structure of objects in the API and the schema. <pre><code>// Moves the objects identified in the data object which must be in the\n// pipeline identified by the pipeline ID.\n// data - A javascript object like this:\n// {\n//   nodes: []       // An array of node and comment IDs\n//   offsetX: number // Offset in pixels the objects will move in the X dir\n//   offsetY: number // Offset in pixels the objects will move in the Y dir\n// }\nmoveObjects(data, pipelineId)\n\n// Deletes the objects specified in objectIds array.\n// objectIds - An array of node and comment IDs\ndeleteObjects(objectIds, pipelineId)\n\n// Removes the links to and from the objects specified in the objectIds array.\n// objectIds - An array of node and comment IDs\ndisconnectObjects(objectIds, pipelineId)\n\n// Deletes the object specified by the id in the pipleine specified by\n// pipeline ID.\n// @Deprecated Use deleteNode or deleteComment as appropriate instead.\ndeleteObject(id, pipelineId)\n\n// Sets the style of the objects specified by pipelineObjectIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineObjectIds: This identified the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     &lt;pipelineID_1&gt;: [\n//       &lt;objectID_1_1&gt;,\n//       &lt;objectID_1_2&gt;\n//     ],\n//     &lt;pipelineID_2&gt;: [\n//         &lt;objectID_2_1&gt;,\n//         &lt;objectID_2_2&gt;\n//     ]\n//   }\n// newStyles - This is a style specification objects.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsStyle(pipelineObjectIds, newStyle, temporary)\n\n// Sets the styles of multiple objects at once.\n// pipelineObjStyles - Specified the objects and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: &lt;pipelineId&gt;, objId: &lt;objectId&gt;, style: &lt;style_spec&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, objId: &lt;objectId&gt;, style: &lt;style_spec&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, objId: &lt;objectId&gt;, style: &lt;style_spec&gt;}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetObjectsMultiStyle(pipelineObjStyles, temporary)\n</code></pre></li> </ul>"},{"location":"03.04-canvas-controller/#node-methods","title":"Node methods","text":"<pre><code>// Retuns an array of nodes for the pipeline specified by the pipelineId.\ngetNodes(pipelineId)\n\n// Returns a new node created from the data parameter in the pipeline\n// identified by the pipelineId.\n// The data parameter must contain:\n// nodeTemplate -  a node template from the palette. The nodeTemplate\n//                 can be retrieved from the palette using with Canvas\n//                 Controller methods: getPaletteNode or getPaletteNodeById.\n// offsetX - the x coordinate of the new node\n// offsetY - the y coordinate of the new node\ncreateNode(data, pipelineId)\n\n// Adds a new node into the pipeline specified by the pipelineId.\naddNode(node, pipelineId)\n\n// Creates a node using the data parameter provided in the pipeline specified\n// by pipelineId and adds the command to the command stack (so the user can\n// undo/redo the command). This will also cause the beforeEditActionHandler\n// and editActionHandler callbacks to be called.\n// The data parameter must contain:\n// nodeTemplate -  a node template from the palette. The nodeTemplate\n//                 can be retrieved from the palette using with Canvas\n//                 Controller methods: getPaletteNode or getPaletteNodeById.\n// offsetX - the x coordinate of the new node\n// offsetY - the y coordinate of the new node\n//\n// If pipelineId is omitted the node will be created in the current\n// \"top-level\" pipeline.\ncreateNodeCommand(data, pipelineId)\n\n// Deletes the node specified.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ndeleteNode(nodeId, pipelineId)\n\n// Sets the node properties\n// nodeId - The ID of the node\n// properties - An object containing properties to be overriden in the node\n// pipelineId - The ID of the pipeline\nsetNodeProperties(nodeId, properties, pipelineId)\n\n// Sets the node parameters\n// nodeId - The ID of the node\n// parameters - An array of parameters\n// pipelineId - The ID of the pipeline\nsetNodeParameters(nodeId, parameters, pipelineId)\n\n// Sets the node UI parameters\n// nodeId - The ID of the node\n// parameters - An array of UI parameters\n// pipelineId - The ID of the pipeline\nsetNodeUiParameters(nodeId, uiParameters, pipelineId)\n\n// Sets the node messages\n// nodeId - The ID of the node\n// messages - An array of messages\n// pipelineId - The ID of the pipeline\nsetNodeMessages(nodeId, messages, pipelineId)\n\n// Sets a single message on a node\n// nodeId - The ID of the node\n// message - A message\n// pipelineId - The ID of the pipeline\nsetNodeMessage(nodeId, message, pipelineId)\n\n// Sets the lable for a node\n// nodeId - The ID of the node\n// ndeLabel - The label\n// pipelineId - The ID of the pipeline\nsetNodeLabel(nodeId, newLabel, pipelineId)\n\n// Sets the class name to newClassName of the nodes identified by nodeIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the node body path.\nsetNodesClassName(nodeIds, newClassName, pipelineId)\n\n// Sets the decorations on a node. The decorations array passed in\n// will replace any decorations currently applied to the node.\n// nodeId - The ID of the node\n// newDecorations - An array of decoration objects.\n// pipelineId - The ID of the pipeline\nsetNodeDecorations(nodeId, newDecorations, pipelineId)\n\n// Sets the input ports on a node. The inputs array of ports provided will\n// replace any input ports for a node.\n// nodeId - The ID of the node\n// inputs - An array of input port objects.\n// pipelineId - The ID of the pipeline\nsetNodeInputPorts(nodeId, inputs, pipelineId)\n\n// Sets the output ports on a node. The outputs array of ports provided will\n// replace any output ports for a node.\n// nodeId - The ID of the node\n// outputs - An array of output port objects.\n// pipelineId - The ID of the pipeline\nsetNodeOutputPorts(nodeId, outputs, pipelineId)\n\n// Sets the decorations of multiple nodes at once. The decorations array\n// passed in will replace any decorations currently applied to the nodes.\n// pipelineNodeDecorations - Specifies the nodes and their decorations.\n// It is a JavaScript array like this:\n//   [\n//     { pipelineId: &lt;pipelineId&gt;, nodeId: &lt;nodeId&gt;, decorations: &lt;decoration_spec_array&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, nodeId: &lt;nodeId&gt;, decorations: &lt;decoration_spec_array&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, nodeId: &lt;nodeId&gt;, decorations: &lt;decoration_spec_array&gt;}\n//   ]\nsetNodesMultiDecorations(pipelineNodeDecorations)\n\n// Sets the input port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the input port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetInputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Sets the output port label on a node\n// nodeId - The ID of the node\n// portId - The ID of the output port\n// newLabel - The label\n// pipelineId - The ID of the pipeline\nsetOutputPortLabel(nodeId, portId, newLabel, pipelineId)\n\n// Gets a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNode(nodeId, pipelineId)\n\n// Gets the UI parameters for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeUiParameters(nodeId, pipelineId)\n\n// Gets the supernodes for a pipeline.\n// pipelineId - The ID of the pipeline\ngetSupernodes(pipelineId)\n\n// Returns supernode ID that has a subflow_ref to the given pipelineId.\ngetSupernodeObjReferencing(pipelineId)\n\n// Gets the messages for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeMessages(nodeId, pipelineId)\n\n// Gets the array of input ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeInputPorts(nodeId, pipelineId)\n\n// Gets the array of output ports for the node or null if the node ID is\n// not recognized.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeOutputPorts(nodeId, pipelineId)\n\n// Gets a message for a specific control for a node\n// nodeId - The ID of the node\n// controlName - The control name\n// pipelineId - The ID of the pipeline\ngetNodeMessage(nodeId, controlName, pipelineId)\n\n// Gets an array of decorations for a node\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\ngetNodeDecorations(nodeId, pipelineId)\n\n// Gets the class name associated with the node specified by nodeId in the\n// pipeline specified by pipelineId.\ngetNodeClassName(nodeId, pipelineId)\n\n// Gets the style spcification for a node.\n// nodeId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetNodeStyle(nodeId, temporary, pipelineId)\n\n// Returns an array of nodes that are for the branch(es) that the nodes,\n// identified by the node IDs passed in, are within.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline where the nodes exist\ngetBranchNodes(nodeIds, pipelineId)\n\n// Returns an array of nodes that are upstream from the nodes\n// identified by the node IDs passed in.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline where the nodes exist\ngetUpstreamNodes(nodeIds, pipelineId)\n\n// Returns an array of nodes that are downstream from the nodes\n// identified by the node IDs passed in.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline where the nodes exist\ngetDownstreamNodes(nodeIds, pipelineId)\n\n// Returns a boolean to indicate whether the supernode is expanded in place.\n// nodeId - The ID of the node\n// pipelineId - The ID of the pipeline\nisSuperNodeExpandedInPlace(nodeId, pipelineId)\n\n// Sets the label, for the node identified, to edit mode, provided the node\n// label is editable. This allows the user to edite the label text.\nsetNodeLabelEditingMode(nodeId, pipelineId)\n\n// Sets the decoration label, for the decoration in the node identified, to edit\n// mode, provided the node label is editable. This allows the user to edit the\n// label text.\nsetNodeDecorationLabelEditingMode(decId, nodeId, pipelineId)\n</code></pre>"},{"location":"03.04-canvas-controller/#comment-methods","title":"Comment methods","text":"<pre><code>// Returns the comments from the pipeline.\n// pipelineId - The ID of the pipeline\ngetComments(pipelineId)\n\n// Returns a comment from the pipeline.\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ngetComment(comId, pipelineId)\n\n// Returns a position object which indicates the position of where a new\n// comment should be placed in a situation where the mouse position cannot be\n// used (e.g. the toolbar button was clicked).\n// pipelineId - The ID of the pipeline\ngetNewCommentPosition(pipelineId)\n\n// Creates a comment for the pipeline.\n// source - Input data\n// pipelineId - The ID of the pipeline\ncreateComment(source, pipelineId)\n\n// Adds a comment to the pipeline.\n// data - the data describing the comment\n// pipelineId - The ID of the pipeline\naddComment(data, pipelineId)\n\n// Edits a comment with the data.\n// data - the comment\n// pipelineId - The ID of the pipeline\neditComment(data, pipelineId)\n\n// Sets the properties in the comment identified by the commentId. The\n// commentProperties is an object containing one or more properties that will\n// replace the corresponding properties in the comment. For example: if\n// commentProperties is { x_pos: 50, y_pos: 70 } the comment\n// will be set to that position.\nsetCommentProperties(commentId, commentProperties, pipelineId)\n\n// Sets the class name to newClassName of the comments identified by commentIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the comment body path.\nsetCommentsClassName(commentIds, newClassName, pipelineId)\n\n// Deletes a comment\n// comId - The ID of the comment\n// pipelineId - The ID of the pipeline\ndeleteComment(comId, pipelineId)\n\n// Gets the class name associated with the comment specified by commentId in the\n// pipeline specified by pipelineId.\ngetCommentClassName(commentId, pipelineId)\n\n// Gets the style spcification for a comment\n// commentId - The ID of the node\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetCommentStyle(commentId, temporary, pipelineId)\n\n// Hides all comments on the canvas.\nhideComments()\n\n// Shows all comments on the canvas - if they were previously hiding.\nshowComments()\n\n// Returns true if comments are currently hiding.\nisHidingComments()\n\n// Sets the comment identified, to edit mode so the user can\n// edit the comment.\nsetCommentEditingMode(commentId, pipelineId)\n</code></pre>"},{"location":"03.04-canvas-controller/#link-methods","title":"Link methods","text":"<pre><code>// Gets a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLink(linkId, pipelineId)\n\n// Returns an array of link objects for the pipelineId passed in.\n// pipelineId - The ID of the pipeline\ngetLinks(pipelineId)\n\n// Sets the properties in the link identified by the linkId. The\n// linkProperties is an object containing one or more properties that will\n// replace the corresponding properties in the link. For exam`ple: if\n// linkProperties is { trgNodeId: \"123\", trgNodePortId: \"789\" } the target\n// node ID will be set to \"123\" and the target port ID set to \"789\".\nsetLinkProperties(linkId, linkProperties, pipelineId)\n\n// Sets the source properties in the data link identified by the linkId. The\n// srcNodeId and srcNodePortId will be set to the values provided. If\n// srcNodePortId is set to null the current srcNodePortId will be removed\n// from the link. Also, if the link has a srcPos property (because its\n// source end is detached) that will be removed.\nsetNodeDataLinkSrcInfo(linkId, srcNodeId, srcNodePortId, pipelineId)\n\n// Sets the target properties in the data link identified by the linkId. The\n// trgNodeId and trgNodePortId will be set to the values provided. If\n// trgNodePortId is set to null the current trgNodePortId will be removed\n// from the link. Also, if the link has a trgPos property (because its\n// target end is detached) that will be removed.\nsetNodeDataLinkTrgInfo(linkId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a node to node data link\n// srcNodeId - The ID of the source node\n// srcNodePortId - The ID of the source node port\n// trgNodeId - The ID of the target node\n// trgNodePortId - The ID of the target node port\n// pipelineId - The ID of the pipeline\ngetNodeDataLinkFromInfo(srcNodeId, srcNodePortId, trgNodeId, trgNodePortId, pipelineId)\n\n// Gets a comment to node link\n// id1 - The ID of the comment\n// id2 - The ID of the node\n// pipelineId - The ID of the pipeline\ngetCommentLinkFromInfo(id1, id2, pipelineId)\n\n// Gets a node to node association link\n// id1 - The ID of one of the node\n// id2 - The ID of one of the node\n// pipelineId - The ID of the pipeline\ngetNodeAssocLinkFromInfo(id1, id2, pipelineId)\n\n// Adds links to a pipeline\n// linkList - An array of links\n// pipelineId - The ID of the pipeline\naddLinks(linkList, pipelineId)\n\n// Deletes a link\n// link - the link object to be deleted\n// pipelineId - The ID of the pipeline\ndeleteLink(link, pipelineId)\n\n// Creates node to node links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateNodeLinks(data, pipelineId)\n\n// Creates comment links\n// data - Data describing the links\n// pipelineId - The ID of the pipeline\ncreateCommentLinks(data, pipelineId)\n\n// Sets the class name to newClassName of the links identified by linkIds\n// array in the pipleine specified by pipeline ID. The class name will be\n// applied to the link line path.\nsetLinksClassName(linkIds, newClassName, pipelineId)\n\n// Sets the style of the links specified by pipelineLinkIds to be\n// the newStyle which will be either temporary or permanent.\n// pipelineLinkIds - This identifies the objects to be styles. It is a\n// javascript object like this:\n//   {\n//     &lt;pipelineID_1&gt;: [\n//       &lt;linkID_1_1&gt;,\n//       &lt;linkID_1_2&gt;\n//     ],\n//     &lt;pipelineID_2&gt;: [\n//         &lt;linkID_2_1&gt;,\n//         &lt;linkID_2_2&gt;\n//     ]\n//   }\n// newStyle - This is a style specification objects.\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksStyle(pipelineLinkIds, newStyle, temporary)\n\n// Sets the styles of multiple links at once.\n// pipelineObjStyles - Specified the links and the styles each should be\n// set to. It is a javascript array like this:\n//   [\n//     { pipelineId: &lt;pipelineId&gt;, objId: &lt;linkId&gt;, style: &lt;style_spec&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, objId: &lt;linkId&gt;, style: &lt;style_spec&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, objId: &lt;linkId&gt;, style: &lt;style_spec&gt;}\n//   ]\n// temporary - A boolean to indicate if the styles are serialized when\n//             getPipelineFlow() method is called or not.\nsetLinksMultiStyle(pipelineObjStyles, temporary)\n\n// Gets the class name associated with the link specified by linkId in the\n// pipeline specified by pipelineId.\ngetLinkClassName(linkId, pipelineId)\n\n// Returns the style specification for a link.\n// linkIds - An array of links\n// temporary - A boolean to indicate if the style is serialized when\n//             getPipelineFlow() method is called or not.\n// pipelineId - The ID of the pipeline\ngetLinkStyle(linkId, temporary, pipelineId)\n\n// Sets the decorations on a link. The decorations array passed in\n// will replace any decorations currently applied to the link.\n// linkId - The ID of the link\n// newDecorations - An array of decoration objects.\n// pipelineId - The ID of the pipeline\nsetLinkDecorations(linkId, newDecorations, pipelineId)\n\n// Sets the decorations of multiple links at once. The decorations array\n// passed in will replace any decorations currently applied to the links.\n// pipelineLinkDecorations - Specifies the links and their decorations.\n// It is a javascript array like this:\n//   [\n//     { pipelineId: &lt;pipelineId&gt;, linkId: &lt;linkId&gt;, decorations: &lt;decoration_spec_array&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, linkId: &lt;linkId&gt;, decorations: &lt;decoration_spec_array&gt;},\n//     { pipelineId: &lt;pipelineId&gt;, linkId: &lt;linkId&gt;, decorations: &lt;decoration_spec_array&gt;}\n//   ]\nsetLinksMultiDecorations(pipelineLinkDecorations)\n\n// Gets an array of decorations for a link\n// linkId - The ID of the link\n// pipelineId - The ID of the pipeline\ngetLinkDecorations(linkId, pipelineId)\n\n// Sets the decoration label, for the decoration in the link identified, to edit\n// mode provided the link label is editable. This allows the user to edit the\n// label text.\nsetLinkDecorationLabelEditingMode(decId, linkId, pipelineId)\n</code></pre>"},{"location":"03.04-canvas-controller/#breadcrumbs-methods","title":"Breadcrumbs methods","text":"<pre><code>// Returns the current array of breadcrumbs. There will one breadcrumb object\n// for each level of supernode that the user has navigated into. This array\n// can be used to display breadcrumbs to the user to show where they are\n// within the navigation hierarchy within Common Canvas.\ngetBreadcrumbs()\n\n// Returns the last breadcrumb which represents the level with supernode\n// hierarchy that the user has currently navigated to.\ngetCurrentBreadcrumb()\n</code></pre>"},{"location":"03.04-canvas-controller/#branch-highlight-methods","title":"Branch Highlight methods","text":"<pre><code>// Highlights the branch(s) (both upstream and downstream) from the node\n// IDs passed in and returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightBranch(nodeIds, pipelineId)\n\n// Highlights the upstream nodes from the node IDs passed in\n// and returns the returns the highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightUpstream(nodeIds, pipelineId)\n\n// Highlights the downstream nodes from the node IDs passed in\n// and returns highlighted object Ids.\n// nodeIds - An array of node Ids\n// pipelineId - The ID of the pipeline\nhighlightDownstream(nodeIds, pipelineId)\n</code></pre>"},{"location":"03.04-canvas-controller/#operational-methods","title":"Operational methods","text":"<p>These are general purpose methods for operation of the common-canvas components:</p>"},{"location":"03.04-canvas-controller/#logging-methods","title":"Logging methods","text":"<pre><code>// Returns a Boolean to indicate whether canvas logging is switched on or off.\ngetLoggingState()\n\n// Sets canvas logging based on the Boolean passed in.\nsetLoggingState(state)\n</code></pre>"},{"location":"03.04-canvas-controller/#palette-methods_1","title":"Palette methods","text":"<pre><code>// Opens the palette\nopenPalette()\n\n// Closes the palette\nclosePalette()\n\n// Returns true if the palette is currently open\nisPaletteOpen()\n</code></pre>"},{"location":"03.04-canvas-controller/#context-menu-methods","title":"Context menu methods","text":"<pre><code>// Opens the context menu\nopenContextMenu(menuDef)\n\n// Closes the context menu\ncloseContextMenu()\n</code></pre>"},{"location":"03.04-canvas-controller/#notification-panel-methods","title":"Notification Panel methods","text":"<pre><code>// Opens the notification panel\nopenNotificationPanel()\n\n// Closes the notification panel\ncloseNotificationPanel()\n\n// Either opens or closes the notifictaion panel based on its current status\ntoggleNotificationPanel()\n</code></pre>"},{"location":"03.04-canvas-controller/#right-flyout-methods","title":"Right Flyout methods","text":"<pre><code>// Returns a boolean to indicate if the right flyout is open or not\nisRightFlyoutOpen()\n</code></pre>"},{"location":"03.04-canvas-controller/#top-panel-methods","title":"Top panel methods","text":"<pre><code>// Returns a boolean to indicate if the top pnel is open or not\nisTopPanelOpen()\n</code></pre>"},{"location":"03.04-canvas-controller/#bottom-panel-methods","title":"Bottom panel methods","text":"<pre><code>// Returns a boolean to indicate if the bottom panel is open or not\nisBottomPanelOpen()\n\n// Sets the height of the bottom panel in pixels. This can be called\n// immediately after the CanvasController has been created, if the bottom\n// panel should be displayed at a specific height when it first opens.\nsetBottomPanelHeight(height)\n</code></pre>"},{"location":"03.04-canvas-controller/#canvaspipeline-navigation-methods","title":"Canvas/pipeline navigation methods","text":"<pre><code>// Displays a pipeline (identified by the pipelineId passed in). This must be\n// one of the pipelines referenced by the current set of breadcrumbs. It\n// cannot be used to open a new pipeline outside the current set of breadcruumbs.\ndisplaySubPipeline(pipelineId)\n\n// Displays a pipeline for a supernode (identifid by the supernodeId\n// parameter) in a parent pipeline (identifid by the pipelineId parameter).\n// This parent pipeline should be the last of the current set of breadcumbs.\n// That is, the pipeline currently shown \"full page\" in the canvas.\ndisplaySubPipelineForSupernode(supernodeId, pipelineId)\n\n// Displays full-page the previous pipeline from the one currently being displayed\ndisplayPreviousPipeline()\n</code></pre>"},{"location":"03.04-canvas-controller/#command-stack-interaction-methods","title":"Command Stack interaction methods","text":"<pre><code>// Adds the command object to the command stack which will cause the\n// do() method of the command to be called.\ndo(command)\n\n// Calls the undo() method of the next available command on the command\n// stack that can be undone, if one is available.\nundo()\n\n// Undoes a number of commands on the command stack as indicated by the\n// 'count' parameter. If 'count' is bigger than the number of undoable commands\n// on the stack, all undoable commands currently on the command stack\n// will be undone. Uses the editActionHandler method which will cause\n// the app's editActionHandler to be called.\nundoMulti(count)\n\n// Calls the redo() method of the next available command on the command\n// stack that can be redone, if one is available.\nredo()\n\n// Redoes a number of commands on the command stack as indicated by the\n// 'count' parameter. If 'count' is bigger than the number of redoable commands\n// on the stack, all redoable commands currently on the command stack\n// will be redone. Uses the editActionHandler method which will cause\n// the app's editActionHandler to be called.\nredoMulti(count)\n\n// Returns true if there is a command on the command stack\n// available to be undone.\ncanUndo()\n\n// Returns true if there is a command on the command stack\n// available to be redone.\ncanRedo()\n\n// Returns a string which is the label that descibes the next undoable\n// command.\ngetUndoLabel()\n\n// Returns a string which is the label that descibes the next redoable\n// command.\ngetRedoLabel()\n\n// Returns an array of all undoable commands currently on the command stack.\ngetAllUndoCommands()\n\n// Returns an array of all redoable commands currently on the command stack.\ngetAllRedoCommands()\n\n// Clears the command stack of all currently stored commands.\nclearCommandStack()\n</code></pre>"},{"location":"03.04-canvas-controller/#zoom-methods","title":"Zoom methods","text":"<pre><code>// Centers the canvas contents and zooms in\nzoomIn()\n\n// Centers the canvas contents and zooms out\nzoomOut()\n\n// Zooms the canvas contents to fit within the viewport\nzoomToFit()\n\n// Changes the zoom amounts for the canvas. This method does not alter the\n// pipelineFlow document. zoomObject is an object with three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\nzoomTo(zoomObject)\n\n// Increments the translation of the canvas by the x and y increment\n// amounts. The optional animateTime parameter can be provided to animate the\n// movement of the canvas. It is a time for the animation in milliseconds.\n// If omitted the movement happens immediately.\ntranslateBy(x, y, animateTime)\n\n// Returns the current zoom object for the currently displayed canvas or null\n// if the canvas is not yet rendered for the first time.\ngetZoom()\n\n// Returns a zoom object required to pan the objects (nodes and/or comments\n// and/or links) identified by the objectIds array to 'reveal' the objects\n// in the viewport. Returns null if no nodes, comments or links can be found\n// using the IDs passed in. Note: node, comment and link IDs must be unique.\n// The zoom object returned can be provided to the CanvasController.zoomTo()\n// method to perform the zoom/pan action.\n// If the xPos and yPos parameters are provided it will return a zoom object\n// to pan the center of the objects specified, to a location where, xPos\n// is the percentage of the viewport width and yPos is the percentage of the\n// viewport height. So if you want the center of the objects specified to be\n// in the center of the viewport set xPos to 50 and yPos to 50.\n// If the xPos and yPos parameters are undefined (omitted) and all the\n// objects are currently fully within the canvas viewport, this method will\n// return null. This can be used to detect whether the objects are fully\n// visible or not.\n// If the xPos and yPos parameters are undefined and the objects are outside\n// the viewport, a zoom object will be returned that can be used to zoom them\n// so they appear at the nearest side of the viewport to where they are\n// currently positioned.\n// The zoom object returned has three fields:\n// x: Is the horizontal translate amount which is a number indicating the\n//    pixel amount to move. Negative left and positive right\n// y: Is the vertical translate amount which is a number indicating the\n//    pixel amount to move. Negative up and positive down.\n// k: is the scale amount which is a number greater than 0 where 1 is the\n//    default scale size.\n// Parameters:\n// objectIds - An array of nodes and/or comment IDs.\n// xPos - Optional. Can be set to percentage offset of the viewport width.\n// yPos - Optional. Can be set to percentage offset of the viewport height.\ngetZoomToReveal(objectIds, xPos, yPos)\n\n// Clears any saved zoom values stored in local storage. This means\n// newly opened flows will appear with the default zoom. This method\n// is only applicable when the `enableSaveZoom` config parameter is\n// set to \"LocalStorage\".\nclearSavedZoomValues()\n</code></pre>"},{"location":"03.04.01-decorations/","title":"Decorations","text":"<p>Your application can add Decorations \u2013 additional icons, text labels, shapes or JSX objects \u2013 to nodes or links in the canvas to indicate special status or attributes of the node or link. Decorations can be static (for display only) or interactive (a hotspot) so the user can click them to initiate some action.</p>"},{"location":"03.04.01-decorations/#adding-decorations","title":"Adding Decorations","text":"<p>Decorations can be added to the nodes and/or links in four different ways:</p> <ol> <li> <p>By using the following <code>CanvasController</code> methods:     <pre><code>setNodeDecorations(nodeId, newDecorations, pipelineId)\nsetNodesMultiDecorations(pipelineNodeDecorations)\nsetLinkDecorations(linkId, newDecorations, pipelineId)\nsetLinksMultiDecorations(pipelineLinkDecorations)\n</code></pre>     and can be retrieved using these <code>CanvasController</code> methods:     <pre><code>getNodeDecorations(nodeId, pipelineId)\ngetLinkDecorations(linkId, pipelineId)\n</code></pre>     See the CanvasController API documentation for more details.</p> </li> <li> <p>Node decorations can be specified in the nodeLayout object in the canvas config. Decorations specified in this way are applied to all nodes on the canvas.</p> </li> <li> <p>Decorations can be applied to, and retrieved from, nodes or links in the pipelineFlow in the <code>app_data.ui_data</code> section for the node or link. (Note: JSX objects are not supported in the pipelineFlow document).</p> </li> <li> <p>Decorations can be returned in the layout information returned from the layoutHandler  CommonCanvas callback method.</p> </li> </ol>"},{"location":"03.04.01-decorations/#specification","title":"Specification","text":"<p>The decoration specification used by these methods and the pipelineFlow is a JavaScript object with these possible properties:</p> <p>These properties are applicable to an image decoration: <pre><code>     {\n       id: &lt;decoration_id&gt;,\n       image: &lt;image_url&gt;,\n       position: &lt;position&gt;,\n       distance: &lt;number&gt;\n       x_pos: &lt;number&gt;,\n       y_pos: &lt;number&gt;,\n       width: &lt;number&gt;,\n       height: &lt;number&gt;,\n       hotspot: &lt;boolean&gt;,\n       class_name: &lt;class_name&gt;,\n       outline: &lt;boolean&gt;,\n       tooltip: &lt;string&gt;,\n       temporary: &lt;boolean&gt;\n     }\n</code></pre> These properties are applicable to a label decoration: <pre><code>     {\n       id: &lt;decoration_id&gt;,\n       label: &lt;string&gt;,\n       label_editable: &lt;boolean&gt;,\n       label_align: &lt;enum&gt;,\n       label_single_line: &lt;boolean&gt;,\n       label_max_characters: &lt;number&gt;,\n       label_allow_return_key: &lt;boolean&gt;,\n       position: &lt;position&gt;,\n       distance: &lt;number&gt;\n       x_pos: &lt;number&gt;,\n       y_pos: &lt;number&gt;,\n       width: &lt;number&gt;,\n       height: &lt;number&gt;,\n       hotspot: &lt;boolean&gt;,\n       class_name: &lt;class_name&gt;,\n       tooltip: &lt;string&gt;,\n       temporary: &lt;boolean&gt;\n     }\n</code></pre> These properties are applicable to a shape decoration: <pre><code>     {\n       id: &lt;decoration_id&gt;,\n       path: &lt;string&gt;,\n       position: &lt;position&gt;,\n       distance: &lt;number&gt;\n       x_pos: &lt;number&gt;,\n       y_pos: &lt;number&gt;,\n       width: &lt;number&gt;,\n       height: &lt;number&gt;,\n       hotspot: &lt;boolean&gt;,\n       class_name: &lt;class_name&gt;,\n       tooltip: &lt;string&gt;,\n       temporary: &lt;boolean&gt;\n     }\n</code></pre> These properties are applicable to a JSX decoration: <pre><code>     {\n       id: &lt;decoration_id&gt;,\n       jsx: &lt;JSX Object&gt;,\n       position: &lt;position&gt;,\n       distance: &lt;number&gt;\n       x_pos: &lt;number&gt;,\n       y_pos: &lt;number&gt;,\n       width: &lt;number&gt;,\n       height: &lt;number&gt;,\n       hotspot: &lt;boolean&gt;,\n       class_name: &lt;class_name&gt;,\n       tooltip: &lt;string&gt;,\n     }\n</code></pre></p> <p>where:</p>"},{"location":"03.04.01-decorations/#id","title":"id","text":"<p>A unique ID for the decoration within the context of the node or link to which the decorator is attached.</p>"},{"location":"03.04.01-decorations/#image","title":"image","text":"<p>A reference to an image to display for the decoration. If an image is specified the image is displayed within an outline rectangle unless <code>outline</code> is set to false. The image should be a reference to your image like: \u201c/images/decorations/zoom-in_32.svg\u201d. Do not set label or path or jsx when this field is set.</p>"},{"location":"03.04.01-decorations/#path","title":"path","text":"<p>An SVG shape that is displayed using this string as it\u2019s SVG path. eg. \u201cM 0 0 L 10 10 -10 10 Z\u201d could be specified to draw a triangle. Do not set image or label or jsx when this field is set.</p>"},{"location":"03.04.01-decorations/#jsx","title":"jsx","text":"<p>A JSX object that is is displayed at the specified decoration location. Do not set image or path or label when this field is set. Note JSX decorations are not supported in the pipelineFlow document.</p>"},{"location":"03.04.01-decorations/#label","title":"label","text":"<p>A text string that is displayed at the specified decoration location. Do not set image or path or jsx when this field is set.</p>"},{"location":"03.04.01-decorations/#label_editable","title":"label_editable","text":"<p>A boolean that defaults to <code>false</code>. When set to <code>true</code>, if the mouse pointer is hovered over the label an edit icon is displayed next to the label which, when clicked, opens the label for editing. The label can also for double clicked to go to edit mode.</p> <p>When editing is completed (by clicking outside the text area) an <code>editDecorationLabel</code> action is executed which results in calls to first the <code>beforeEditActionHandler</code> and then the <code>editActionHandler</code> callbacks.</p>"},{"location":"03.04.01-decorations/#label_align","title":"label_align","text":"<p>Can be either \u201ccenter\u201d or \u201cleft\u201d. When set to center the label will be centered on the point defined by the <code>position</code>, <code>distance</code>, <code>x_pos</code> and <code>y_pos</code> properties.</p>"},{"location":"03.04.01-decorations/#label_single_line","title":"label_single_line","text":"<p>A boolean that defaults to <code>false</code>. When set to <code>true</code> the label is displayed on a single line and is truncated at the width of the label (specified in the <code>width</code> property for the decoration) and does not word wrap. If it is truncated an ellipsis (\u2026) is displayed at the end of the truncated text.</p> <p>If this property is set to <code>false</code>, long label text is displayed over a number of lines with word wrapping being controlled by the <code>width</code> set for the decoration. If the text extends beyond a second line an ellipsis (..) is displayed at the end of the second line. This is controlled by the <code>-webkit-line-clamp: 2;</code> CSS property. You can override this if you want the ellipsis to be displayed on a different line.</p> <p>Note: For both single and multi-line labels you may need to set the <code>height</code> property for the decoration to show the text fully.</p>"},{"location":"03.04.01-decorations/#label_max_characters","title":"label_max_characters","text":"<p>A number or null. Defaults to null. If set to a number the label will be restricted to that number of characters. If the label in the pipeline flow document is longer than the max number it will be displayed but when it is edited the user will not be able to do anything except delete characters until the label is shorter than the max number. If this property is set to <code>null</code> or omitted an unlimited number of characters may be entered by the user.</p>"},{"location":"03.04.01-decorations/#label_allow_return_key","title":"label_allow_return_key","text":"<p>A boolean that defaults to <code>false</code>. When <code>false</code>, if the user presses the return key nothing will happen. This means multi-line labels will only word-wrap at the <code>width</code> of the decorator. Preventing newline insertion is useful if the label text appears elsewhere in the UI which is not able to show text with newline characters. When set to <code>\"save\"</code>, if the user presses the return key, the editing will be completed and the label saved \u2013 this is the equivalent of clicking on the canvas background to complete the edit. If set to <code>true</code>, a new line character will be inserted in the label when the user presses return.</p>"},{"location":"03.04.01-decorations/#position","title":"position","text":"<p>This is the anchor point to which the decoration is attached.  For a node, this can be one of these 9 enumerated values: <pre><code>   \"topLeft\", \"topCenter\", \"topRight\",\n   \"middleLeft\", \"middleCenter\", \"middleRight\",\n   \"bottomLeft\", \"bottomCenter\", \"bottomRight\".\n</code></pre> If omitted it will default to \u201ctopLeft\u201d.</p> <p>For a link, this can be one of these 3 enumerated values: <pre><code>   \"source\"\n   \"middle\"\n   \"target\"\n</code></pre> <code>source</code> will position the decoration at the start point of the line and <code>target</code> will position it at the end point of the line. If omitted it will default to <code>middle</code>.</p>"},{"location":"03.04.01-decorations/#distance","title":"distance","text":"<p>A number of pixels. This is only applicable when the decoration is for a link line and then, only with straight connecting lines. That is, for node to node connections when the config property <code>enableLinkType</code> is set to <code>\"straight\"</code>. When specified, it will move the anchor point for the decoration to a new position along the connecting line relative to the initial position specified in the decoration\u2019s <code>position</code> property. A positive number moves the decoration along the line from the starting position towards the target of the link and a negative number backwards towards the source of the link. For example, if a straight link decoration has <code>position</code> of <code>source</code> and a <code>distance</code> of <code>20</code> the decoration\u2019s anchor point will be 20 pixels along the link line from the source (start) point of the line. After the <code>distance</code> value has been applied to the anchor point of the decoration, any <code>x_pos</code> and <code>y_pos</code> adjustment will be applied to fine tune the decoration\u2019s final position.</p>"},{"location":"03.04.01-decorations/#x_pos","title":"x_pos","text":"<p>This is the number of pixels horizontally from the anchor point that the decoration is positioned. It can be positive or negative. If omitted it takes a default value from the node layout fields. x_pos is not applicable if you specify an SVG path using the <code>path</code> field, because the SVG path can be used to position the shape.</p>"},{"location":"03.04.01-decorations/#y_pos","title":"y_pos","text":"<p>This is the number of pixels vertically from the anchor point that the decoration is positioned. It can be positive or negative. If omitted it takes a default value from the node layout fields. y_pos is not applicable if you specify an SVG path using the <code>path</code> field, because the SVG path can be used to position the shape.</p>"},{"location":"03.04.01-decorations/#width","title":"width","text":"<p>This is the width for the decorator in pixels. For an image decorator, it is the width of the rectangle surrounding the image. For a label decorator it is the width allowed for display of the label text. If omitted it takes a default value from the node layout fields for Node decorations and from the canvas layout properties for Link properties.</p>"},{"location":"03.04.01-decorations/#height","title":"height","text":"<p>This is the height for the decorator in pixels. For an image decorator, it is the height of the rectangle surrounding the image. For a label decorator it is the height allowed for display of the label text. If omitted it takes a default value from the node layout fields for Node decorations and from the canvas layout properties for Link properties.</p>"},{"location":"03.04.01-decorations/#hotspot","title":"hotspot","text":"<p>A Boolean. It defaults to false. When set to true the decoration becomes clickable and when it is clicked the decorationCallbackHandler is called with the ID of the decoration passed as a parameter.</p>"},{"location":"03.04.01-decorations/#class_name","title":"class_name","text":"<p>An optional class that will be applied to the decoration. You can add a style rule that references that class in your CSS to style the decoration and override the default styles.</p>"},{"location":"03.04.01-decorations/#outline","title":"outline","text":"<p>A Boolean. It defaults to true. When a decoration is specified with an image field the image is typically displayed with a outline rectangle around it and with an offset within the rectangle to improve presentation. If <code>outline</code> is set to <code>false</code> the outline rectangle is not displayed and the image is displayed without any offset from its specified <code>x_pos</code> and <code>y_pos</code>.</p>"},{"location":"03.04.01-decorations/#tooltip","title":"tooltip","text":"<p>A String. When specified, the string will be shown in a tooltip when the pointer is hovered over the decoration. No tip will be displayed if the <code>tooltip</code> property is omitted. Note: for decoration tooltips to be displayed on the canvas, the <code>decorations</code> property of the <code>tipConfig</code> object in the canvas config must be set to true (which is its default setting).</p>"},{"location":"03.04.01-decorations/#temporary","title":"temporary","text":"<p>A Boolean. It defaults to false. When set to true the decoration object will not be saved in the pipelineFlow document returned by the <code>CanvasController.getPipelineFlow()</code> method. Typically, this should be set to <code>true</code> when adding decorations programmatically to the nodes and links on the canvas.</p>"},{"location":"03.04.01-decorations/#notes","title":"Notes:","text":"<ol> <li>Using <code>x_pos</code> and <code>y_pos</code>, decorations can be displayed outside the node boundary.</li> <li>If no image or label or path is provided, the default decoration is a rectangle displayed with the class_name provided.</li> <li>You can specify as many decorations as you want by providing extra entries in the decorations array.</li> <li>Images and labels are positioned differently. For images, the position defined for the decoration is the top left corner of the image. For labels it is anchor point for the label which is the base line of the string in the vertical direction and is dependent on the text-anchor CSS property applied to the text. So if you apply the <code>text-anchor: middle</code> CSS property to the label in the style related to class_name the label will be centered on the point calculated for the position of the decoration.</li> </ol>"},{"location":"03.04.02-api-object-structure/","title":"API differences with schema","text":"<p>Because historically Common Canvas has had to deal with different external flow definitions, there are some differences between the nodes, comments and links that the canvas-controller API handles internally and those specified in the pipelineFlow schema. As follows:</p>"},{"location":"03.04.02-api-object-structure/#object-structure","title":"Object structure","text":"<p>For the API methods that involve nodes, comments and links, those objects are passed in and out by the API in their internal formats rather than the formats defined in the schema files.</p> <p>The internal structure is a somewhat flattened version of that in the schema definition. That means, properties that are in <code>&lt;object&gt;.app_data.ui_data</code> are flattened out and appear as properties in the <code>&lt;object&gt;</code> itself. So for example a node that conforms to the schema might look like this: <pre><code>    {\n      id: \"1234\",\n      op: \"select\",\n      ...\n      app_data : {\n        ui_data: {\n          label: \"Selection node\",\n          image: \"/images/select.svg\",\n          description: \"A node for selection\"\n          ...\n        },\n        other_data: {\n          prop1: \"Something interesting\"\n        }\n      }\n    }\n</code></pre> whereas when it is passed through the API it looks like this: <pre><code>    {\n      id: \"1234\",\n      op: \"select\",\n      label: \"Selection node\",\n      image: \"/images/select.svg\",\n      description: \"A node for selection\"\n      ...\n      app_data : {\n        other_data: {\n          prop1: \"Something interesting\"\n        }\n      }\n    }\n</code></pre> Note that, any properties in <code>app_data</code>, other than <code>ui_data</code>, are preserved in the internal format. So in the example, <code>app_data.other_data</code> in the schema format is preserved in the internal format.</p>"},{"location":"03.04.02-api-object-structure/#links-handing-in-the-api","title":"Links handing in the API","text":"<p>The other difference between the API and the schema formats is with links.</p> <p>In the pipeline flow schema, links are typically defined as properties within another object, for example, a node to node link is defined within a <code>links</code> array inside the <code>inputs</code> field of the target node and contains references to the <code>node id</code> and <code>port</code> of the source node. Also, links from comments to nodes are stored as an array in the comment object.</p> <p>However, in the API and internally in Common Canvas, links are treated as a top level object; that is, there is an array of links stored internally which can be manipulated using the API methods. Each link has a unique ID. Consequently, links can be retrieved from the API by their ID field and properties of the links can be updated again by identifying the links using their ID. If you do not specify an ID for links in your pipelineFlow document a unique global ID will be generated for each link when the pipeline flow is loaded.</p>"},{"location":"03.04.03-creating-new-canvas-nodes/","title":"Creating New Canvas Nodes","text":""},{"location":"03.04.03-creating-new-canvas-nodes/#introduction","title":"Introduction","text":"<p>The host application code can programmatically create nodes on the canvas in two ways:</p> <ul> <li> <p>By calling CanvasController API methods to create and add the node to the canvas.</p> </li> <li> <p>Creating and adding a node to the Pipeline Flow document</p> </li> </ul>"},{"location":"03.04.03-creating-new-canvas-nodes/#creating-and-adding-a-node-to-the-canvas-controller-api","title":"Creating and adding a node to the Canvas Controller API","text":"<p>The following code will programmatically add a node to the canvas. These commands will update the common-canvas object model directly and will not be added to the command stack so the user will not be able to <code>undo</code> / <code>redo</code> these actions. Also, the <code>beforeEditActionHandler</code> and <code>editActionHandler</code> callbacks will not be called for these actions.</p> <p>First you can get a node template from the canvas by calling <pre><code>    const template = canvasController.getPaletteNode(\"sort\");\n</code></pre> where the parameter is the operation (<code>op</code> field) for the palette node. Alternatively, you can retrieve a node template using this method: <pre><code>    const template = canvasController.getPaletteNodeById(nodeId)\n</code></pre> which returns the node template based on the node ID. This can be useful if you have supernodes in your palette because supernodes do not have an <code>op</code> field. After creating the node template your code can alter fields (for example, the label) within the template. If you do change any fields be careful because Common Canvas doesn\u2019t do any error checking on your fields.</p> <p>Next you create the node: <pre><code>    const newNode = canvasController.createNode({\n            nodeTemplate: template,\n            offsetX: 200,\n            offsetY: 400\n});\n</code></pre> This will work correctly for regular nodes, and also supernodes, that have been pulled from the palette.</p> <p>Next you add the node object to the canvas. <pre><code>    canvasController.addNode(newNode);\n</code></pre> The node will appear at the offsetX, offseY position within the coordinate system for the canvas.</p>"},{"location":"03.04.03-creating-new-canvas-nodes/#if-command-stack-is-needed","title":"If command stack is needed","text":"<p>This method allows the host application to create a node, or supernode, from a palette template object by creating and executing a command which will be added to the command stack (so the user can <code>undo</code> / <code>redo</code> it) and will also cause the <code>beforeEditActionHandler</code> and <code>editActionHandler</code> callbacks  to be called.</p> <p>First your code retrieves a node template from the palette as described above and then calls this method: <pre><code>    const data = {\n        nodeTemplate: template,\n        offsetX: 200,\n        offsetY: 400\n    };\n\n    canvasController.createNodeCommand(data, pipelineId)\n</code></pre></p> <p>Note: If <code>pipelineId</code> is omitted the node will be created in the current \u201ctop-level\u201d pipeline.</p>"},{"location":"03.04.03-creating-new-canvas-nodes/#creating-and-adding-a-node-using-pipeline-flow-document","title":"Creating and adding a node using Pipeline Flow document","text":"<p>This approach works by your code adding one or more JSON objects directly to the pipeline flow object, either before the pipeline flow document is loaded into Common Canvas using <code>CanvasController.setPipelineFlow(pFlow)</code>, or afterwards by retrieving the pipeline flow object from Common Canvas using <code>CanvasController.getPipelineFlow()</code> and then updating the nodes array of whichever pipeline you want to modify. This would require your code to navigate to the <code>pipeline</code> object (that you want to update) in the <code>pipelines</code> array of the pipeline flow and then add the node object to the <code>nodes</code> array in the pipeline object.</p> <p>After updating the pipeline flow object your code would need to reload it into Common Canvas using <code>CanvasController.setPipelineFlow(pFlow)</code>.</p> <p>To use this approach you would need a good understanding of the pipeline flow schema and pipeline flow UI schema.</p>"},{"location":"03.04.05-notification-messages/","title":"Notification Messages","text":""},{"location":"03.04.05-notification-messages/#notification-message-structure","title":"Notification Message structure.","text":"<p>Notification messages are displayed in the notification panel which the user can access by clicking the Notifications button in the toolbar. The application specifies an array of messages using the notification methods in the canvas controller. The appearance of the panel is customized in the Notification Config.</p> <p>The application passes to Common Canvas an array of messages each described by a simple JavaScript object like this: <pre><code> {\n    id: &lt;string&gt;,\n    type: &lt;string&gt;,\n    title: &lt;string or JSX object&gt;,\n    content: &lt;string or JSX object&gt;,\n    timestamp: &lt;string&gt;,\n    callback: &lt;function&gt;,\n    closeMessage: &lt;string or JSX object&gt;\n}\n</code></pre> where:</p> <ul> <li> <p>id (string, required): this is a unique ID assigned to the notification message. This is passed as a parameter in the callback (see below) and is used to reference messages when deleting them through the <code>CanvasController</code> API.</p> </li> <li> <p>type (string, required): this must be one of four values: \u201cinfo\u201d, \u201csuccess\u201d, \u201cwarning\u201d, or \u201cerror\u201d. If <code>type</code> is null, empty string, or undefined, the message type will be \u201cunspecified\u201d.</p> </li> <li> <p>title (string or JSX object): the title of the notification message.</p> </li> <li> <p>content (string or JSX object): the body of the notification message.</p> </li> <li> <p>callback (function): an optional callback function that will be called when the notification message is clicked. Callback function is called with one parameter, <code>id</code></p> </li> <li> <p>timestamp (string or JSX object): an optional timestamp that will be rendered in a separate section with different formatting, if passed in</p> </li> <li> <p>closeMessage (string or React object): an optional message that, if passed in, will display as clickable. Clicking on this will delete this individual message. If none is passed in, no delete option will be shown.</p> </li> </ul>"},{"location":"03.04.06-styling-objects/","title":"Styling Canvas Objects","text":"<p>There are multiple was to specify the styles for the objects Common Canvas displays:</p> <ul> <li>A class name can be provided for nodes either within the pipelineFlow document or</li> <li>The common-canvas default styes can be overriden within your CSS or SCSS file</li> </ul> <p>For more precise styling of objects the style specification object can be used to provide a number of styles to Common Canvas to set the inline styles on numerous elements of an object. For example, a node is made up of: a selection outline; a node body (rectangle); an image, a label etc.</p> <p>Style specifications may be applied to common-canvas objects using the following Canvas Controller methods: <pre><code>setObjectsStyle()\nsetObjectsMultiStyle()\nsetLinksStyle()\nsetLinksMultiStyle()\nsetSubdueStyle()\n</code></pre> and may be retrieved for objects using: <pre><code>getNodeStyle()\ngetCommentStyle()\ngetLinkStyle()\n</code></pre></p> <p>The style spec for a node can set the styles for all these elements in one shot. Here is a template of a style spec for a node: <pre><code>{\n    body: { default: &lt;css_snippet&gt;, hover: &lt;css_snippet&gt; },\n    image: { default: &lt;css_snippet&gt; },\n    label: { default: &lt;css_snippet&gt; },\n    selection_outline: { default: &lt;css_snippet&gt; }\n}\n ```\nAnd here is a real example:\n```js\n{\n    body: {\n        default: \"fill: coral; stroke: red;\",\n        hover: \"fill: cornflowerblue; stroke: blue;\"\n    }\n};\n</code></pre></p> <p>Here is a template for styling a comment:</p> <pre><code>{\n    body: { default: &lt;css_snippet&gt;, hover: &lt;css_snippet&gt; },\n    text: { default: &lt;css_snippet&gt; },\n    selection_outline: { default: &lt;css_snippet&gt; },\n}\n</code></pre> <p>And here is a template for styling a link: <pre><code>{\n    line: { default: &lt;css_snippet&gt; , hover: &lt;css_snippet&gt;  }\n}\n</code></pre></p> <ul> <li><code>&lt;css_snippet&gt;</code> - is a string containing any CSS code that can be added inline to an SVG object. That means, for example, you need to use fill and stroke for colors etc  It is recommended NOT to change the sizes of text fonts.</li> </ul> <p>The CSS will be applied to the element of the object specified, either as the default inline style or as the style when the pointer hovers over the object.</p> <p>When a hover style is applied to a graphical element it is applied in addition to the default style so there is no need to repeat styles in the hover <code>&lt;css_snippet&gt;</code> because they will augment the default style.</p> <p>Because styles are applied as in-line styles they will override any styles provided in your application\u2019s CSS and specified to Common Canvas through the class_name field of canvas objects.</p> <p>If the <code>&lt;css_snippet&gt;</code> is specified as null the current style will be removed from the specified element of the object.</p> <p>Finally, styles can be applied to your nodes, comments and links as either temporary or permanent styles by specifying the <code>temporary</code> boolean in the API methods. A temporary style is just applied for the duration of the session and are not persisted. You should use <code>temporary=true</code> styles that represent transient attributes of an object that should not be persisted in the pipelineFlow document. Use <code>temporary=false</code> styles for styles that you want to persist in the pipelineFlow document.</p>"},{"location":"03.05-keyboard-support/","title":"Keyboard support","text":"<p>Common Canvas supports a number of keyboard interactions as described below. Some keyboard shortcuts are only available if the config field <code>enableKeyboardNavigation</code> is set to <code>true</code> as indictaed above each table.</p> <p>When any of the shortcut keys are pressed, if the shortcut has an action (listed below), Common Canvas will follow the same procedure as if the action was initiated from a context menu or from the canvas toolbar or by direct manipulation on the canvas. That is, it will: call the beforeEditActionHandler and the editActionHandler callbacks, with the <code>data.editType</code> parameter set to the action name and the <code>data.editSource</code> parameter set to \u201ckeyboard\u201d; it will then update the object model with the change and refresh the flow editor display.</p> <p>Note: In the tables below: * \u201cMeta\u201d means either the Command key (\u2318) on the Mac or, on Windows, the Windows key (\u229e) or Control key (Ctrl). * \u201cAlt\u201d means either the Option key (\u2325) on the Mac or, on Windows, the Alternative key (Alt).</p>"},{"location":"03.05-keyboard-support/#flow-editor","title":"Flow Editor","text":""},{"location":"03.05-keyboard-support/#when-focus-is-in-the-flow-editor-either-on-the-background-or-on-a-flow-editor-object","title":"When focus is in the flow editor, either on the background or on a flow editor object","text":"<p>The shortcuts in this table are always available. The application can disable these actions by providing the keyboard config object to the common-canvas React component.</p> Keyboard Shortcut Action Description Meta + a selectAll Selects alll objects Meta  + Shift + a deselectAll Deselects all objects [delete key] deleteSelectedObjects Delete currently selected objects [backspace key] deleteSelectedObjects Delete currently selected objects Meta + x cut Cut selected objects to the clipboard Meta + c copy Copy selected objects to the clipboard Meta + v paste Paste objects from the clipboard. If the mouse cursor is over the canvas, objects will be pasted at the cursor position or, if not, at a default position Meta + z undo Undo last command Meta + Shift + z redo Redo last undone command Meta + y redo Redo last undone command <p>The shortcuts in this table are only available when the canvas config field enableKeyboardNavigation is set to <code>true</code>.</p> Keyboard Shortcut Action Description [tab key] - Moves keyboard focus to the next group of objects in the flow editor Shift + [tab key] - Moves keyboard focus to the previous group of objects in the flow editor Meta + Shift + [plus key] zoomIn Zoom in the flow editor Meta + Shift + [minus key] zoomOut Zoom out the flow editor Meta + Shift + [zero key] zoomToFit Zooms to fit the flow obejcts within the flow editor viewport Meta + Shift + [up arrow key] - Pans the flow obejcts within the flow editor viewport upwards Meta + Shift + [down arrow key] - Pans the flow obejcts within the flow editor viewport downwards Meta + Shift + [left arrow key] - Pans the flow obejcts within the flow editor viewport to the left Meta + Shift + [right arrow key] - Pans the flow obejcts within the flow editor viewport to the right Meta + [slash key] - Displays a content menu or context toolbar (depending on which is enabled) for the focused object"},{"location":"03.05-keyboard-support/#when-focus-is-on-an-object-node-comment-or-link-in-the-flow-editor","title":"When focus is on an object (node, comment or link) in the flow editor","text":"<p>The shortcuts in this table are only available when the canvas config field enableKeyboardNavigation is set to <code>true</code>.</p> Keyboard Shortcut Action Description [right arrow key] - Moves focus to next object in the group [left arrow key ] - Moves focus to previous object in the group [return key] - Selects the focused object Meta + [return key] - Selects the focused object and adds it to the current set of selected objects Shift + [return key] - Selects a range of nodes through from from the currently selected object to the focused object [up arrow key] - When the focused object is a link, moves focus to the previous sibling link [down arrow key] - When the focused object is a link, moves focus to the next sibling link Meta + [slash key] - Displays a content menu or context toolbar (depending on which is enabled) for the focused object Meta + [up arrow key] moveObjects Moves the focused object, with any other selected objects, upwards Meta + [down arrow key] moveObjects Moves the focused object, with any other selected objects, downwards Meta + [left arrow key] moveObjects Moves the focused object, with any other selected objects, to the left Meta + [right arrow key] moveObjects Moves the focused object, with any other selected objects, to the right Shift + [up arrow key] resizeObjects Reduces the height of the focused comment or node (if <code>enableResizableNodes</code> is true) Shift + [down arrow key] resizeObjects Increases the height of the focused comment or node (if <code>enableResizableNodes</code> is true) Shift + [left arrow key] resizeObjects Reduces the width of the focused comment or node (if <code>enableResizableNodes</code> is true) Shift + [right arrow key] resizeObjects Increases the width of the focused comment or node (if <code>enableResizableNodes</code> is true) Meta + Shift + [right angle bracket key] - When the focused object is a node, creates a link to it from the currently selected node or comment Alt + [up arrow key] - When the focused object is a comment and contains scrollable text, scrolls the text down Alt + [down arrow key] - When the focused object is a comment and contains scrollable text, scrolls the text up"},{"location":"03.05-keyboard-support/#text-entry","title":"Text Entry","text":"<p>The shortcuts in this table are only available when the canvas config field enableKeyboardNavigation is set to <code>true</code>.</p> Keyboard Shortcut Action Description [esc key] - Cancels the text entry and discards any changes Shift + [return key] - Completes the text entry and saves the changes made [return key] - When allowReturnKey is set to \u201csave\u201d, completes the text entry and saves the changes made. Otherwise, it enters a new line into the text [tab key] - When focus is on the text entry area, moves focus to the text toolbar [tab key] - When focus is on the text toolbar, moves focus to the text entry area Markdown text Meta + b - Insert \u2018bold\u2019 syntax around the selected text Meta + i - Insert \u2018italics\u2019 syntax around the selected text Meta + Shift + x - Insert \u2018strikethrough\u2019 syntax around the selected text Meta + Shift + 7 - Insert \u2018numbered list\u2019 syntax around the selected text Meta + Shift + 8 - Insert \u2018bulleted list\u2019 syntax around the selected text Meta + e - Insert \u2018code\u2019 syntax around the selected text Meta + k - Insert \u2018link\u2019 syntax around the selected text Meta + Shift + [right angle bracket] - Insert \u2018quote\u2019 syntax around the selected text Meta + [right angle bracket] - Increases number of hashes in front of the selected text Meta + [left angle bracket] - Decreases number of hashes in front of the selected text"},{"location":"03.05-keyboard-support/#toolbar","title":"Toolbar","text":"Keyboard Shortcut Action Description [right arrow key] - When focus is on a button in the toolbar, move focus to the button to the right of current focus position. When focus in on a menu item, opens any available sub-menu or sub-panel [left arrow key] - When focus is on a button in the toolbar, move focus to the button to the left of current focus position. When focus is on a sub-menu or sub-panel, closes the area and moves focs to the parent menu. [down arrow key] - When focus is on a button in the toolbar, opens sub-area (either a sub-menu or sub-panel) below button, if one is available. When focus is on a sub-menu, moves focus to the next menu entry. [up arrow key] - When focus is on a sub-menu, moves focus to the previous menu entry. [space bar] - Activate the button [return key] - Activate the button [esc key] - Close any open associated sub-area (either a sub-menu or sub-panel)"},{"location":"03.05-keyboard-support/#palette","title":"Palette","text":""},{"location":"03.05-keyboard-support/#when-focus-is-on-the-search-area","title":"When focus is on the Search area","text":"Keyboard Shortcut Action Description [tab key] - Moves focus to first category. Shift + [tab key] - Moves focus out of the palette."},{"location":"03.05-keyboard-support/#when-focus-is-on-a-category","title":"When focus is on a category","text":"Keyboard Shortcut Action Description [tab key] - Moves focus to the next category. Shift + [tab key] - Moves focus to the previous category. [down arrow key] - When the category is open, moves focus to first node in the category."},{"location":"03.05-keyboard-support/#when-focus-is-on-node-in-a-category","title":"When focus is on node in a category","text":"Keyboard Shortcut Action Description Tab - Moves focus to the next category. Shift + [tab key] - Moves focus to the parent category. [down arrow] - Moves the focus down to next node in the category. [up arrow] - Moves focus up to previous node in the category. [space bar] createNodeAttachLinks Adds the node to the canvas and links it to an available existing node on canvas. Same as double clicking the node Shift + [space bar] createNodeAttachLinks (addLinks: false) Adds the node to the canvas and does not create any links. Same as dragging a node onto the canvas."},{"location":"03.05-keyboard-support/#context-toolbar-menu","title":"Context toolbar / menu","text":"Keyboard Shortcut Action Description [down arrow key] - Move focus to next menu item below current focus position [up arrow key] - Move focus to next menu item above current focus position [right arrow key] - Opens cascade sub-area, if there is one, for the currenty focused item [space bar key] - Activate the current menu item [esc key] - Close the sub-area"},{"location":"03.06.01-node-customization/","title":"Node Customization","text":"<p>Node appearance and behavior can be customized using:</p> <ul> <li>Setting Canvas Config fields specific to nodes</li> <li>Customizing Layout Fields (see below)</li> <li>Customizing node colors and styles with CSS (see below)</li> </ul>"},{"location":"03.06.01-node-customization/#customizing-layout-fields","title":"Customizing Layout fields","text":""},{"location":"03.06.01-node-customization/#node-layout-fields","title":"Node layout fields","text":"<p>Node layout properties define how all the elements of a node are displayed such as: the position and size of the icon image; the position of the main label; even the shape of the node itself.</p> <p>There are two possible sets of node layout properties provided by Common Canvas, these are controlled by the <code>enableNodeFormatType</code> canvas configuration property which can be set to either \u201cHorizontal\u201d or \u201cVertical\u201d.</p> <p></p>"},{"location":"03.06.01-node-customization/#default-values-for-node-layout-properties","title":"Default values for node layout properties","text":"<p>The possible node layout properties are shown below with the values they have when <code>enableNodeFormatType = \"Horizontal\"</code>. You can see the values for both sets of properties by looking at the layout-dimensions.js program</p> Default node layout fields for <code>Horizontal</code> node format <pre><code>// Default node sizes. These dimensions might be overridden for nodes that have\n// more ports than will fit in the default size if inputPortAutoPosition is.\n// set to true and outputPortAutoPosition is set to true. (See below).\ndefaultNodeWidth: 160,\ndefaultNodeHeight: 40,\n\n// A space separated list of classes that will be added to the group &lt;g&gt;\n// DOM element for the node.\nclassName: \"\",\n\n// Displays the node outline shape underneath the image and label.\nnodeShapeDisplay: true,\n\n// Default node shape. Can be \"rectangle\" or \"port-arcs\". Used when nodeOutlineDisplay is true.\nnodeShape: \"port-arcs\",\n\n// An SVG path or a function that returns an SVG path. The paths define the node\n// shape and its selection highlighting respectively. If set to null, the paths\n// will be set by default based on the nodeShape setting.\n// If these fields are set to functions they will be called in real-time as the node\n// is being sized (provided enableResizableNodes config field is set to true).\nbodyPath: null,\nselectionPath: null,\n\n// Displays the external object specified, as the body of the node\nnodeExternalObject: false,\n\n// Display image\nimageDisplay: true,\n\n// Image dimensions\nimageWidth: 26,\nimageHeight: 26,\n\n// Image position\nimagePosition: \"topLeft\",\nimagePosX: 6,\nimagePosY: 7,\n\n// Display label\nlabelDisplay: true,\n\n// Label dimensions\nlabelWidth: 112,\nlabelHeight: 19,\n\n// Label position\nlabelPosition: \"topLeft\",\nlabelPosX: 36,\nlabelPosY: 12,\n\n// Label appearance\nlabelEditable: false,\nlabelAlign: \"left\", // can be \"left\" or \"center\"\nlabelSingleLine: true, // false allow multi-line labels\nlabelOutline: false,\nlabelMaxCharacters: null, // null allows unlimited characters\nlabelAllowReturnKey: false, // true allows line feed to be inserted into label, \"save\" to make the return key save the label.\n\n// An array of decorations to be applied to the node. For details see:\n// https://elyra-ai.github.io/canvas/03.04.01-decorations/\n// These are added to the node at run time and will not be saved into\n// the pipeline flow.\ndecorations: [],\n\n// Positions and dimensions for 9 enumerated default decorator positions.\n// decoratorWidth and decoratorHeight are the dimensions of the outline\n// rectangle and decoratorPadding is the padding for the image within the\n// outline rectangle.\ndecoratorTopY: 2,\ndecoratorMiddleY: -8,\ndecoratorBottomY: -18,\n\ndecoratorLeftX: 2,\ndecoratorCenterX: -8,\ndecoratorRightX: -30,\n\n// Width, height and padding for image decorators\ndecoratorWidth: 16,\ndecoratorHeight: 16,\ndecoratorPadding: 2,\n\n// Width and height for label decorators\ndecoratorLabelWidth: 80,\ndecoratorLabelHeight: 30,\n\n// Display drop shadow under and round the nodes\ndropShadow: true,\n\n// The gap between a node and its selection highlight rectangle\nnodeHighlightGap: 1,\n\n// The size of the node sizing area that extends around the node, over\n// which the mouse pointer will change to the sizing arrows.\nnodeSizingArea: 10,\n\n// Error indicator dimensions\nerrorPosition: \"topLeft\",\nerrorXPos: 24,\nerrorYPos: 5,\nerrorWidth: 10.5,\nerrorHeight: 10.5,\n\n// When sizing a supernode this decides the size of the corner area for\n// diagonal sizing.\nnodeCornerResizeArea: 10,\n\n// What point to draw the data links from and to when enableLinkType is set\n// to \"Straight\" and enableLinkMethod is set to \"Freeform\".\n// Possible values are \"image_center\" or \"node_center\".\ndrawNodeLinkLineFromTo: \"node_center\",\n\n// What point to draw the comment to node link line to. Possible values\n// are \"image_center\" or \"node_center\".\ndrawCommentLinkLineTo: \"node_center\",\n\n// This is the size of the horizontal line protruding from the\n// port on the source node when drawing an elbow or straight connection line.\nminInitialLine: 30,\n\n// For the elbow connection type with nodes with multiple output ports,\n// this is used to increment the minInitialLine so that connection lines\n// do not overlap each other when they turn up or down after the elbow.\nminInitialLineIncrement: 8,\n\n// This is the minimum size of the horizontal line entering the\n// target port on the target node when drawing an Elbow connection line.\nminFinalLine: 30,\n\n// Display input ports.\ninputPortDisplay: true,\n\n// Object for input port can be \"circle\" or \"image\".\ninputPortObject: \"circle\",\n\n// If input port object is \"image\" use this image.\ninputPortImage: \"\",\n\n// If input port dimensions for \"image\".\ninputPortWidth: 12,\ninputPortHeight: 12,\n\n// Indicates whether multiple input ports should be automatically\n// positioned (true) or positioned based on the contents of\n// inputPortPositions array (false).\ninputPortAutoPosition: true,\n\n// An array of input port positions. Each element is structured like\n// this: { x_pos: 5, y_pos: 10, pos: \"topLeft\" }. x_pos and y_pos are\n// offsets from the pos point on the node.\n// The order of the elements corresponds to the order of ports in the\n// inputs array for the node.\ninputPortPositions: [\n    { x_pos: 0, y_pos: 20, pos: \"topLeft\" }\n],\n\n// The 'guide' is the object drawn at the mouse position as a new line\n// is being dragged outwards.\n// Object for input port guide can be \"circle\" or \"image\".\ninputPortGuideObject: \"circle\",\n\n// If input port guide object is \"image\" use this image.\ninputPortGuideImage: \"\",\n\n// Display output ports.\noutputPortDisplay: true,\n\n// Object for output port can be \"circle\" or \"image\".\noutputPortObject: \"circle\",\n\n// If output port object is \"image\" use this image.\noutputPortImage: \"\",\n\n// Output port dimensions for \"image\".\noutputPortWidth: 12,\noutputPortHeight: 12,\n\n// Indicates whether multiple output ports should be automatically\n// positioned (true) or positioned based on the contents of\n// outputPortPositions array (false).\noutputPortAutoPosition: true,\n\n// An array of output port positions. Each element is structured like\n// this: { x_pos: 5, y_pos: 10, pos: \"topRight\" }. x_pos and y_pos are\n// offsets from the pos point on the node.\n// The order of the elements corresponds to the order of ports in the\n// outputs array for the node.\noutputPortPositions: [\n    { x_pos: 0, y_pos: 20, pos: \"topRight\" }\n],\n\n// The 'guide' is the object drawn at the mouse position as a new line\n// is being dragged outwards.\n// Object for output port guide can be \"circle\" or \"image\".\noutputPortGuideObject: \"circle\",\n\n// If output port guide object is \"image\" use this image.\noutputPortGuideImage: \"\",\n\n// Automatically increases the node size to accommodate its ports so both\n// input and output ports can be shown within the dimensions of\n// the node.\nautoSizeNode: true,\n\n// Radius of the either the input or output ports when they are set to \"circle\"\nportRadius: 3,\n\n// Size of an offset above and below the set of port arcs.\nportArcOffset: 3,\n\n// Radius of an imaginary circle around the port. This controls the\n// spacing of ports and the size of port arcs when nodeShape is set to\n// port-arcs.\nportArcRadius: 6,\n\n// Spacing between the port arcs around the ports.\nportArcSpacing: 3,\n\n// Position of the context toolbar realtive to the node. Some adjustment\n// will be made to account for the width of the toolbar.\ncontextToolbarPosition: \"topRight\",\n\n// Display of vertical ellipsis to show context menu\nellipsisDisplay: true,\nellipsisPosition: \"topLeft\",\nellipsisWidth: 10,\nellipsisHeight: 22,\nellipsisPosX: 145,\nellipsisPosY: 9,\nellipsisHoverAreaPadding: 2\n</code></pre>"},{"location":"03.06.01-node-customization/#node-element-positioning","title":"Node Element positioning","text":"<p>Node elements are positioned on the node as an x/y offset from one of nine positions:</p> <p></p> <p>The default for most elements is <code>topLeft</code>. The position is useful when nodes are resizable because, as a node is resized, the element will remain tied to its position. So if, for example, an element is tied to <code>topRight</code> and the node is resized to be wider the element will move to remain at the same offset from the <code>topRight</code> position.</p> <p>The PosX and PosY properties for each element is an offset from the associated anchor position where PosX is the number of pixels to the right of the anchor position and PosY is a number of pixels down from the anchor position. Negative values can be provided to specify an offset to the left and up from the anchor position.</p> <p>For example, these settings: <pre><code>    {\n        imagePosition: \"middleCenter\",\n        imagePosX: -10,\n        imagePosY: -10,\n        imageWidth: 20,\n        imageHeight: 20\n    }\n};\n</code></pre> would position the image 10 pixels left and 10 pixels above the very center of the node. Since the image is 20 x 20 pixels this would position the center of the image at the center of the node. If you have enabled re-sizeable nodes, this would keep the image centrally positioned while the node is being resized by the user. Like this:</p> <p></p>"},{"location":"03.06.01-node-customization/#overriding-the-node-layout-properties-for-all-nodes","title":"Overriding the node layout properties for all nodes","text":"<p>If you want to change the appearance of all nodes on your canvas you can specify the <code>enableNodeLayout</code> configuration parameter in the canvas configuration object. The properties from this object will replace any properties in the default set, which was chosen based on the settings of <code>enableNodeFormatType</code>. So you don\u2019t need to provide all of the properties; just the ones you want to replace.</p> <p>Let\u2019s say you want your nodes to be displayed as ellipses. You could provide the following settings in <code>enableNodeLayout</code> in the canvas config: <pre><code>const canvasConfig = {\n    enableNodeLayout: {\n        bodyPath: \"     M  0 30 Q  0  0 60  0 Q 120  0 120 30 Q 120 60 60 60 Q  0 60  0 30 Z\",\n        selectionPath: \"M -5 30 Q -5 -5 60 -5 Q 125 -5 125 30 Q 125 65 60 65 Q -5 65 -5 30 Z\",\n        defaultNodeWidth: 120,\n        defaultNodeHeight: 60,\n        imageWidth: 30,\n        imageHeight: 30,\n        imagePosX: 20,\n        imagePosY: 10,\n        labelEditable: true,\n        labelPosX: 60,\n        labelPosY: 37,\n        labelWidth: 90,\n        labelHeight: 17, // Should match the font size specified in CSS + padding\n        ellipsisDisplay: true,\n        ellipsisPosX: 100,\n        ellipsisPosY: 20,\n        portPosY: 30\n    }\n};\n</code></pre></p>"},{"location":"03.06.01-node-customization/#overriding-the-node-layout-fields-for-individual-nodes-or-groups-of-nodes","title":"Overriding the node layout fields for individual nodes or groups of nodes","text":"<p>If you want each node, or category of nodes, to have a different layout based on some criteria you can use the layoutHandler callback method. When you specify this callback method to Common Canvas, it will be called for each node on the canvas, during initialization and, occasionally, at other times.</p> <p>The method should return a simple JavaScript object that contains any node layout properties you want to override from the defaults and the ones specified in the <code>enableNodeLayout</code> field in the canvas config.</p> <p>Info</p> <p>There are three levels of properties provided where each overrides the previous set:</p> <ol> <li>First Common Canvas takes the full default set of node layout fields based on the value for <code>enableNodeFormatType</code>.</li> <li>Next Common Canvas overrides these with the fields from the <code>enableNodeLayout</code> object in the canvas config, if any are provided.</li> <li>Finally, Common Canvas overrides the combined set with any fields from the object returned from the <code>layoutHandler</code> method if one is specified, for the node in question.</li> </ol> <p>The callback is provided with a <code>data</code> parameter which is the node object from the pipelineFlow so your code can examine the node object and return node layout properties as appropriate.</p> <p>Tip</p> <p>The <code>layoutHandler</code> callback is called while the canvas is being displayed, therefore it must return very quickly each time it is called otherwise your canvas display speed will be slowed down.</p> <p>Here is a simple example of a <code>layoutHandler</code> callback method which will override the width of the node based on the width of the main label for any node where the node\u2019s <code>op</code> field is set to <code>Sort</code>: <pre><code>layoutHandler(data) {\n    let customNodeLayout = {};\n    if (data.op === \"Sort\") {\n        const labLen = data.label ? data.label.length : 0;\n        const width = (labLen * 9) + 30; // Allow 9 pixels for each character and a bit extra for padding\n        customNodeLayout = {\n            defaultNodeWidth: width // Override default width with calculated width\n        };\n    }\n    return customNodeLayout;\n</code></pre></p>"},{"location":"03.06.01-node-customization/#overriding-port-positions-and-link-directions","title":"Overriding port positions and link directions","text":"<p>The four options for enableLinkDirection in the canvas config are \u201cLeftRight\u201d, \u201cRightLeft\u201d, \u201cTopBottom\u201d and \u201cBottomTop\u201d. These will control the default position of the input and output ports at the boundaries of the nodes as follows:</p> <ul> <li>For \u201cLeftRight\u201d input ports will be on the left of the node and output ports will be on the right of the node</li> <li>For \u201cRightLeft\u201d input ports will be on the right of the node and output ports will be on the left of the node</li> <li>For \u201cTopBottom\u201d input ports will be on the top of the node and output ports will be on the bottom of the node</li> <li>For \u201cBottomTop\u201d input ports will be on the bottom of the node and output ports will be on the top of the node</li> </ul> <p>The application can customize these port default positions using the <code>enableNodeLayout</code> object in the canvas config. This object has these fields for port placement customization:</p> <ul> <li><code>inputPortAutoPosition</code> and <code>inputPortPositions</code> to customize input ports and</li> <li><code>outputPortAutoPosition</code> and <code>outputPortPositions</code> to customize output ports.</li> </ul> <p>So for example, the following settings:</p> <pre><code>    const config = {\n        enableNodeLayout: {\n            inputPortAutoPosition: false,\n            inputPortPositions: [\n                { x_pos: 0, y_pos: 5, pos: \"topLeft\" },\n                { x_pos: 0, y_pos: -5, pos: \"bottomLeft\" }\n            ]\n        }\n    };\n</code></pre> <p>will position the input ports like this:</p> <p></p> <p>If nodes are set to be resizeable (enableResizableNodes set to <code>true</code>) and the nodes is resized it will look like this, because the second port is tied to the \u201cbottomLeft\u201d position:</p> <p></p> <p>When ports are positioned on the node, regardless of whether they are positioned by default or have customized positions, they are assigned one of four \u2018directions\u2019 that links will be drawn to/from. These directions are dependent on the diagonal quadrant of the node the port is positioned within.</p> <p>As an extreme example, if these fields are used to customize a node with four input ports (black circles) and four output ports (blue arrows) like this:</p> <p></p> <p>Common Canvas will assign a direction to the input and output ports are follows:</p> <p></p> <p>If the config field enableLinkMethod is set to \u201cPorts\u201d, and enableLinkType is set to \u201cCurve\u201d, the links will be drawn as follows:</p> <p></p> <p>This means an application like the one shown below can be built, where the links exit from the left of the \u2018Inp_1\u2019 node and point to the \u2018Stage Variables\u2019 node below it. Meanwhile, other links exist the \u2018Inp_1\u2019 node on its right and point to the \u2018Out_2\u2019 node. This is achieved by positioning some (invisible) output nodes on the left of \u2018Inp_1\u2019 and some on the right of \u2018Inp_1\u2019. Common Canvas takes care of drawing the links in the appropriate direction based on the port positions.</p> <p></p>"},{"location":"03.06.01-node-customization/#node-images","title":"Node Images","text":"<p>For most flows, nodes are defined with an image (icon) that conveys the purpose of the node. They are displayed for the nodes in the flow and the palette. The nodes image can be provided as a URL or JSX object. Images can also be customized using node layout fields.</p>"},{"location":"03.06.01-node-customization/#node-image-layout-fields","title":"Node image layout fields","text":"<p>The following fields can be set in the node layout to customize images within a node: <pre><code>    // Display image\n    imageDisplay: true,\n\n    // Image dimensions\n    imageWidth: 26,\n    imageHeight: 26,\n\n    // Image position\n    imagePosition: \"topLeft\",\n    imagePosX: 6,\n    imagePosY: 7,\n</code></pre></p>"},{"location":"03.06.01-node-customization/#node-image-as-a-url","title":"Node image as a URL","text":"<p>Typically, the image field of a node object in the pipeline flow (or palette) is a URL that references an image file on the server. This can be any type of image that can be displayed in an <code>&lt;image&gt;</code> tag however, if the file is recognized as an SVG file by having the <code>.svg</code> extension, the contents of the file will be loaded as inline SVG in the DOM. This allows more image customization using CSS.</p> <p>The loading and management of images can be controlled using the <code>enableImageDisplay</code> canvas config field.</p> <p>Data URLs</p> <p>Data URLs can be used to embed an image file within the pipeline flow JSON however, this is not recommended for production use since it leads to bloated pipeline flow files because of the amount of data stored for each image and the repetition of images across multiple nodes of the same type.</p> <p>Alternative palette image</p> <p>The node definition contains a palette image field which, if specified, will be displayed as the node\u2019s image only on the palette.</p>"},{"location":"03.06.01-node-customization/#node-image-as-jsx","title":"Node image as JSX","text":"<p>Images can also be provided to Common Canvas as JSX objects. This means, for example, that the application can provide Carbon icons as node images in the palette and on the canvas. Since JSX objects cannot be stringified, the application must programmatically set the node image field to reference the appropriate JSX object.</p> <p>Also, when data is retrieved from Common Canvas using either <code>canvasController.getPipelineFlow()</code> or <code>canvasController.getPaletteData()</code>, the returned node object will not contain any image information.</p> <p>The node image can be set something like this (where \u201c123\u201d is the node Id):</p> <p><pre><code>    import { JoinInner } from \u201c@carbon/react/icons\u201d:\n    ...\n    ...\n    canvasController.setNodeProperties(\"123\", { image: (&lt;JoinInner size={20} /&gt;) });\n</code></pre> Alternatively, JSX images can be injected directly into the pipeline flow object or palette object before it is provided to Common Canvas.</p> <p>Size prop</p> <p>Note, the <code>size</code> prop is used when the icon is displayed in the palette however for a node in the flow the icon will be sized based on the <code>imageHeight</code> and <code>imageWidth</code> fields in the nodeLayout object specified in the <code>enableNodeLayout</code> field of the canvas config object.</p> <p>Also, when nodes are pasted into the canvas the application will need to ensure the image fields of those nodes are set appropriately.</p> <p>A new sample application called \u2018JSX Icons\u2019 has been added to the test harness to show Carbon icons being used as node images.</p> <p></p>"},{"location":"03.06.01-node-customization/#customizing-node-colors-and-styles-with-css","title":"Customizing node colors and styles with CSS","text":""},{"location":"03.06.01-node-customization/#node-dom-construction","title":"Node DOM Construction","text":"<p>Node elements are drawn as SVG elements in the SVG area provided by the Flow Editor and are grouped together using a group <code>&lt;g&gt;</code> element.</p> <p></p> <p>The DOM elements that make up a node can be customized using CSS styles. This is done by either overriding the common-canvas CSS directly or, if customization is needed on a node-by-node basis, by assigning a class name to the group <code>&lt;g&gt;</code> element that is the container for all the node elements. The class can be applied to the group object in a number of different ways:</p> <ol> <li>By specifying it in the <code>app_data.ui_data.class_name</code> field of the node in the pipeline flow document that is provided to Common Canvas using <code>CanvasController.setPipelineFlow(pFlow)</code></li> <li>By specifying it using the following API methods:<ul> <li>CanvasController.setNodeProperties(nodeId, properties, pipelineId)</li> <li>CanvasController.setNodesClassName(nodeIds, newClassName, pipelineId)</li> </ul> </li> <li>By specifying a class name in the <code>className</code> field of the node layout properties in the canvas config. Like this <pre><code>const canvasConfig = {\n    enableNodeLayout: {\n        className: \"my-node-class\"\n    }\n};\n</code></pre></li> <li>By specifying a class name in the <code>className</code> field of the node layout properties returned from the <code>layoutHandler</code>.</li> </ol> <p>You can see the svg-canvas-d3.scss file for full details about what elements in the node can be styled but here are a list of some basic parts of the node:</p>"},{"location":"03.06.01-node-customization/#classes","title":"Classes","text":"Purpose DOM tag Classes Notes Group g d3-node-group Classes specified for the node in the class_name field of the node object will be added here. \u2b95 Selection area path d3-node-selection-highlight \u2b95 Outline shape path d3-node-body-outline \u2b95 Image svg d3-node-image \u2b95 Label foreignObject d3-foreign-object-node-label Will contain a div that contains the label text \u2b95 Input port g d3-node-port-input \u2b95 Output port g d3-node-port-output \u2b95 Decorations g d3-node-decorations-group Will contain decoration elements, for example, image, path etc <p>So for example if you want the node body (the rectangle) to be colored orange you would provide a class name to the group element using one of the techniques mentioned above and then put this in you CSS:</p> <p><pre><code>.my-node-class .d3-node-body-outline {\n   fill: orange;\n}\n</code></pre> Note: You can use the <code>enableParentClass</code> canvas config field to make you CSS rulesets specific so your styles are picked up in preference to the common-canvas default styles.</p>"},{"location":"03.06.02-comment-customization/","title":"Comment Customization","text":"<p>Comments can be customized by the application in the following ways:</p> <ul> <li>Setting the enableMarkdownInComments field in the canvas configuration.</li> <li>Customizing comment appearance with CSS (see below).</li> </ul>"},{"location":"03.06.02-comment-customization/#customizing-comment-appearance-with-css","title":"Customizing comment appearance with CSS","text":""},{"location":"03.06.02-comment-customization/#comment-dom-construction","title":"Comment DOM Construction","text":"<p>Comment elements are drawn as SVG elements in the SVG area provided by the Flow Editor and are grouped together using a group <code>&lt;g&gt;</code> element.</p> <p></p> <p>The DOM elements that make up a comment can be customized using CSS styles. This is done by either overriding the common-canvas CSS directly or, if customization is needed on a comment-by-comment basis, by assigning a class name to the group <code>&lt;g&gt;</code> element that is the container for all the comment elements. The class can be applied to the group object in a number of different ways:</p> <ol> <li>By specifying it in the <code>app_data.ui_data.class_name</code> field of the comment in the pipeline flow document that is provided to Common Canvas using <code>CanvasController.setPipelineFlow(pFlow)</code></li> <li>By specifying it using the following API methods:<ul> <li>CanvasController.setCommentProperties(commentId, properties, pipelineId)</li> <li>CanvasController.setCommentsClassName(commentIds, newClassName, pipelineId)</li> </ul> </li> </ol> <p>You can see the svg-canvas-d3.scss file for full details about what elements in the comment can be styled but here are a list of some basic parts of the comment:</p>"},{"location":"03.06.02-comment-customization/#classes","title":"Classes","text":"Purpose DOM tag Classes Notes Group g d3-comment-group Classes specified for the comment in the class_name field of the node object will be added here. \u2b95 Sizing area path d3-comment-sizing \u2b95 Selection area path d3-comment-selection-highlight \u2b95 Background path d3-comment-rect \u2b95 Text foreignObject d3-foreign-object-comment-text Will contain a div that contains the comment text \u2b95 Decorations g d3-comment-decorations-group Will contain decoration elements, for example, image, path etc <p>Note: You can use the <code>enableParentClass</code> canvas config field to make you CSS rulesets specific so your styles are picked up in preference to the common-canvas default styles.</p>"},{"location":"03.06.03-link-customization/","title":"Link Customization","text":"<p>Common Canvas provides a number of ways the links can be displayed. Links can be customized by the application in the following ways:</p> <ul> <li>Setting the link fields in  the canvas configuration.</li> <li>Customizing comment appearance with CSS (see below).</li> </ul>"},{"location":"03.06.03-link-customization/#customize-link-display","title":"Customize link display","text":"<p>The two major config fields to customize link display are:</p> <ul> <li>enableLinkType that can be set to \u201cCurve\u201d, \u201cElbow\u201d, \u201cParallax\u201d or \u201cStraight\u201d</li> <li>enableLinkMethod that can be set to \u201cPorts\u201d or \u201cFreeform\u201d.</li> </ul>"},{"location":"03.06.03-link-customization/#overriding-node-port-locations-to-customize-link-drawing-direction","title":"Overriding node port locations to customize link drawing direction","text":"<p>When enableLinkMethod is set to \u201cPorts\u201d, the positions of ports on nodes affect the direction that links are drawn to/fom the ports. See this overriding port positions section in the node customization page for more details.</p>"},{"location":"03.06.03-link-customization/#customizing-comment-appearance-with-css","title":"Customizing comment appearance with CSS","text":""},{"location":"03.06.03-link-customization/#link-dom-construction","title":"Link DOM Construction","text":"<p>Links are drawn on the canvas using SVG elements in the DOM. Each link has a top level group <code>&lt;g&gt;</code> element and inside it some SVG paths. The first displayed path is the selection area. This is invisible but provides a selection/hover area for mouse interactions on the link. The second is a path to represent the link itself which is drawn over the top of the selection area path:</p> <p></p> <p>The DOM elements that make up a link can be customized using CSS styles. This is done by either overriding the common-canvas CSS directly or, if customization is needed on a link-by-link basis, by assigning a class name to the group <code>&lt;g&gt;</code> element that is the container for all the link elements. The class can be applied to the group object in a number of different ways:</p> <ol> <li>By specifying it in the <code>app_data.ui_data.class_name</code> field of the link in the pipeline flow document that is provided to Common Canvas using <code>CanvasController.setPipelineFlow(pFlow)</code></li> <li>By specifying it using the following API methods:<ul> <li>CanvasController.setLinkProperties(linkId, properties, pipelineId)</li> <li>CanvasController.setLinksClassName(linkIds, newClassName, pipelineId)</li> </ul> </li> </ol> <p>You can see the svg-canvas-d3.scss file for full details about what elements in the comment can be styled but here are a list of some basic parts of the comment:</p>"},{"location":"03.06.03-link-customization/#classes","title":"Classes","text":"Purpose DOM tag Classes Notes Group g d3-link-group Classes specified for the link in the class_name field of the link object will be added here. \u2b95 Selection area path d3-link-selection-area \u2b95 Link line path d3-link-line \u2b95 Arrow head path d3-link-line-arrow-head Only when enableLinkType is set to \u201cStraight\u201d \u2b95 Decorations g d3-link-decorations-group Will contain decoration elements, for example, image, path etc <p>Note: The main link group will also have one of these classes: d3-node-link (for data links), d3-object-link (for association links) or d3-comment-link (for comment links).</p> <p>Note: You can use the <code>enableParentClass</code> canvas config field to make you CSS rulesets specific so your styles are picked up in preference to the common-canvas default styles.</p>"},{"location":"03.06.03-link-customization/#accessing-links-with-the-api","title":"Accessing links with the API","text":"<p>If a data link is retrieved from the canvas controller API it will have the following important fields:</p> <ul> <li>id - the unique identifier for the link.</li> <li>type - set to \u201cnodeLink\u201d.</li> <li>srcNodeId - the ID of the node the link is connected from.</li> <li>srcNodePortId - the ID of the output port on the source node the link is connected from. Note: If this is undefined it indicates the node is connected to the first output port of the source node.</li> <li>trgNodeId - the ID of the node the link is connected to.</li> <li>trgNodePortId - the ID of the input port on the target node the link is connected to. Note: If this is undefined it indicates the node is connected to the first input port of the target node.</li> <li>decorations - an array of decorations specified for the link.</li> <li>app_data - any application specific data that was previously specified for the link in the pipeline flow or through the canvas controller API.</li> </ul> <p>Note: Typically data links must be drawn between nodes however, if the config field <code>enableLinkSelectionType</code> is set to <code>Detachable</code>, the links are allowed to be drawn to and/or from arbitrary points on the canvas. If a link is drawn either semi-detached (from one node) or fully-detached (from both nodes) the following fields will be in the link object:</p> <ul> <li>srcPos - this is an object with two fields x_pos and y_pos. These provide the coordinates of the point on the canvas that the link is drawn from. If this exist then srcNodeId and srnNodePortId are not specified in the link object.</li> <li>trgPos - this is an object with two fields x_pos and y_pos. These provide the coordinates of the point on the canvas that the link is drawn to. If this exist then srcNodeId and srnNodePortId are not specified in the link object.</li> </ul>"},{"location":"03.06.03-link-customization/#association-links","title":"Association Links","text":"<p>(Note : internally, association links do have a <code>srcNodeId</code> and <code>trgNodeId</code> but that is just to keep the field names consistent with the data links.) Association links do not reference ports.</p> <p>If an association link is retrieved from the canvas controller API it will have the following important fields:</p> <ul> <li>id - the unique identifier for the link.</li> <li>type - set to \u201cassociationLink\u201d.</li> <li>srcNodeId - the ID of one of the nodes in the association.</li> <li>trgNodeId - the ID of the other node in the association.</li> <li>decorations - an array of decorations specified for the link.</li> <li>app_data - any application specific data that was previously specified for the link in the pipeline flow or through the canvas controller API.</li> </ul>"},{"location":"03.06.03-link-customization/#comment-links","title":"Comment Links","text":"<p>If a comment link is retrieved from the canvas controller API it will have the following important fields:</p> <ul> <li>id - the unique identifier for the link</li> <li>type - set to \u201ccommentLink\u201d</li> <li>srcNodeId - the ID of comment.</li> <li>trgNodeId - the ID of the node the comment is connected to.</li> <li>app_data - any application specific data that was previously specified for the link in the pipeline flow or through the canvas controller API.</li> </ul>"},{"location":"03.07-external-objects/","title":"Node Creation from External Object","text":""},{"location":"03.07-external-objects/#dragging-object-from-within-the-browser","title":"Dragging object from within the browser","text":"<p>Common Canvas supports the ability for an object from the your browser page to be dragged onto the canvas to initiate the creation of a node on the canvas. To do this you need to set the object you want to drag into the canvas to be draggable:</p> <p><pre><code>    &lt;div\n      draggable=\"true\"\n      onDragStart={this.onDragStart}\n      onDragOver={this.onDragOver}&gt;\n      ....\n      ....\n    &lt;/div&gt;\n</code></pre> and then specify the on drag behavior like this <pre><code>    onDragStart(ev) {\n       const evData = {\n          operation: \"addToCanvas\",\n          data: {\n             editType: \"createExternalNode\",\n             field1: \"field_val_1\",\n             field2: \"field_val_2\"\n             ....\n             ....\n          }\n       };\n       ev.dataTransfer.setData(\"text\", JSON.stringify(evData));\n    }\n</code></pre> where</p> <ul> <li>operation - is always set to \u201caddToCanvas\u201d</li> <li>data - is the object that will be passed to the editActionHandler callback</li> <li>editType - this is the type of editing operation. You can set it to anything except any of the reserved settings which are: \u2018createNode\u2019, \u2018createNodeOnLink\u2019, \u2018createAutoNode\u2019 and \u2018createFromExternalObject\u2019.</li> <li>fields - an optional number of fields can be provided that describe the object you are dragging onto the canvas. For example, if it is a data object the fields might describe the data source details.</li> </ul> <p>After the object has been dropped on the canvas your editActionHandler() callback method will be called with a parameter data object that contains the fields you specified in <code>data</code> in the drag data along with three additional fields, called pipelineId, offsetX and offsetY, containing the x,y co-ordinates of where the drop occurred. In your editActionHandler() method you can use the CanvasController API to add a node to the pipeline flow and get Common Canvas to display it.</p>"},{"location":"03.07-external-objects/#dragging-object-from-the-desktop-or-another-application","title":"Dragging object from the desktop or another application","text":"<p>If an object from the desktop or another application is dropped on the canvas your editActionHandler(data) method will be called with the <code>data</code> parameter set to an object like this: <pre><code>    {\n       dataTransfer: &lt;The event data from the drag operation&gt;,\n       editType: \"createFromExternalObject\",\n       editSource: \"canvas\",\n       offsetX: 200,\n       offsetY: 100,\n       pipelineId: \"1234-5678\"\n    }\n</code></pre> Your code can examine the <code>dataTransfer</code> object to see what object was dragged onto the canvas and then take appropriate action.</p> <p>If you want a new node to appear on the canvas as a result of the object being dropped your code will need to create that node at the point where the drop occurred, using the Canvas Controller API. Here is some sample code that will</p> <ul> <li>create a new node template based on the \u201cvariablefile\u201d node in the palette data</li> <li>set the label of the node to be created to the name of the file being dropped</li> <li>create a new node on the canvas at the offsetX, offsetY position</li> <li>the command will be added to the command-stack so the user can click undo to undo the addition of the node</li> </ul> <p><code>data</code> is the parameter passed into your <code>editActionHandler</code> method. <pre><code>    if (data.editType === \"createFromExternalObject\") {\n        const nodeTemplate = canvasController.getPaletteNode(\"variablefile\");\n        if (nodeTemplate) {\n            const convertedTemplate = canvasController.convertNodeTemplate(nodeTemplate);\n            convertedTemplate.label = data.dataTransfer.files[0].name;\n            const action = {\n                editType: \"createNode\",\n                nodeTemplate: convertedTemplate,\n                pipelineId: data.pipelineId,\n                offsetX: data.offsetX,\n                offsetY: data.offsetY\n            };\n            canvasController.editActionHandler(action);\n    }\n</code></pre></p> <p>Tip: You can optionally instruct Common Canvas to display a graphic over the canvas as the external object is being dragged over it. To do this you need to specify the <code>enableDropZoneOnExternalDrag</code> configuration parameter.</p>"},{"location":"03.08-external-pipeline-flows/","title":"External Pipeline Flows","text":""},{"location":"03.08-external-pipeline-flows/#introduction","title":"Introduction","text":"<p>The pipeline flow schema describes two ways of storing a sub-flow pipelines for a supernode: local or external. Local sub-flows are stored within the pipeline flow document whereas external pipelines are stored in a separate pipeline flow document (usually as the primary pipeline in that pipeline flow). The supernode that references an external pipeline contains a <code>url</code> property (in <code>&lt;node&gt;.subflow_ref.url</code>) and a <code>pipeline ID</code> property (in <code>&lt;node&gt;.subflow_ref.pipeline_id_ref</code>) to identify the external pipeline flow and the pipeline within it.</p> <p>Common Canvas supports external pipelines but the host application UI code needs to manage the storage and retrieval of any external pipeline flows. To do this the app UI code needs to:</p> <ul> <li>Manage the storage of newly created external pipeline flows.</li> <li>Respond to calls from Common Canvas to provide the external pipeline flow(s) when requested.</li> <li>Respond to call from Common Canvas when a local pipeline is changed to external or an external is changed to local.</li> </ul> <p>Common Canvas supports lazy loading of external pipeline flows so they will only be requested from your code when the user performs some gesture that requires the pipeline (from within the external pipeline flow) to be displayed.</p>"},{"location":"03.08-external-pipeline-flows/#creating-an-external-sub-flow","title":"Creating an external sub-flow","text":"<p>When the common-canvas config property enableExternalPipelineFlows is set to true (the default) and, when a set of objects are selected from which a super node can be created, the default common-canvas context menu will include a <code>Create External Supernode</code> option.</p> <p>When the <code>Create External Supernode</code> option is clicked the <code>createSuperNodeExternal</code> action is executed.</p> <p>If your application doesn\u2019t use the default context menu you can define your own context menu (returned from <code>contextMenuHandler</code>) to contain an option which maps to the <code>createSuperNodeExternal</code> action. See the section on the contextMenuHandler for details on how to do this.</p> <p>When the <code>createSuperNodeExternal</code> action is executed, the <code>beforeEditActionHandler</code> callback is called before the external sub-flow is created. The <code>beforeEditActionHandler</code> is called where the first parameter <code>data</code> has two properties <code>externalUrl</code> and <code>externalPipelineFlowId</code> which will both be set to empty string.  Your code must set these to whatever values you want for the url and pipeline flow ID. The url will be assigned to the <code>subflow_ref.url</code> property of the supernode that is being created. The pipeline flow ID will be assigned to the newly created pipeline flow.</p> <p>Your code must return the <code>data</code> parameter from the <code>beforeEditActionHandler</code> callback if you want the action to proceed and create the sub-flow. If you need to do any asynchronous activity at this point see the documentation on the beforeEditActionHanlder for details on how to do that.</p> <p>When the sub-flow has been created, Common Canvas will call the <code>editActionHandler</code> callback with the <code>createSuperNodeExternal</code> action. In this callback you can, if you wish, retrieve the pipeline flow document that has been created internally in Common Canvas using <code>CanvasController.getExternalPipelineFlow(url)</code>. Your code can then save it to your repository. Alternatively, you can wait until some later time, like perhaps during an auto-save, to retrieve and store the pipeline flow externally in your repository.</p>"},{"location":"03.08-external-pipeline-flows/#loading-an-external-sub-flow","title":"Loading an external sub-flow","text":"<p>When the main pipeline flow, displayed by Common Canvas, contains a super node that references an external sub-flow it will need to be loaded whenever the user performs a gesture that causes it to be displayed or processed in some way - for example displaying it \u2018in-place\u2019 or converting it from an external to a local supernode. An external sub-flow will also need to be loaded if the top-level pipeline being displayed has a supernode, that refers to an external pipeline, that is already expanded in-place in the saved pipeline flow JSON document being displayed. So, actions that can cause the external pipeline to be loaded are:</p> <ul> <li>loadPipelineFlow</li> <li>expandSuperNodeInPlace</li> <li>displaySubPipeline</li> <li>convertSuperNodeExternalToLocal</li> <li>deconstructSuperNode</li> </ul> <p>When any of these actions are performed Common Canvas will call the <code>beforeEditActionHandler</code> callback with the data parameter as the first parameter. The data object will have the following properties:</p> <ul> <li>editType - The name of the action being performed.</li> <li>externalPipelineFlowLoad - This is a boolean which indicates whether the pipeline flow needs to be provided by your code.</li> <li>externalUrl - This is the string which identifies the external pipeline flow document.</li> <li>externalPipelineId - This is the ID of the pipeline being loaded</li> <li>externalPipelineFlow - If <code>externalPipelineFlowLoad</code> if true this will be undefined. Otherwise it will be contain the previously loaded external pipeline flow.</li> </ul> <p>You need to implement the <code>beforeEditActionHandler</code> so that:</p> <ul> <li>when the actions above are being performed and externalPipelineFlowLoad is true, you retrieve the external pipeline flow from your repository</li> <li>you then assign it to the <code>externalPipelineFlow</code> property of the data object</li> <li>you then return the data object from the callback.</li> </ul> <p>Your code must return the <code>data</code> parameter from the <code>beforeEditActionHandler</code> callback if you want the action to proceed and load the external pipeline flow. If you need to do any asynchronous activity at this point see the documentation on the beforeEditActionHanlder for details on how to do that.</p>"},{"location":"03.08-external-pipeline-flows/#converting-a-local-supernode-to-an-external-supernode","title":"Converting a local supernode to an external supernode","text":"<p>When the common-canvas config property enableExternalPipelineFlows is set to true, and a local supernode\u2019s is right clicked, the default common-canvas context menu will include a <code>Convert local to external</code> option.  This will execute the <code>convertSuperNodeLocalToExternal</code> action.</p> <p>The <code>convertSuperNodeLocalToExternal</code> action is similar to the <code>createSuperNodeExternal</code> action in that a new external pipeline flow is being created. Consequently, you can follow the instructions in the Creating an external sub-flow section for providing the appropriate properties of the <code>data</code> object in the <code>beforeEditActionHandler</code> and <code>editActionHandler</code> callbacks.</p>"},{"location":"03.08-external-pipeline-flows/#converting-an-external-supernode-to-a-local-supernode","title":"Converting an external supernode to a local supernode","text":"<p>When the common-canvas config property enableExternalPipelineFlows is set to true, and an external supernode\u2019s is right clicked, the default common-canvas context menu will include a <code>Convert external to local</code> option.  This will execute the <code>convertSuperNodeExternalToLocal</code> action.</p> <p>The <code>convertSuperNodeExternalToLocal</code> action is similar to the <code>expandSuperNodeInPlace</code> action in that an external pipeline flow may need to be retrieved from your repository. Consequently, you can follow the instructions in the Loading an external sub-flow section for providing the appropriate properties of the <code>data</code> object in the <code>beforeEditActionHandler</code> callback.</p>"},{"location":"03.08-external-pipeline-flows/#deleting-an-external-supernodesub-flow","title":"Deleting an external supernode/sub-flow","text":"<p>When the user deletes an external supernode/sub-flow the supernode will be removed from the canvas. You code does not need to do anything unless you want to also remove the external pipeline flow from your repository.</p>"},{"location":"03.08-external-pipeline-flows/#clipboard-support","title":"Clipboard support","text":"<p>When a supernode, that refers to an external pipeline, is cut/copied and pasted, the pasted supernode refers to the same external pipeline as the supernode that was cut or copied. This means that if an external supernode is copied to the clipboard and then pasted into the same canvas the result will be two supernodes that refer to the same external pipeline.\u00a0\u00a0</p> <p>The same situation can occur if a supernode, that refers to an external pipeline, is in the palette and that node is dragged multiple times from the palette onto the canvas.</p>"},{"location":"03.08-external-pipeline-flows/#manipulating-objects-in-external-pipelines-using-the-canvas-controller-api","title":"Manipulating objects in external pipelines using the Canvas Controller API","text":"<p>Objects (nodes, links comments, etc.) in an external pipeline can be updated by the host application calling the <code>CanvasController</code> API. However, such changes are only effective within Common Canvas. It is the host application\u2019s responsibility to make sure these changes are persisted in the external pipeline flow document (if that is the behavior that is required). This can be done by the host application calling <code>CanvasController.getExternalPipelineFlow(url)</code> and then saving the returned document to the appropriate repository.</p>"},{"location":"03.08-external-pipeline-flows/#external-pipelines-in-the-elyra-canvas-test-harness","title":"External pipelines in the Elyra Canvas Test Harness","text":"<p>The Test Harness supports external pipeline flows but will only persist any saved flows for the current session. (It just stores them in memory).  You can examine the <code>beforeEditActionHandler</code> and <code>editActionHandler</code> in App.js in the test harness to see how it handles the different actions for managing external pipeline flows.</p>"},{"location":"03.09-read-only-or-locked-flows/","title":"Read Only or Locked Flows","text":"<p>Some host applications need to display flows that cannot be edited by the user. This might be because the flow artifact is currently being edited by another user (locked) or because the user does not have authority to edit the flow (read-only) or some other reason. We\u2019ll use the term \u2018read-only\u2019 below to refer to both locked and read-only canvases.</p> <p>There are many aspects of common-canvas components that need to be considered for a read-only canvas. Since Common Canvas is highly customizable it is not possible for the common-canvas code to manage components of the canvas that have been customized by the host application. For example, if the host app code added tools to the toolbar, Common Canvas does not know whether those tools should be disabled when displaying a read-only canvas or not. So the host application code will need to manage that. Let\u2019s look at each element of Common Canvas and see what needs to be done.</p>"},{"location":"03.09-read-only-or-locked-flows/#general-config","title":"General Config","text":"<p>There is one main canvas configuration property that will change the common-canvas behavior to implement a read-only canvas. This is <code>enableEditingActions</code> which defaults to true and needs to be set to <code>false</code> for read-only canvases. The sections below will cover what effect this will have on the different components of Common Canvas and what you need to do for any customizations you have made.</p>"},{"location":"03.09-read-only-or-locked-flows/#canvas","title":"Canvas","text":"<p>Setting <code>enableEditingActions</code> to false will prevent nodes and comments (and detachable links) from being moved relative to one another. It will also prevent new links from being created and prevent text (like comments or node labels) from being edited.</p> <p>With <code>enableEditingActions</code> set to false, the canvas can still be panned (left/right and up/down) and also zoomed in and out. Nodes, comments and links can still be clicked (to select) and right clicked (to display a context menu) and double clicked (usually to show properties). If you implemented any behavior for these interactions, using the <code>clickActionHandler</code>, you\u2019ll need to review what your code is doing and make sure it is appropriate when a read-only canvas is being displayed.</p> <p>Common Canvas allows objects from outside the canvas to be dropped onto the canvas to create a new node. For example, a file can be dragged from the operating system desktop onto the canvas to create a data node. With <code>enableEditingActions</code> set to false, the drag/drop gesture (which Common Canvas cannot prevent) will prevent a new node from being created. It is recommended you switch the <code>enableDropZoneOnExternalDrag</code> config property to false when displaying a read-only canvas. This will prevent a \u2018drop zone\u2019 graphic from appearing over the canvas when the object is dragged over the top of the canvas.</p> <p>Some applications need to show a tag (called a \u2018state tag\u2019) over the canvas to emphasize the \u2018read-only\u2019 or \u2018locked\u2019 state of the canvas. This can be displayed using the <code>enableStateTag</code> canvas config property. The tooltip of the \u2018state tag\u2019 can be provided by implementing the <code>tipHandler</code> callback function.</p> <p>Since there are numerous possible styles for nodes and links when displaying a read-only canvas, it isn\u2019t possible for Common Canvas to style the canvas objects appropriately for all different designs. You will need to override any styles for nodes and links to fit your design. To help with this, Common Canvas sets a class called <code>config-edit-actions-false</code> on the top-level div that contains the common-canvas components. You can use this to build specific selectors in your CSS/SCSS that will override the styles applied to nodes and links by default. For example, to override node icon and label colors you could specify the following in your SCSS file: <pre><code>    .editing-actions-false {\n        .d3-node-group {\n        &amp; .d3-node-label,\n            &amp; svg path {\n                color: $disabled-02;\n                stroke: $disabled-02;\n                fill: $disabled-03;\n            }\n        }\n    }\n</code></pre></p>"},{"location":"03.09-read-only-or-locked-flows/#context-menu","title":"Context menu","text":"<p>Setting <code>enableEditingActions</code> to false will prevent any options, that would edit the canvas objects, from being displayed in the common-canvas default context menu. For example, <code>Delete</code> will not show up in the context menu. See the <code>enableEditingActions</code> documentation for a list of options that are disabled.</p> <p>Your application code can add your own options to the context menu by implementing the <code>contextMenuHandler</code> callback function. If you have added your own options, you should review your code and ensure options that might change the canvas objects are not added to the context menu when you are displaying a read-only canvas.</p> <p>Note: The common-canvas default menu, passed as the second parameter to the <code>contextMenuHandler</code> callback, will still contain editing options. This means, if your code relies on them for some reason, (for example for calculating the position of your added options) your application code will still work OK.  The editing options will be removed after your code returns the array of items that describe the desired menu from the <code>contextMenuHandler</code> callback.</p>"},{"location":"03.09-read-only-or-locked-flows/#toolbar","title":"Toolbar","text":"<p>The toolbar can display buttons for standard common-canvas actions and also buttons for any application-specific actions added by your code. Setting <code>enableEditingActions</code> to false will cause buttons for any standard common-canvas actions, that edit the canvas objects, to be disabled regardless of the setting for the <code>enable</code> property for each action. See the <code>enableEditingActions</code> documentation for a list of actions that are disabled.</p> <p>You should review any application-specific action buttons you have added to the toolbar and decide if they need to be disabled or removed from the toolbar when displaying a read-only canvas.</p> <p>If you decide you want to hide the toolbar, this can be achieved using the <code>enableToolbarLayout</code> canvas config field.</p>"},{"location":"03.09-read-only-or-locked-flows/#keyboard","title":"Keyboard","text":"<p>Common Canvas supports a number of keyboard shortcuts. Setting <code>enableEditingActions</code> to false, disables any keyboard shortcuts that edit the canvas objects (such as Delete). See the <code>enableEditingActions</code> documentation for a list of keyboard shortcuts that are disabled.</p>"},{"location":"03.09-read-only-or-locked-flows/#palette","title":"Palette","text":"<p>Setting <code>enableEditingActions</code> to false:</p> <ul> <li>prevents node templates from being dragged from the palette and</li> <li>disables the double-click action on node templates which automatically adds a node to the canvas.</li> </ul> <p>You should decide if your application should display the palette when displaying a read-only canvas or not. The palette can be hidden by setting the canvas config property <code>enablePaletteLayout</code> to \u201cNone\u201d.</p>"},{"location":"03.09-read-only-or-locked-flows/#state-tag","title":"State Tag","text":"<p>Common Canvas allows the application to display a state tag, which is a label displayed directly on top of the canvas to allow the application to indicate what state (read-only or locked) the flow is in. The state tag can be switched on using the enableStateTag canvas configuration field.</p>"},{"location":"03.09-read-only-or-locked-flows/#test-harness-sample-read-only-application","title":"Test Harness: Sample Read-Only application","text":"<p>The test harness contains a sample application called \u201cRead-Only\u201d which shows how a read-only canvas can be built using the <code>enableEditingActions</code> config option. In the application there are three toolbar buttons which can be used to navigate between Editable state, Read-Only state and Locked state. You can review the <code>.jsx</code> and <code>.scss</code> files in the application code to see how the application is implemented and styled.</p>"},{"location":"03.10-command-stack/","title":"The Command Stack","text":"<p>The Command Stack is built into Common Canvas and automatically provides functionality to support do/undo/redo of commands performed in the flow editor. In addition, if needed, applications can add their own commands to the command stack.</p> <p>The Command Stack maintains an internal stack of commands with a cursor that moves up and down when commands are undone or redone. Commands are JavaScript classes that implement a simple interface.</p> <p>The canvas controller automatically creates an instance of the command stack. Common Canvas provides command objects for each of the commands that are performed by the user, such as: create node, delete comment, link nodes together, etc. which it adds to the command stack.</p> <p>To allow the user to activate the undo and redo actions, Common Canvas provides: * undo/redo buttons on the default toolbar and * undo/redo options in its default context menu for the flow editor background, * keyboard shortcuts: ctrl+z (undo) and ctrl+shift+z (redo) when keyboard focus is on the canvas.</p> <p>If the applicaiton specifies its own canvas toolbar or its own context menu/toolbar for the flow editor canvas and it must include defintions for the <code>undo</code> and <code>redo</code> internal actions.</p>"},{"location":"03.10-command-stack/#api-control-of-the-command-stack-optional","title":"API control of the command stack (optional)","text":"<p>You can implement your own undo and redo UI, if required, using the canvas controller API.</p> <p>The canvas controller has a number of methods that allows the application to interact with the command stack if necessary.</p>"},{"location":"03.10-command-stack/#building-a-command-optional","title":"Building a command (optional)","text":"<p>Each command that is added to the command stack is a JavaScript class that needs to implement these methods:</p> <pre><code>   constructor()\n   do()\n   undo()\n   redo()\n   getLabel()\n</code></pre> <p>constructor() - Initial setup</p> <p>do() - Performs all actions necessary to execute the command</p> <p>undo() - Performs all actions necessary to reverse the actions performed in do()</p> <p>redo() - Performs all actions necessary to re-execute the command. For some commands this is the same as do() but for others it is different.</p> <p>getLabel() - Returns a label that descibes the action.</p> <p>Here is some sample code that shows how a \u2018create node\u2019 command might be written:</p> <p><pre><code>   export default class CreateNodeAction extends Action {\n\n        constructor(data, canvasController) {\n            super(data);\n            this.canvasController = canvasController;\n            this.newNode = createNode(data);\n         }\n\n         do() {\n            this.canvasController.addNode(this.newNode);\n         }\n\n         undo() {\n            this.canvasController.deleteNode(this.newNode.id);\n         }\n\n         redo() {\n            this.canvasController.addNode(this.newNode);\n         }\n\n         getLabel() {\n            return \"Add 1 node\"\n         }\n   }\n</code></pre>    Note that the command has to keep a reference to the new node to allow the node to be added back    to the canvas in redo() even though it was deleted in undo().</p> <p>Here is an example showing how to create a command action and push it on the stack using the canvas-conttoller:</p> <pre><code>   const command = new CreateNodeAction(data, this.canvasController);\n   this.canvasController.do(command);\n</code></pre>"},{"location":"03.10-command-stack/#exported-common-canvas-action-classes","title":"Exported common-canvas action classes","text":"<p>Some of the internal action classes have been exported from Common Canvas and can be extended with additional functionality, if necessaey. The classes that are exported are:</p> <ul> <li>CreateAutoNodeAction</li> <li>CreateNodeAction</li> <li>CreateNodeLinkAction</li> <li>DeleteObjectsAction</li> <li>DisconnectObjectsAction</li> <li>PasteAction</li> </ul> <p>The constructors for these classes all take the same two parameters. The <code>data</code> object that descrbes the command and a reference to the canvas controller.</p> <p>Applications can extend these classes to augment their basic behavior with application specific behavior. It is the application\u2019s responsibility to add the extended object to the command stack when the user performs the corresponding action.</p> <p>Although there are no plans to alter the internal workings of these six command action classes, there is always the chance that a change in the future might alter a field name or two. If you extend these classes, it is therefore recommended that you have sufficient regression tests for your extensions that would highlight such a problem, should it occur.</p>"},{"location":"03.11-internal-actions/","title":"Internal common-canvas actions","text":"<p>Internal actions can be generated by the user either:</p> <ul> <li>Clicking a toolbar button or</li> <li>Clicking an option in a context menu or context toobar or</li> <li>Pressing a keyboard shortcut key(s) or</li> <li>Doing some direct manipulation like dragging one or more objects</li> </ul> <p>Some actions can be generated from different sources. For example, the <code>deleteSelectedObjects</code> action can be generated by the user:</p> <ul> <li>Clicking the trash can icon in the toolbar or</li> <li>Pressing the Delete key or</li> <li>Clicking the Delete option in a context menu.</li> </ul> <p>In each case, the action generates calls to the beforeEditActionHandler callback and then the editActionHandler callback. For each callback, the <code>editType</code> field of the first parameter will be set to one of the actions listed below.</p> <p>These are the intenal actions:</p> Action Name Notes Nodes createNode Create a new node on the canvas at a location identifed by the user createNodeOnLink Creates a new node and inserts it into a link the palette node was dropped on createNodeAttachLinks Creates a new node and attaches it to the detached link the palette node was dropped on createAutoNode Creates a node at an appropriate position and, if possible, make a connection to an adjacent node insertNodeIntoLink Inserts a node from the canvas into the link it was dropped on attachNodeToLinks Attaches a node to one or more detached links it was dropped on setNodeLabel Sets the node label setNodeLabelEditingMode Puts a node label into eiting mode disconnectNode Removes all links to the selected node Supernodes createSuperNode Creates an internal supernode createSuperNodeExternal Creates an external supernode deconstructSuperNode Removes a supernode and puts its contents into the canvas in its place expandSuperNodeInPlace Expands a supernode to view the sub-flow in-place collapseSuperNodeInPlace Collapses an in-place supernode to a regular node size convertSuperNodeExternalToLocal Converts an external supernode to an internal one convertSuperNodeLocalToExternal Converts an internal supernode to an external one displaySubPipeline Displays a sub-flow in full-page mode so it fills the viewport displayPreviousPipeline Displays the parent flow from the one currently being viewed loadPipelineFlow Loads a pipeline from an external source Comments createComment Creates a new comment on the canvas at a location identifed by the user createAutoComment Creates a node at an appropriate position on the canvas commentsToggle Toggles the comments between hide and show commentsHide Hides all comments on the canvas commentsShow Shows all comments on the canvas setCommentEditingMode Puts a comment into eiting mode Canvas Objects moveObjects Moves one or more selected objects to a new position on the canvas resizeObjects Resizes a node or comment setObjectsStyle Sets the style property of one or more nodes/comments colorSelectedObjects Colors the background of the selected objects deleteSelectedObjects Deletes the selected objects selectAll Selects all canvas objects Links updateLink Updates the link info for detached links editComment Changes the comment text, position and dimension info linkNodes Creates a link between two nodes linkNodesAndReplace Creates a link between two nodes and relaces any exiting link to the target node linkComment Creates a link from a comment to a node createDetachedLink Create a link from a node to a point on the canvas setLinksStyle Sets the style property of one or more links deleteLink Deletes a link Decorations editDecorationLabel Puts a label decoration into edit mode Arrange nodes arrangeHorizontally Arranges the nodes across the page from left to right arrangeVertically Arranges the nodes down the page from top to bottom Palette paletteToggle Toggles the palette between opened and closed paletteOpen Opens the palette (left flyout) paletteClose Closes the palette (left flyout) saveToPalette Saves the selected object into the palette Notifications toggleNotificationPanel Toggles the notification panel between opened and closed openNotificationPanel Opens the notification panel closeNotificationPanel Closes the notification panel Clipboard cut Cuts the selected canvas objects onto the clipboard copy Copies the selected canvas objects onto the clipboard paste Pates the contents of the clipboard onto the canvas Command Stack undo Undoes the previous command on the command stack redo Redoes the next comment on the command stack Highlighting highlightBranch Highlights all upstream and downstream nodes from the one selected highlightDownstream Highlights all upstream and downstream nodes from the one selected highlightUpstream Highlights all upstream and downstream nodes from the one selected unhighlight Unhighlights all previously highlighted nodes Zoom zoomIn Zooms the canvas in by one step zoomOut Zooms the canvas out by one step zoomToFit Zooms so all the canvas objects are visible in the viewport setZoom Sets the zoom based on the <code>enableSaveZoom</code> config setting"},{"location":"03.11-internal-actions/#action-names-with-built-in-icons","title":"Action names with built in icons","text":"<p>If you use any of the following action names, Common Canvas will automatically display an appropriate Carbon icon for that action either if it appears as a button in the toolbar or if it appears in the overflow menu.</p> Action Carbon Icon stop StopFilledAlt run Play undo Undo redo Redo cut Cut copy Copy paste Paste clipboard Result createComment AddComment createAutoComment AddComment setCommentEditingMode Edit setNodeLabelEditingMode Edit commentsShow Chat commentsHide ChatOff colorBackground ColorPalette deleteLink TrashCan deleteSelectedObjects TrashCan zoomIn ZoomIn zoomOut ZoomOut zoomToFit CenterToFit arrangeHorizontally ArrangeHorizont arrangeVertically ArrangeVertical toggleNotificationPanel NotificationCounter paletteOpen OpenPanelFilledLeft paletteClose OpenPanelFilledLeft paletteToggle OpenPanelFilledLeft expandSuperNodeInPlace Maximize collapseSuperNodeInPlace Minimize displaySubPipeline Launch"},{"location":"03.30.01-context-menu-wrapper/","title":"Context Menu Wrapper","text":""},{"location":"03.30.01-context-menu-wrapper/#this-function-is-deprectated-and-will-be-removed-in-future-release","title":"This function is deprectated and will be removed in  future release","text":"<p>Carbon 11 has a context menu component if your applications needs a context menu.</p> <p>The context menu in Common Canvas can be used in your application by importing the <code>ContextMenuWrapper</code> React component. Aside from providing a standard context menu to allow users to select different actions, this context menu also allows for configuration of submenus as a menu item, as well as a visual dividers.</p>"},{"location":"03.30.01-context-menu-wrapper/#getting-started-with-context-menu","title":"Getting started with Context Menu","text":""},{"location":"03.30.01-context-menu-wrapper/#step-1-import-context-menu-wrapper","title":"Step 1: Import Context Menu Wrapper","text":"<p>To use Context Menu Wrapper in your React application you need to import the <code>ContextMenuWrapper</code> React component from the common-canvas library. It\u2019s recommended to use All Components if Common Canvas is also being imported, otherwise use ContextMenuWrapper only option.</p> <p>All Components <pre><code>    import {ContextMenuWrapper} from \"@elyra/canvas\";\n</code></pre></p> <p>ContextMenuWrapper only <pre><code>    import ContextMenuWrapper from \"@elyra/canvas/dist/lib/context-menu\";\n</code></pre></p>"},{"location":"03.30.01-context-menu-wrapper/#step-2-pass-in-the-correct-props","title":"Step 2: Pass in the correct props","text":"<ul> <li>contextMenuDef <code>array</code> (required): an array of menu item objects consisting of action and label. You can also pass in a divider item.</li> </ul> <pre><code>    const menuDef = [\n        { action: ACTION.BUILD, label: \"Build\" },\n    { action: ACTION.EXTEND, label: \"Extend\" },\n    { action: ACTION.CLEAR, label: \"Clear\" },\n    { divider: true },\n    { action: ACTION.SCORE, label: \"Score\" },\n    ];\n</code></pre> <ul> <li>containingDivId <code>string</code> (required): the id of the element that the context menu will be absolutely positioned inside. typically, the page element is used.</li> <li> <p>contextMenuPos <code>object</code> (required): the position of the context menu within the containing div. <pre><code>    const menuPos = { x: 500  , y: 300  };\n</code></pre></p> </li> <li> <p>contextMenuActionHandler <code>func</code> (required): this handler is where context menu actions are defined. <pre><code>    contextMenuActionHandler(action) {\n        switch (action) {\n            case \"BUILD\":\n            break;\n        case \"EXTEND\":\n            break;\n        default:\n        }\n    }\n</code></pre></p> </li> <li>closeContextMenu <code>func</code>  (required): this handler will be called when the context menu is closed.</li> <li>stopPropagation <code>bool</code> (optional): this is optional and only for very specific, uncommon use cases. When this flag is set, if a user clicks outside the context menu, the event will not bubble to parent elements, preventing parent event handlers from being called.</li> </ul>"},{"location":"03.30.01-context-menu-wrapper/#example","title":"Example","text":"<pre><code>    const contextMenuWrapper = (\n        &lt;ContextMenuWrapper\n            contextMenuDef={menuDef}\n            containingDivId=\"main-page\"\n            contextMenuPos={menuPos}\n            contextMenuActionHandler={this.contextMenuActionHandler}\n            closeContextMenu={this.props.closeContextMenu}\n        /&gt;\n    );\n</code></pre>"},{"location":"03.30.02-flow-validation/","title":"Flow Validation API","text":""},{"location":"03.30.02-flow-validation/#this-function-is-deprectated-and-will-be-removed-in-future-release","title":"This function is deprectated and will be removed in  future release","text":"<p>The Flow Validation API allows application code to programmatically validate the nodes in the flow against it\u2019s property values.  The API can be invoked after setting the Canvas Controller pipeline flow, when opening a new flow, or associated with a canvas context menu item.  To use the Flow Validation API import the FlowValidation object from Common Canvas: <pre><code>import { FlowValidation } from \"@elyra/canvas\";\n</code></pre> then call the API on the object, for example: <pre><code>FlowValidation.validateFlow( ... );\n</code></pre></p> <p>The Flow Validation object provides the following API:</p> <p><pre><code>validateFlow(canvasController, parameterDataCallback, setNodeMessagesCallback, includeMsgTypes)\n    canvasController - an instance of the canvas controller\n    parameterDataCallback \u2013 function to get the parameter data or form data for a node\n    setNodeMessagesCallback \u2013 function to set the validation messages for a node. (optional)\n    includeMsgTypes - array[strings] Return invalid only if messages are found of types contained\n                      in the array. If not specified then any message type causes invalid return. (optional)\n    return - boolean If flow is valid returns true, otherwise returns false.\n</code></pre> where the two callbacks are defined as follows: <pre><code>parameterDataCallback(nodeId)\n    nodeId \u2013 string node Id.\n    function must return this object:\n    {\n        type: \u201cparameterDef\u201d | \u201cform\u201d,\n        data: Json_object\n    }\n\n/* The setNodeMessagesCallback is optional and only useful if not using internal object model.\nsetNodeMessagesCallback(nodeId, messages)\n    nodeId \u2013 string node Id.\n    an array of message objects generated from the validation of the node.\n</code></pre></p> <p>The validateFlow() API will traverse the current flow and for each node invoke the parameterDataCallback() to get with a form data JSON or a parameterDef JSON.  It will validate the JSON for the node and store any messages in the node objects within the model.  The setNodeMessagesCallback() function will be called with all the messages generated for the node.  This is only useful if the application is not using the internal object model. The format of the message object is described in Pipeline Flow UI schema</p> <p>Here is an example of using the FlowValidation API to validate a flow on opening:</p> <pre><code>import { CanvasController, FlowValidation } from \"@elyra/canvas\";\n\ngetNodeForm(nodeId) {\n    const parameterDef = getParameterDefJSON(nodeId);\n    return { type: \"parameterDef\", data: parameterDef };\n}\n\nsetNodeMessages(nodeId, messages) {\n    // code to persist messages in a store in addition to the internal model.\n}\n\nopenCanvas(canvasJson) {\n    const canvasController = new CanvasController();\n    canvasController.setPipelineFlow(canvasJson);\n    FlowValidation.validateFlow(canvasController, this.getNodeForm, this.setNodeMessages);\n}\n</code></pre>"},{"location":"04-common-properties/","title":"Getting started with Common Properties","text":""},{"location":"04-common-properties/#introduction","title":"Introduction","text":"<p>Common Properties is directed by a JavaScript object called the Parameter Definition. The \u2018paramDef\u2019 object describes the properties to be displayed as controls in the <code>&lt;CommonProperties&gt;</code> React object.</p> <p>You can look at the harness/src/client/App.js file to see examples of code that uses the common-properties component.</p>"},{"location":"04-common-properties/#building-a-properties-panel-in-a-react-application","title":"Building a properties panel in a React application","text":"<p>To use Common Properties in your React application complete the following steps:</p>"},{"location":"04-common-properties/#step-1-setup","title":"Step 1 : Setup","text":"<p>Complete the setup steps documented in the Initial Setup page.</p>"},{"location":"04-common-properties/#step-2-import-common-properties","title":"Step 2 : Import Common Properties","text":"<p>Import the Common Properties React component from the Elyra Canvas library. Elyra Canvas produces both esm and cjs outputs. By default esm will be used when webpack is used to build the application.</p> <p><pre><code>    import { CommonProperties } from \"@elyra/canvas\";\n</code></pre> Properties Only</p> <p>To import only Common Properties functionality in <code>cjs</code> format use:</p> <pre><code>    import { CommonProperties } from \"@elyra/canvas/dist/lib/properties\";\n</code></pre>"},{"location":"04-common-properties/#step-2-create-the-propertiesinfo-object","title":"Step 2 : Create the propertiesInfo object","text":"<p>Next, you\u2019ll need to populate propertiesInfo, which is a required prop, with:</p> <p><pre><code>this.propertiesInfo = {\n  parameterDef: this.parameterDef,          // Required - Parameter definitions/hints/conditions\n  appData: \"{user-defined}\",                // Optional - User data returned in applyPropertyChanges\n  additionalComponents: \"{components}\",     // Optional - Additional component(s) to display\n  messages: \"[node_messages]\",              // Optional - Node messages array\n  expressionInfo: this.expressionInfo,      // Optional - Information for expression builde\n  initialEditorSize: \"{size}\",              // Optional - This value will override the value of\n                                            // editor_size in uiHints. This can have a value of\n                                            // \"small\", \"medium\", \"large\", or null\n  id: \"{id}\"                                // Optional - Unique parameter definition ID\n}\n</code></pre> See the Common Properties Parameter Definition page for more details about \u2018paramDef\u2019.</p> <p>The expressionInfo object must conform to the expressionInfo schema</p> <p>The optional messages attribute can be used to set validation messages associated with a node. The format of the message objects is defined in Pipeline Flow UI schema</p>"},{"location":"04-common-properties/#step-3-display-the-common-properties-object","title":"Step 3 : Display the Common Properties object","text":"<p>Finally, you\u2019ll need to display the Common Properties object. Inside your render code, add the following:</p> <pre><code>return (\n  &lt;IntlProvider&gt;\n    &lt;CommonProperties\n      ref={(instance) =&gt; {\n        this.CommonProperties = instance;\n      }}\n      propertiesInfo={this.propertiesInfo}                  // Required\n      callbacks={this.callbacks}                            // Required\n      propertiesConfig={this.propertiesConfig}              // Optional\n      customPanels={[CustomSliderPanel, CustomTogglePanel]} // Optional\n      customControls={[CustomSliderControl]}                // Optional\n      customConditionOps={[CustomConditionOps]}             // Optional\n      light                                                 // Optional\n    /&gt;\n  &lt;/IntlProvider&gt;\n);\n</code></pre> <p>See the Localization section of the Initial Setup page to see how <code>&lt;IntlProvider&gt;</code> can be configured.</p> <p>Props</p> <ul> <li>propertiesInfo <code>object</code>: See above</li> <li>callbacks object - See the Callbacks page</li> <li>propertiesConfig <code>object</code> - See the Properties Config page</li> <li>customPanels <code>array</code>: An array of custom panels. See Custom Panels section of the Common Properties Custom Components page.</li> <li>customControls <code>array</code>: An array of custom controls. See Custom Controls section of the Common Properties Custom Components page..</li> <li>customConditionOps <code>array</code>: An array of custom condition operators.  See Custom Condition Operators section of the Custom Components page.</li> <li>light <code>boolean</code>: Carbon controls in Common Properties will use light mode. When the <code>light</code> option is disabled, the background color will be the same as the Carbon theme background. When the <code>light</code> option is enabled, the background color is set to $ui-01. Defaults to <code>true</code></li> </ul>"},{"location":"04-common-properties/#reference-methods","title":"Reference methods","text":"<p>The <code>&lt;CommonProperties&gt;</code> React object provides one reference method that can be called on a <code>ref</code> of the common-properties instance. <pre><code>/*\n* @closeEditor (boolean) - determines if closePropertiesDialog is called or not\n*/\napplyPropertiesEditing(closeEditor)\n</code></pre></p>"},{"location":"04-common-properties/#using-commonproperties-in-commoncanvas-right-flyout-panel","title":"Using CommonProperties in CommonCanvas right-flyout panel","text":"<p>Common Canvas has a right-flyout panel that can render a React object. It can be used to render Common Properties in the right-flyout as follows:</p> <p>Create a <code>&lt;CommonProperties&gt;</code> object with <code>containerType</code> set to <code>\"Custom\"</code> and <code>rightFlyout</code> set to <code>true</code>. <pre><code>    const rightFlyoutContent = (\n        &lt;CommonProperties\n            propertiesInfo={this.propertiesInfo}\n            propertiesConfig={{ containerType: \"Custom\", rightFlyout: true }}\n            callbacks={this.callbacks}\n        /&gt;\n    );\n</code></pre></p> <p>Pass the <code>&lt;CommonProperties&gt;</code> object into the <code>rightFlyoutContent</code> prop of Common Canvas. Also, set the <code>showRightFlyout</code> boolean to tell Common Canvas the rightFlyout should be displayed (true) or hidden (false). <pre><code>    &lt;CommonCanvas\n        canvasController={canvasController}\n        rightFlyoutContent={rightFlyoutContent}\n        showRightFlyout={showRightFlyout}\n    /&gt;\n</code></pre></p>"},{"location":"04.01-parameter-definition/","title":"Parameter Definition","text":"<p>The parameter definition object provides input for controlling the common-properties dialog.  It consists of information that is available in the <code>operator</code> object combined with UI hints, information on data sets, and resources.</p> <p>The parameter definition has a defined schema and set of examples located here: schema and examples</p> <p>The parameter definition consists of the following sections:</p>"},{"location":"04.01-parameter-definition/#title-definition","title":"Title Definition","text":"<p>The title of the properties editor. If <code>editable</code> is set to true (default), the title can be edited. If set to false, the title will be readonly.</p> <pre><code>\"titleDefinition\": {\n    \"title\": \"Properties Title\",\n    \"editable\": true\n  }\n</code></pre>"},{"location":"04.01-parameter-definition/#current-parameters","title":"Current Parameters","text":"<p>A list of input parameters and initial values upon input.  The list is a set of key/value pairs with the key being the field name and the value is the initial value.</p> <p>Example <pre><code>\"current_parameters\": {\n    \"targetField\": [],\n    \"inputFieldList\": [],\n    \"elasticNetParam\": 0.0,\n    \"fitIntercept\": false,\n    \"maxIter\": 75,\n    \"regParam\": 0.1,\n    \"standardization\": true,\n    \"threshold\": 0.5,\n    \"tol\": 0.0000010\n  }\n</code></pre></p>"},{"location":"04.01-parameter-definition/#parameter-definitions","title":"Parameter Definitions","text":"<p>The list of parameters definitions for this property dialog.  The list contains the name of the parameter, the data type of the parameter, the role and the default value.  The information provided is as needed by the backend engine, i.e. the parameter name should be the name of the parameter that is expected for the backend engine.</p> <p>The list of parameter definitions has the following attributes:</p> <ul> <li><code>id</code> (string) Required Parameter identifier as consumed by the backend engine.</li> <li><code>default</code> (any) The default value of the parameter.</li> <li><code>enum</code> (array[string]) A restricted list of string values that are valid for the field.</li> <li><code>type</code> (string) Parameter type as consumed by the backend engine.</li> <li><code>role</code> (string) Parameter role, which is an optional specialization of the type.</li> <li><code>required</code> (boolean) Indication whether parameter is required or optional.</li> </ul> <p>Parameter types have one of a fixed set of basic types. These are:</p> <ul> <li><code>integer</code></li> <li><code>double</code></li> <li><code>string</code></li> <li><code>date</code></li> <li><code>time</code></li> <li><code>timestamp</code></li> <li><code>custom</code></li> </ul> <p>These can be used as maps or arrays e.g.:</p> <pre><code>array[&lt;value-type&gt;]: a sequence or list of values\n</code></pre> <p>Parameter roles defined by the role attribute can be one of:</p> <ul> <li><code>expression</code>: an expression assumed to be in the expression language for the run time</li> <li><code>column</code>: value represents one or more columns from the data model visible to this operator</li> <li><code>new_column</code>: value represents the name of a new column to be added to the data model and must therefore not match an existing column and conform to existing syntactic restrictions.</li> </ul> <p>Example <pre><code>\"parameters\": [\n    {\n      \"id\":\"targetField\",\n      \"type\":\"string\",\n      \"default\":\"\",\n      \"role\":\"column\"\n    },\n    {\n      \"id\":\"inputFieldList\",\n      \"type\":\"array[string]\",\n      \"default\":[],\n      \"role\":\"column\"\n    },\n    {\n      \"id\": \"impurity\",\n      \"enum\": [\n        \"gini\",\n        \"entropy\"\n      ],\n      \"default\": \"gini\"\n    },\n    {\n      \"id\":\"elasticNetParam\",\n      \"type\":\"double\",\n      \"default\":0.0\n    }\n]\n</code></pre></p>"},{"location":"04.01-parameter-definition/#ui-only-parameters","title":"UI-only Parameters","text":"<p>A list of input parameters and initial values upon input.  This set of parameters are separated from the backend parameters (current parameters).  The idea is that these parameters are not passed into the backend engine by the common-properties consumer.</p> <p>Example <pre><code>\"current_ui_parameters\": {\n    \"databaseResource\": true,\n    \"tol\": 0.0000010\n  }\n</code></pre></p> <p>UI-only parameters require information about the parameters same as the parameter definition information used for the backend parameters.  The UI-only parameter definition information is stored in the UI-hints section in the sub-section named <code>ui_parameters</code>.  A description of the UI hints specifications can be found on the UI Hints page.</p> <p>UI-only properties are returned to the consuming application via a separate parameter on the applyPropertiesChanges callback.  See the Callbacks page.</p>"},{"location":"04.01-parameter-definition/#complex-types","title":"Complex Types","text":"<p>The complex types section is an array of</p> <p>The complex types have the following attributes:</p> <ul> <li><code>id</code> (string) Required Identifier of complex type, can be referenced in other places.</li> <li><code>type</code> (string) If <code>object</code> is specified, Common Properties will return the values as an array of objects consisting of key value pairs. This defaults to <code>array</code>.</li> <li><code>key_definition</code> (object) A parameter definition attribute on the key parameter field.</li> <li><code>parameters</code> (object) Required List of parameters fields.  Each parameter can be defined as a parameter definition attribute or a complex type attribute.</li> </ul> <p>Example of complex types <pre><code>\"complex_types\": [\n    {\n      \"id\": \"SortEntry\",\n      \"type\": \"object\",\n      \"key_definition\": {\n        \"id\": \"field\",\n        \"type\": \"string\",\n        \"role\": \"column\",\n        \"default\": \"\"\n      },\n      \"parameters\": [\n        {\n          \"id\": \"sort_order\",\n          \"enum\": [\n            \"Ascending\",\n            \"Descending\"\n          ],\n          \"default\": \"Ascending\"\n        }\n      ]\n    }\n  ]\n</code></pre></p>"},{"location":"04.01-parameter-definition/#a-note-on-parameters-and-complex-types","title":"A Note on Parameters and Complex Types:","text":"<p>Note that both parameter and complex type definitions are in the exact same format as defined in the operator schema. Therefore the contents of operator JSON files can be used for these two sections.</p>"},{"location":"04.01-parameter-definition/#ui-hints","title":"UI Hints","text":"<p>A set of specifications for controlling the layout and flow of Common Properties.  A description of the UI hints specifications can be found on the UI Hints page.</p>"},{"location":"04.01-parameter-definition/#conditions","title":"Conditions","text":"<p>A set of specifications for controlling validation checking of parameters during the common-properties dialog. A description of the Conditions specifications can be found here on the Conditions page.</p>"},{"location":"04.01-parameter-definition/#data-set-metadata","title":"Data Set Metadata","text":"<p>The data set metadata is an array of datarecord-metadata objects as defined in the datarecord-metadata JSON schema. Each datarecord-metadata object contains and array of fields that provide column information on the input data set.  schema and examples</p> <p>The fields have the following attributes:</p> <ul> <li><code>name</code> (string) Required Field name. Must be unique within the dataset.</li> <li><code>type</code> (string) Required Field type. Can be a primitive type (string, integer, double, date, time, timestamp), or a vector, map, or struct containing those types. Required.</li> <li><code>nullable</code> (boolean) Indicates whether or not one can place null values into the field.  Default: False.</li> <li><code>metadata</code> (object) A set of additional metadata attributes.</li> </ul> <p>The additional metadata attributes are as follows:</p> <ul> <li><code>description</code> (string) A description of the field.</li> <li><code>measure</code> (string) The field measurement type.  The value can be one of the following. <code>range, discrete, flag, set, ordered-set, typeless, collection, geospatial, default</code></li> <li><code>role</code> (string) Field role for modeling. The value can be one of the following. <code>input, target, both, none, partition, split, frequency, record-id</code></li> <li><code>max_string_length</code> (number) Maximum character length for string fields. Length is unlimited when not present.</li> <li><code>values</code> (array[string]) Array of unique categorical values for the column.</li> <li><code>ranges</code> (object) Minimum and maximum discovered values for scalar data.</li> </ul> <p>Example <pre><code>\"dataset_metadata\": [\n  {\n    \"name\": \"Schema-1\",\n    \"fields\": [\n      {\n        \"name\": \"Age\",\n        \"type\": \"integer\",\n        \"metadata\": {\n          \"description\": \"\",\n          \"measure\": \"range\",\n          \"role\": \"input\"\n        }\n      },\n      {\n        \"name\": \"Sex\",\n        \"type\": \"string\",\n        \"metadata\": {\n          \"description\": \"\",\n          \"measure\": \"discrete\",\n          \"role\": \"input\"\n        }\n      },\n      {\n        \"name\": \"BP\",\n        \"type\": \"string\",\n        \"metadata\": {\n          \"description\": \"\",\n          \"measure\": \"discrete\",\n          \"role\": \"input\"\n        }\n      }\n    ]\n  },\n  {\n    \"name\": \"Schema-2\",\n    \"fields\": [\n      {\n        \"name\": \"Birthdate\",\n        \"type\": \"date\",\n        \"metadata\": {\n          \"description\": \"Date of birth\",\n          \"measure\": \"range\",\n          \"role\": \"input\"\n        }\n      }\n    ]\n  }\n]\n</code></pre></p>"},{"location":"04.01-parameter-definition/#resources","title":"Resources","text":"<p>This is a map of string resources.</p> <p>Example: <pre><code>\"resources\":{\n  \"org.apache.spark.ml.classification.DecisionTreeClassifier.label\":\"Random Forest Classifier\",\n  \"org.apache.spark.ml.classification.DecisionTreeClassifier.desc\":\"Fitted Random Forest Classification Model\",\n  \"inputFieldList.label\":\"Input columns\",\n  \"inputFieldList.desc\":\"Select one or more input columns\",\n  \"targetField.label\":\"Target column\",\n  \"targetField.desc\":\"Select a target column\",\n  \"max_depth_not_valid\":\"The max depth parameter must be greater than or equal to zero\",\n  \"max_iter_not_valid\": \"The max iterations parameter must be greater than or equal to zero\",\n  \"min_instances_per_node_not_valid\": \"The minimum instances per node value must be &gt;= 1\",\n  \"subsampling_rate_not_valid\": \"The subsampling rate value must be &gt; 0 and &lt;= 1\"\n}\n</code></pre></p>"},{"location":"04.02-callbacks/","title":"Callbacks","text":"<p>Common Properties provides the following callbacks. These are specified to Common Properties using an object like this:</p> <pre><code>  const callbacks = {\n      applyPropertyChanges: this.applyPropertyChanges,\n      closePropertiesDialog: this.closePropertiesEditorDialog,\n      propertyListener: this.propertyListener,\n      controllerHandler: this.propertiesControllerHandler,\n      actionHandler: this.propertyActionHandler,\n      buttonHandler: this.buttonHandler,\n      buttonIconHandler: this.buttonIconHandler,\n      helpClickHandler: this.helpClickHandler,\n      titleChangeHandler: this.titleChangeHandler,\n      propertiesActionLabelHandler: this.propertiesActionLabelHandler,\n      tooltipLinkHandler: this.tooltipLinkHandler\n  };\n</code></pre>"},{"location":"04.02-callbacks/#applypropertychangespropertyset-appdata-additionalinfo-undoinfo-uiproperties","title":"applyPropertyChanges(propertySet, appData, additionalInfo, undoInfo, uiProperties)","text":"<p>Executes when the user clicks <code>OK</code> in the property dialog.  This callback allows users to save the current property values.</p> <ul> <li>propertySet: The set of current property values</li> <li>appData: (optional) application data that was passed in to <code>propertiesInfo</code></li> <li>additionalInfo: Object with additional information returned:<ul> <li>messages: (optional) An array of messages associated with the nodes current property values.</li> <li>title: The title of the properties editor</li> </ul> </li> <li>undoInfo: Object with information needed to undo this apply:<ul> <li>properties: Set of property values;</li> <li>messages: (optional) An array of messages associated with the nodes property values.</li> <li>uiProperties: (optional) Set of UI only properties values</li> </ul> </li> <li>uiProperties: The set of UI only property values (optional)</li> </ul> <pre><code>applyPropertyChanges(propertySet, appData, additionalInfo, undoInfo, uiProperties) {\n  var data = {\n    propertySet: propertySet,\n    appData: appData,\n    additionalInfo: {\n        messages: messages,\n        title: title\n    }\n  };\n}\n</code></pre>"},{"location":"04.02-callbacks/#closepropertiesdialogclosesource","title":"closePropertiesDialog(closeSource)","text":"<p>Executes when user clicks <code>Save</code> or <code>Cancel</code> in the property editor dialog.  This callback is used to control the visibility of the property editor dialog. <code>closeSource</code> identifies where this call was initiated from. It will equal \u201capply\u201d if the user clicked on \u201cSave\u201d when no changes were made, or \u201ccancel\u201d if the user clicked on \u201cCancel\u201d</p> <pre><code>closePropertiesDialog() {\n  this.setState({ showPropertiesDialog: false, propertiesInfo: {} });\n}\n</code></pre>"},{"location":"04.02-callbacks/#propertylistener","title":"propertyListener()","text":"<p>Executes when a user property values are updated.</p> <pre><code>propertyListener(data) {\n\n}\n</code></pre>"},{"location":"04.02-callbacks/#controllerhandler","title":"controllerHandler()","text":"<p>Executes when the property controller is created.  Returns the property controller.  See the Properties Controller page for APIs.</p> <pre><code>controllerHandler(propertyController) {\n\n}\n</code></pre>"},{"location":"04.02-callbacks/#actionhandler","title":"actionHandler()","text":"<p>Called whenever an action is ran.  <code>id</code> and <code>data</code> come from uihints and appData is passed in with propertiesInfo.</p> <pre><code>actionHandler(id, appData, data) {\n\n}\n</code></pre>"},{"location":"04.02-callbacks/#buttonhandler","title":"buttonHandler()","text":"<p>Called when the edit button is clicked on in a <code>readonlyTable</code> control, or if a custom table button is clicked. The callback provides the following data:</p> <ul> <li>data: an object that consists of<ul> <li>type: of button the click was invoked from.<ul> <li><code>edit</code> is returned from the edit button click of a <code>readonlyTable</code> control.</li> <li><code>custom_button</code> is returned from the custom button click of a complex type control.</li> </ul> </li> <li>propertyId: of the control that was clicked.</li> <li>buttonId: of the button that was clicked from a custom table button.</li> </ul> </li> </ul> <pre><code>buttonHandler(data) {\n\n}\n</code></pre>"},{"location":"04.02-callbacks/#buttoniconhandler","title":"buttonIconHandler()","text":"<p>Called when there is a <code>buttons</code> uihints set in the <code>complex_type_info</code> section of the parameter definition. This buttonIconHandler expects a Carbon Icon jsx object as the return value from the callback. This is used to display the Carbon icon in the custom table button. The buttonIconHandler provides the following data:</p> <ul> <li>data: an object that consists of<ul> <li>type: <code>customButtonIcon</code></li> <li>propertyId: of the control that was clicked.</li> <li>buttonId: of the button that was clicked from a custom table button.</li> <li>carbonIcon: The name of the Carbon icon specified in the uihints. The corresponding jsx object is expected to be returned in the callback.</li> </ul> </li> </ul> <pre><code>buttonIconHandler(data, callbackIcon) {\n  if (data.type === \"customButtonIcon\" &amp;&amp; data.carbonIcon === \"Edit32\") {\n    callbackIcon(&lt;Edit32 /&gt;);\n  }\n}\n</code></pre>"},{"location":"04.02-callbacks/#propertyiconhandler","title":"propertyIconHandler()","text":"<p>Called when a user wants to pass in a specific object to a dropdown menu. The propertyIconHandler expects a jsx object as the return value from the callback. This is used to display the jsx object in the dropdown menu. The propertyIconHandler provides the following data:</p> <p>-data: an object that consists of   - propertyId: of the dropdown that was selected   - enumValue: of the dropdown that was selected</p> <pre><code>propertyIconHandler(data, callbackIcon) {\n    const { iconSwitch } = this.state;\n    if (iconSwitch === true &amp;&amp; data.propertyId.name === \"oneofselect\" &amp;&amp; data.enumValue === \"red\") {\n        callbackIcon(&lt;Icon /&gt;);\n    }\n}\n</code></pre>"},{"location":"04.02-callbacks/#helpclickhandler","title":"helpClickHandler()","text":"<p>Executes when user clicks the help icon in the property editor dialog. The callback provides the following data:</p> <ul> <li>nodeTypeId: in case of parameterDef, id property of uihints;</li> <li>helpData: Optional helpData specified in paramDef (see below).</li> <li>appData: Optional application data that was passed in to <code>propertiesInfo</code> <pre><code>helpClickHandler(nodeTypeId, helpData, appData) {\n\n}\n</code></pre> To control whether a node shows the help icon in the right flyout, a help object with optional helpData needs to be provided in the paramDef:</li> <li>paramDef: Provide help object in operator\u2019s uihints. If help object exists, the icon will be shown. Optionally, provide a helpData object within the help object, which will be passed in the helpClickHandler callback.   https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/operators/uihints-v3-schema.json#L64</li> </ul> <p>If no help object is found, no help link will be shown.</p>"},{"location":"04.02-callbacks/#titlechangehandler","title":"titleChangeHandler()","text":"<p>Called on properties title change. This callback can be used to validate the new title and return warning or error message if the new title is invalid. This callback is optional.</p> <p>In case of error or warning, titleChangeHandler should call callbackFunction with an object having type and message. If the new title is valid, no need to call the callbackFunction. <pre><code>titleChangeHandler(title, callbackFunction) {\n  // If Title is valid. No need to send anything in callbackFunction\n  if (title.length &gt; 15) {\n    callbackFunction({\n      type: \"error\",\n      message: \"Only 15 characters are allowed in title.\"\n    });\n  }\n}\n</code></pre> where:</p> <ul> <li>type (string, required): This must be one of two values: \u201cwarning\u201d or \u201cerror\u201d.</li> <li>message(string, required): Error or warning message. There is no restriction on length of the message.</li> </ul>"},{"location":"04.02-callbacks/#propertiesactionlabelhandler","title":"propertiesActionLabelHandler()","text":"<p><pre><code>propertiesActionLabelHandler()\n</code></pre> This is an optional handler you don\u2019t need to implement anything for it unless you want to. This callback allows your code to override the default tooltip text for the <code>Undo</code> and <code>Redo</code> buttons. The <code>propertiesActionLabelHandler</code> callback, when provided, is called for the save properties action that is performed in Common Properties. This callback should return a string or null. If a string is returned it will be shown in the tooltip for the <code>Undo</code> button in the toolbar preceded by \u201cUndo:\u201d and the string will also appear in the tooltip for the <code>Redo</code> button (when appropriate) preceded by \u201cRedo:\u201d. If null is returned, Common Properties will display the default text <code>Save {node_name} node properties</code> for the Undo and Redo buttons.</p>"},{"location":"04.02-callbacks/#tooltiplinkhandler","title":"tooltipLinkHandler()","text":"<p>Optional callback used for adding a link in properties tooltips. link object must be defined under description in uiHints parameter info. Common Properties internally pass the link object to tooltipLinkHandler callback. This callback must return an object having url and label.</p> <pre><code>tooltipLinkHandler(link) {\n    return { url: \"https://www.google.com/\", label: \"More info\" };\n}\n</code></pre>"},{"location":"04.03-ui-hints/","title":"UI Hints","text":"<p>UI hints is a section of the property definition JSON. It contains specifications to assist in the presentation and flow of the property dialog.  The specifications indicate which controls to use to display and gather input on the fields. UI hints schema</p> <p>The UI Hints section consists a set of simple and complex attributes.</p> <p>The simple attributes are:</p> <ul> <li><code>id</code> (string) Dialog id.</li> <li><code>label</code> (object) External name of dialog.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>description</code> (object) Description of dialog.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>editor_size</code> (string) The width of the properties editor panel.  This can have a value of <code>\"small\"</code>, <code>\"medium\"</code>, <code>\"large\"</code> or <code>\"max\"</code>. The default is <code>\"small\"</code>.<ul> <li>When <code>\"small\"</code> is specified the properties panel is displayed with a default width of 320px and with a resize button that allows the panel to be increased in size up to the <code>\"medium\"</code> size which is 480px.</li> <li>When <code>\"medium\"</code> is specified the properties panel has a width of 480px and with a resize button that allows the panel to be increased in size up to the <code>\"large\"</code> size which is 640px.</li> <li>When <code>\"large\"</code> is specified the properties panel has a width of 640px and with a resize button that allows the panel to be increased in size up to the <code>\"max\"</code> size which is 900px.</li> <li>When <code>\"max\"</code> is specified the properties panel has a width of 900px and no resize button is displayed.</li> </ul> </li> <li><code>pixel_width</code> (object) This optional property gives finer control over the minimum and maximum sizes of the properties editor panel. If this is omitted the properties editor width is controlled by the <code>editor_size</code> property. <code>pixel_width</code> is an object with two properties <code>min</code> and <code>max</code> which are both numbers.<ul> <li>If <code>min</code> is specified it overrides the default size of the shrunken panel and <code>max</code> is based on the <code>editor_size</code> value.</li> <li>If <code>max</code> is specified it overrides the default size of the expanded panel and <code>min</code> is based on the <code>editor_size</code> value.</li> <li>If <code>editor_size</code> is set to <code>\"large\"</code> only the <code>max</code> value will be used to specify the size of the panel and no resize button will be displayed.</li> </ul> </li> </ul> <p>A warning will be displayed in the console if you specify an invalid value for either <code>min</code> or <code>max</code> such as making <code>min</code> greater than <code>max</code>.</p> <p>Example of the simple attributes: <pre><code>\"uihints\": {\n  \"id\":\"org.apache.spark.ml.ibm.transformers.Distinct\",\n  \"icon\": \"images/transformationspark.svg\",\n  \"label\": {\n    \"default\": \"Distinct\"\n  },\n  \"editor_size\": \"medium\",\n  \"pixel_width\": {\n    \"min\": 400,\n    \"max\": 800\n  },\n  \"description\": {\n    \"default\": \"Remove rows to leave only rows with distinct combinations of rows\"\n}\n</code></pre></p> <p>The complex attributes of the UI hints section are:</p>"},{"location":"04.03-ui-hints/#group-info","title":"Group-info","text":"<p>Group info attributes.</p> <ul> <li><code>id</code> (string) Required Panel id</li> <li><code>type</code> (string) The group type to be displayed. See the Group/Panel Controls section of the Controls page.</li> <li><code>depends_on_ref</code> (string) Property name this group depends upon. Valid for panelSelector groups only.</li> <li><code>label</code> (object) Group label.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>description</code> (object) Group description.  Only used with <code>textPanel</code> and <code>actionPanel</code>.<ul> <li>See Resource Definition</li> <li>See Dynamic Text Expressions</li> <li><code>link</code> (object) Optional link in the description. tooltipLinkHandler callback must be defined whenever link object is added in uiHints..<ul> <li><code>id</code> (string) Required unique link id.</li> <li><code>data</code> (object) Data passed to the tooltipLinkHandler callback.</li> </ul> </li> </ul> </li> <li><code>parameter_refs</code> (array[string]) List of parameter to be displayed.</li> <li><code>action_refs</code> (array[string]) List of action to be displayed.  Used with <code>actionPanel</code> only.</li> <li><code>group_info</code> (object) List of additional group information.</li> <li><code>data</code> (any) Returned in custom panel constructor without any changes.</li> <li><code>insert_panels</code> (boolean) Indicates whether panels, contained with a panelSelector, should be inserted between the radio buttons of a radio button set indicated by the depends_on_ref parameter.</li> <li><code>nested_panel</code> (boolean) Indicate whether panel should be nested. Nested panels are indented by 16px from the left and display left border. Default is false.</li> <li><code>class_name</code> (string) Optional classname for this group</li> <li><code>open</code> (boolean) Optional used to determine if a panel should be open or not by default.  Used with <code>twistyPanel</code> only.  Default is <code>false</code>.</li> </ul> <p>Example group info section: <pre><code>\"group_info\": [\n      {\n        \"id\": \"settings\",\n        \"label\": {\n          \"default\": \"Settings\"\n        },\n        \"type\": \"columnSelection\",\n        \"parameter_refs\": [\n          \"keys\"\n        ]\n      }\n    ]\n</code></pre></p>"},{"location":"04.03-ui-hints/#ui-only-parameters","title":"UI-only Parameters","text":"<p>UI-only parameters require information about the parameters same as the parameter definition information used for the backend parameters.  The UI-only parameter definition information is stored in the UI-hints section in the sub-section named <code>ui_parameters</code>.  The format of the information in the <code>ui_parameters</code> sub-section is documented in the Parameter Definition section of Parameter Definitions page.</p> <p>Example <pre><code>\"ui_parameters\": [\n    {\n      \"id\":\"databaseResource\",\n      \"type\":\"boolean\",\n      \"default\":true\n    },\n    {\n      \"id\":\"toi\",\n      \"type\":\"double\",\n      \"default\":0.0\n    }\n]\n</code></pre></p> <p>The UI-only parameters need to be added to other UI Hints sections (for example <code>Group Info</code> and canbe refered to by the <code>parameter_ref</code> field just like backend parameters.</p>"},{"location":"04.03-ui-hints/#parameter-info","title":"Parameter Info","text":"<p>The parameter info section contains the list of parameters to gather values on through the property dialogs and UI hints about each parameter.  The UI hints provide information to facilitate the UI controls used to display the parameter in the property dialogs.</p> <p>Parameter info attributes.</p> <ul> <li><code>parameter_ref</code> (string) Required Parameter name.</li> <li><code>label</code> (object) External name for parameter.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>label_visible</code> (boolean) Determines whether to display the label for a control.</li> <li><code>description</code> (object) Description of parameter with optional placement context.<ul> <li>See Resource Definition</li> <li><code>placement</code> (string) Placement context for the text.  Valid values are <code>as_tooltip, on_panel</code>.</li> <li><code>link</code> (object) Optional link in the description. tooltipLinkHandler callback must be defined whenever link object is added in uiHints..<ul> <li><code>id</code> (string) Required unique link id.</li> <li><code>data</code> (object) Data passed to the tooltipLinkHandler callback.</li> </ul> </li> </ul> </li> <li><code>control</code> (string) Which control to use. See Parameter Controls section of the Controls page.</li> <li><code>increment</code> (number) Determines the increment/decrement value for the spinner control only. The default value is <code>1</code>.</li> <li><code>orientation</code> (string) Determines how the control is displayed. Valid values are <code>vertical, horizontal</code>.</li> <li><code>width</code> (number) Column width for tables. The widths provided for table columns are used to calculate relative widths for each table column. So for example a 3 column table with widths of 20, 30, and 50 would use 20%, 30%, and 50% of the overall table width, respectively.</li> <li><code>char_limit</code> (number) Limits the number of characters a user can enter into the control for string parameters only.</li> <li><code>display_chars</code> (number) This has been deprecated and is subject to removal. Limits the number of characters displayed for a text field in a column in a table.  The text will have an ellipsis appended at this limit. Defaults to 64 characters.</li> <li><code>separator</code> (string) Determines where to put a separator relative to the current control.  Valid values are <code>after, before</code>.</li> <li><code>visible</code> (boolean) Determines whether to display control in a table cell. Used in complex types only.</li> <li><code>read_only</code> (boolean) Determines whether the control should be immutable or can be edited.</li> <li><code>place_holder_text</code> (object) Text hint for the user displayed input controls.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>helper_text</code> (object) Additional text to be displayed below the control often used to explain the correct data format.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>resource_key</code> (string) Used as a key for enum value labels in the resources section of property definition.</li> <li><code>edit_style</code> (string) Editing style of elements in a table. Valid values are <code>subpanel, inline, on_panel</code>.</li> <li><code>value_icons</code> (array[string]) For enumerated types, this defines the set of icons for the valid values. The ordering must be consistent with the order in the parameter enum attribute.</li> <li><code>filterable</code> (boolean) Determines if this column values can be filtered so that only rows that match the filter in column values are shown in the table. Applies to complex parameters only.</li> <li><code>sortable</code> (boolean) Determines if this column values can be sorted into ascending/descending order in a table. Applies to complex parameters only.</li> <li><code>number_generator</code> (object) Describes a number generator button beside numeric control. The \u2018label\u2019 element is a standard resource item, and the \u2018range\u2019 element contains \u2018min\u2019 and \u2018max\u2019 attributes to constrain the range of generated numbers.</li> <li><code>dm_default</code> (string) Data record metadata field to be used for default values in table cell columns. Typically this is used with parameters in complex structures in which the key field is a column name. Valid values are <code>type</code>, <code>description</code>, <code>measure</code>, and <code>modeling_role</code>.</li> <li><code>dm_image</code> (string) This can be set to display an icon of the corresponding dm type in the <code>role</code>:<code>column</code> field of a table. Valid values are <code>measure</code>, <code>type</code>, <code>none</code></li> <li><code>summary</code> (boolean) Determines if parameter should be shown in the summary when using a <code>summaryPanel</code>.</li> <li><code>text_before</code> (object) Text to be displayed before the control<ul> <li>See Resource Definition</li> <li><code>type</code> (string) Adds a icon and additional formatting to the text.  Only <code>info</code> is support at this time.</li> <li>See Dynamic Text Expressions</li> </ul> </li> <li><code>text_after</code> (object) Text to be displayed after the control<ul> <li>See Resource Definition</li> <li><code>type</code> (string) Adds a icon and additional formatting to the text.  Only <code>info</code> is support at this time.</li> <li>See Dynamic Text Expressions</li> </ul> </li> <li><code>custom_control_id</code> (string) Id that is used to determine which custom control to use when <code>control=custom</code></li> <li><code>data</code> (any) Returned in custom control constructor without any changes.</li> <li><code>rows</code> (integer) Number of rows to show in a table before scrolling starts. If one table in a panel is set to -1, that table will use the remaining available vertical space, down to a minimum of 2 rows.  Used in expression and code controls to determine the number of rows to show for those controls.</li> <li><code>moveable_rows</code> (boolean) Determines if rows can be moved up or down in a table or array of strings.</li> <li><code>action_ref</code> (string) An action to be displayed.</li> <li><code>date_format</code> (string) A format string such as YYYY-MM-DD which describes the display and entry format for a date field.</li> <li><code>time_format</code> (string) A format string such as HH:mm:ss which describes the display and entry format for a time field.</li> <li><code>custom_value_allowed</code> (boolean) Determines if a dropdown, outside of a table, can allow a custom value to be entered.</li> <li><code>class_name</code> (string) Optional classname for this parameter</li> <li><code>resizable</code> (boolean) Determines if this column can be resized in a table. When a column is resized, width of all the columns to the right of resized column is adjusted. Applies to structure parameters only. Default is <code>false</code>.</li> </ul> <p>Example parameter info section: <pre><code>    \"parameter_info\": [\n      {\n        \"parameter_ref\": \"keys\",\n        \"label\": {\n          \"resource_key\": \"sort.keys.label\"\n        },\n        \"description\": {\n          \"resource_key\": \"sort.keys.desc\",\n          \"placement\": \"on_panel\"\n        },\n        \"rows\": -1\n      }\n    ]\n</code></pre></p>"},{"location":"04.03-ui-hints/#complex-type-info","title":"Complex Type Info","text":"<p>The complex_type_info section defines complex data types.  This section is needed if in the <code>parameters</code> section of the parameter definition, one of the parameters has a type that is not the base type (i.e. an array or map of base types).  The type of control used for this definition depends on the group info type value.</p> <p>Complex Type info attributes.</p> <ul> <li><code>complex_type_ref</code> (string) Required Name of complex type, can be referenced in other places.</li> <li><code>key_definition</code> (string) A set of parameter info attributes about the key parameter.</li> <li><code>label</code> (object) External name of subpanel.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>parameters</code> (object) Required List of parameters that are part of this complex parameter.  This parameter can either have a set of parameter_info attributes or other nested complex_type_info attributes.</li> <li><code>header</code> (boolean) If <code>true</code> then the table has a header row with column names. Defaults to <code>true</code>.</li> <li><code>add_remove_rows</code> (boolean) If <code>true</code> then the table can have rows added and removed. Defaults to <code>true</code>.</li> <li><code>include_all_fields</code> (boolean) When <code>true</code> and <code>add_remove_rows</code> is <code>false</code>, ensures that all fields are included in the control at all times.</li> <li><code>row_selection</code> (string enum) How many rows in a table can be selected at a time.<ul> <li><code>single</code>: only one row at a time is able to be selected.</li> <li><code>multiple</code>: multiple rows at a time are able to be selected.</li> <li><code>multiple-edit</code>: select multiple rows and allow the editing of column values of all selected rows. Clicking on \u201cEdit\u201d button in table toolbar, opens a subpanel which shows editable columns. All columns which have <code>edit_style: \"inline\" or undefined</code> are shown in the subpabel. Changing a column value in the subpanel, changes the value in all selected rows.</li> </ul> </li> <li><code>buttons</code> (array) An array of objects that define custom buttons to be displayed in this complex structure, overriding any default buttons. Each button object contains the following properties:<ul> <li><code>id</code> (string) Required: Unique identifier used to identify the button in the callback function.</li> <li><code>label</code> (object): Button label to display. If an icon is specified as well, the icon will be shown to the right of the label.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>description</code> (object): Tooltip text to display when the button is hovered.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>icon</code> (string): URL to .svg image to display.</li> <li><code>carbon_icon</code> (string): Host provided name of Carbon icon to display. A callback function is required for the host application to return the jsx icon object imported from @carbon/icons-react library.</li> <li><code>enabled</code> (boolean): Button will be enabled if true, disabled if false.</li> <li><code>divider</code> (string enum): Display a divider before or after this button. Defaults to <code>after</code><ul> <li><code>before</code> Display divider before this button</li> <li><code>after</code> Display divider after this button</li> </ul> </li> </ul> </li> </ul> <p>Example complex_type_info section: <pre><code> \"complex_type_info\": [\n    {\n        \"complex_type_ref\": \"SortEntry\",\n        \"row_selection\": \"multiple\",\n        \"moveable_rows\": true,\n        \"add_remove_rows\": false,\n        \"include_all_fields\": true,\n        \"key_definition\": {\n          \"parameter_ref\": \"field\",\n          \"width\": 28,\n          \"label\": {\n            \"resource_key\": \"SortEntry.field.label\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"parameter_ref\": \"sort_order\",\n            \"width\": 16,\n            \"resource_key\": \"SortEntry.sort_order\",\n            \"label\": {\n              \"resource_key\": \"SortEntry.sort_order.label\"\n            },\n            \"control\": \"toggletext\",\n            \"value_icons\": [\n              \"/images/up-triangle.svg\",\n              \"/images/down-triangle.svg\"\n            ]\n          }\n        ]\n      },\n      {\n        \"complex_type_ref\": \"FieldStorageEntry\",\n        \"key_definition\": {\n          \"parameter_ref\": \"field\",\n          \"label\": {\n            \"default\": \"\",\n            \"resource_key\": \"FieldStorageEntry.field\"\n          },\n          \"width\": 26,\n          \"sortable\": true,\n          \"filterable\": true\n        },\n        \"parameters\": [\n          {\n            \"parameter_ref\": \"override\",\n            \"label\": {\n              \"default\": \"\",\n              \"resource_key\": \"FieldStorageEntry.override\"\n            },\n            \"width\": 16,\n            \"edit_style\": \"inline\",\n            \"sortable\": true\n          },\n          {\n            \"parameter_ref\": \"storage\",\n            \"label\": {\n              \"default\": \"\",\n              \"resource_key\": \"FieldStorageEntry.storage\"\n            },\n            \"width\": 26,\n            \"edit_style\": \"inline\",\n            \"dm_default\": \"type\"\n          }\n        ],\n        \"buttons\": [\n          {\n            \"id\": \"icon_button_1\",\n            \"carbon_icon\": \"Edit32\",\n            \"label\": {\n              \"resource_key\": \"table.somekey.label\"\n            },\n            \"description\": {\n              \"default\": \"This renders a button that has a label and Carbon icon to the right of the label.\n            },\n            \"enabled\": true\n          }\n       ]\n    }\n ]\n</code></pre></p>"},{"location":"04.03-ui-hints/#title-info","title":"Title-info","text":"<p>The title_info sections defines what will be displayed in the title section alongside the <code>titleDefinition</code>.</p> <p>Title info attributes.</p> <ul> <li><code>action_refs</code> (array[string]) List of action to be displayed in the title section. Each action_ref must have a corresponding action defined in the action_info section.</li> </ul> <p>Example title info section: <pre><code>\"title_info\": {\n   \"action_refs\": [\n      \"increment\"\n   ]\n}\n</code></pre></p>"},{"location":"04.03-ui-hints/#action-info","title":"Action Info","text":"<p>The action_info section defines an action.  Actions are used to callback to the application to perform an operation.</p> <p>Action info attributes.</p> <ul> <li><code>id</code> (string) Required Id of the action.</li> <li><code>label</code> (object) Required External name of action.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>control</code> (string) Required The type of action.  Currently <code>button</code> and <code>image</code> are supported.</li> <li><code>class_name</code> (string) Optional classname for this action</li> <li><code>image</code> (object) Properties associate with an <code>image</code> action.<ul> <li><code>url</code> (string) Location of the image to display.</li> <li><code>placement</code> (string) Placement of image relative to a property.  Values are <code>right</code> or <code>left</code>.</li> <li><code>size</code> (object) Pixel size of the image.<ul> <li><code>height</code> (number) Image height in pixels.</li> <li><code>width</code> (number) Image width in pixels.</li> </ul> </li> <li><code>tooltip_direction</code> (string) Set tooltip direction for action image. Values are <code>right</code>, <code>left</code>, <code>top</code>, or <code>bottom</code>. Default is <code>bottom</code>.</li> </ul> </li> <li><code>button</code> (object) Properties associated with action button.<ul> <li><code>kind</code> (string) Button kind. Values are same as carbon button kind values. Default is <code>tertiary</code>.</li> <li><code>size</code> (string) Button size. Values are sm, md, lg, xl. Default is <code>sm</code>.</li> </ul> </li> <li><code>data</code> (any) Returned back in action callback.</li> </ul> <pre><code>{\n  \"id\": \"increment\",\n  \"label\": {\n    \"default\": \"Increment\"\n  },\n  \"control\": \"button\",\n  \"data\": {\n    \"parameter_ref\": \"number\"\n  }\n}\n</code></pre>"},{"location":"04.03-ui-hints/#resource-definition","title":"Resource Definition","text":"<p>Used for user facing text.  Allows for default values if no translations are provided.</p> <ul> <li><code>default</code> (string) Default value if <code>resource_key</code> not defined.</li> <li><code>resource_key</code> (string) Used as a key for enum value labels in the resources section of property definition.</li> </ul>"},{"location":"04.03-ui-hints/#dynamic-text-expressions","title":"Dynamic text expressions","text":"<p>Used to dynamically set text based on a parameter value change. If parameter id is used then then current value for that parameter will be passed into the function.</p> <ul> <li><code>percent(&lt;number or parameter id&gt;, &lt;integer&gt;)</code>  Return the percent of the 1st parameter.  The optional 2nd parameter determines the number of decimal places.</li> <li><code>sum(&lt;number or parameter id&gt;, &lt;number or parameter id&gt;, ...)</code>  Returns the sum of all parameters</li> </ul> <pre><code>{\n  \"parameter_ref\": \"numberfield\",\n  \"label\": {\n    \"default\": \"Number\"\n  },\n  \"text_after\": {\n    \"default\": \"Sum: ${sum(numberfield, 2)} with (numberfield, 2, numberfield). Percent: ${percent(numberfield,2)}\"\n  }\n}\n</code></pre>"},{"location":"04.04-controls/","title":"Controls","text":""},{"location":"04.04-controls/#common-properties-element-types","title":"Common Properties Element Types","text":"<p>The editor determines the most appropriate control and panel type for each parameter based on the context (parameter type, role, group type, etc.). Although an author can specify a desired control for a given parameter via its <code>uihints</code>, this should be used sparingly and carefully - specifying an inappropriate control for a parameter will lead to undefined behavior.</p> <p>Documentation containing examples of the following group/panels and control types is available at:</p> <p>https://elyra-canvas-test-harness.u20youmx4sm.us-south.codeengine.appdomain.cloud/#/properties</p>"},{"location":"04.04-controls/#grouppanel-controls","title":"Group/Panel Controls","text":"<p>Controls are grouped and arranged on panels and sub-panels within the \u201cgroup_info\u201d section of operator uihints. Some panels appear as tab controls, others are for managing shared dataset metadata, while still others contain nested sub-panels.</p>"},{"location":"04.04-controls/#group-types","title":"Group Types","text":"<ul> <li><code>controls</code> A general panel type containing parameter controls.</li> <li><code>tabs</code> A tabbed control, each tab containing sub-panels and controls.</li> <li><code>subTabs</code> A horizontal sub-tabbed control, each tab containing sub-panels and controls. If displayed within a Tearsheet container, subtabs will be displayed vertically.</li> <li><code>panels</code> A panel type that contains sub-panels.</li> <li><code>panelSelector</code> A panel containing sub-panels that are shown or hidden based upon a controlling radio selection.</li> <li><code>columnSelection</code> A panel type containing field-selection controls that share a common set of fields.</li> <li><code>customPanel</code> A custom panel for displaying user defined control. See Custom Panels section of the Custom Components page for more details.</li> <li><code>summaryPanel</code> A panel used in the flyout editor that will provide a link to open a wide flyout that can contain panels and parameter.</li> <li><code>actionPanel</code> A panel used for containing action controls.</li> <li><code>textPanel</code> A panel used to display static label and/or description.</li> <li><code>twistyPanel</code> A panel used to display a panel title that expands to the panel content when clicked.</li> <li><code>columnPanel</code> A panel used to display children side by side.</li> <li><code>tearsheetPanel</code> A tearsheet panel.  The panel can be opened/closed using the propertyController methods <code>setActiveTearsheet(groupId)</code> and <code>clearActiveTearsheet()</code></li> </ul>"},{"location":"04.04-controls/#parameter-controls","title":"Parameter Controls","text":"<p>The following controls are supported in the Common Properties editor. Control types are intended for use with particular parameter types:</p>"},{"location":"04.04-controls/#control-types","title":"Control Types","text":"<ul> <li><code>readonly</code> A read only text field. Used for fields users shouldn\u2019t edit.</li> <li><code>hidden</code> A control that has no UI to display.</li> <li><code>textfield</code> A single line editable text field.</li> <li><code>passwordfield</code> A masked single line text field with tooltip. The tooltip text can be customized by setting <code>[parameter_id].passwordHide.tooltip</code> and <code>[parameter_id].passwordShow.tooltip</code> in resources section.</li> <li><code>textarea</code> A multi-line text area.</li> <li><code>list</code> A single column table for editing a list of values.</li> <li><code>expression</code> An expression editing field  that provides language specific syntax highlighting and text auto complete.  An expression builder addon is available with the expression control.  You must provide the <code>expressionInfo</code> field for the <code>propertiesInfo</code> config. See Common Properties Documentation for more details. To maximize in a tearsheet add this attribute and define a <code>tearsheetPanel</code> in <code>group_info</code>.     <pre><code>\"data\": {\n  \"tearsheet_ref\": \"&lt;tearsheet groupId&gt;\"\n}\n</code></pre></li> <li><code>code</code> An code editing field  that provides language specific syntax highlighting and text auto complete.  To maximize in a tearsheet add this attribute and define a <code>tearsheetPanel</code> in <code>group_info</code>.     <pre><code>\"data\": {\n  \"tearsheet_ref\": \"&lt;tearsheet groupId&gt;\"\n}\n</code></pre></li> <li><code>numberfield</code> A numeric text field. Number fields can also optionally display a random number generator button beside the control. See the uihints schema for details.</li> <li><code>datefield</code> A date input control whose date format tokens follow date-fns. Defaults to <code>yyyy-mm-dd</code></li> <li><code>timefield</code> A time input control whose time format tokens follow date-fns. Defautls to <code>H:m:s</code></li> <li><code>datepicker</code> A date input control with calendar picker whose date format tokens follow Flatpickr. Defaults to <code>Y-m-d</code>. Helper text can be included by adding <code>[parameter_id].helper</code> in the resources section.</li> <li><code>datepickerRange</code> A date input control with calendar picker for a range of dates. This follow the same rules as the <code>datepicker</code> control. Start and end labels defaults to <code>Start</code> and <code>End</code> respectively. Start, end, and helper labels can be customized by adding the following in the resources section:     <pre><code>\"resources\": {\n  [parameter_id].range.start.label: \"Custom start label\",\n  [parameter_id].range.start.desc: \"Custom start description that will appear as tooltip next to the label\",\n  [parameter_id].range.start.helper: \"Custom start helper that will appear as text below the input\",\n  [parameter_id].range.end.label: \"Custom end label\",\n  [parameter_id].range.end.desc: \"Custom end description that will appear as tooltip next to the label\",\n  [parameter_id].range.end.helper: \"Custom end helper that will appear as text below the input\"`\n}\n</code></pre></li> <li><code>spinner</code> A standard spinner control to increment/decrement the number value.</li> <li><code>checkbox</code> A standard checkbox control.</li> <li><code>radioset</code> A radio set where a parameter value is selected from a small range of options. See the Conditions page for special radio button disabling options.</li> <li><code>checkboxset</code> A checkbox set for list type parameters with enumerated options where the count is less than 5.</li> <li><code>oneofselect</code> A standard dropdown list control.</li> <li><code>multiselect</code> A standard dropdown list control that allows for multiple selection.</li> <li><code>someofselect</code> A multi-selection control for enumerated list parameters where the count is greater than 4.</li> <li><code>selectcolumn</code> A dropdown list control that selects from available column names. When dropdown list is empty, <code>selectcolumn</code> control will display default placeholder text <code>\"...\"</code>. This placeholder text can be customized by setting <code>[parameter_id].emptyList.placeholder</code> in resources section. When custom empty list placeholder text is provided, Common Properties will disable the empty list control.</li> <li><code>selectcolumns</code> A multi-select control for column selections.</li> <li><code>selectschema</code> A dropdown control that contains the available schemas in <code>dataset_metadata</code>. The <code>name</code> of the schema will be displayed if provided. If <code>name</code> is not provided, the index (zero-based) of the schema will be used instead. When dropdown list is empty, <code>selectschema</code> control will display default placeholder text <code>\"...\"</code>. This placeholder text can be customized by setting <code>[parameter_id].emptyList.placeholder</code> in resources section. When custom empty list placeholder text is provided, Common Properties will disable the empty list control.</li> <li><code>toggle</code>  A standard toggle control with default On/Off states. This text can be customized by setting <code>[parameter_id].toggle.on.label</code> and <code>[parameter_id].toggle.off.label</code> in resources section.</li> <li><code>toggletext</code> A two-state control with optional icons that can exist on its own or within table cells.</li> <li><code>structuretable</code> Table control for editing lists or maps of complex types that have field names in the first column.</li> <li><code>structurelisteditor</code> For lists or maps of complex types that are not field-oriented parameters.</li> <li><code>structureeditor</code> Allows one to define a structure and use it directly on a panel. Each structure member is surfaced as an individual control. Supports a <code>layout</code> setting that allows one to position structureeditor controls in a grid (see below).</li> <li><code>readonlyTable</code> A read only table. Used for tables to display fields that users shouldn\u2019t edit.</li> <li><code>custom</code> A custom control for displaying a user defined control. See Custom Controls section of the Common Properties Custom Components page for more details.</li> <li><code>slider</code> A standard slider which allows to enter a numeric value within the slider range and also allows to drag and adjust the slider track to a specific value within the range. The slider labels for minimum and maximum values can be customized by setting them as <code>[parameter_id].min.label</code>   for minimum value label and <code>[parameter_id].max.label</code> for maximum value label in resources section.</li> </ul>"},{"location":"04.04-controls/#a-note-on-field-name-storage","title":"A Note on Field Name Storage","text":"<p>When a given node can accept more than a single datarecord-metadata object as input, it becomes necessary to store the schema name (a.k.a. \u2018link_name\u2019) along with each field name that is stored in parameter sets. In those cases, instead of using strings to store field names, they are represented in parameter sets as compound objects containing both \u2018link_ref\u2019 and \u2018field_name\u2019 elements:</p> <pre><code>\"current_parameters\": {\n  \"field\": { \"link_ref\": \"Schema-1\", \"field_name\": \"Age\" },\n  ...\n</code></pre> <p>In order to indicate that a given node can potentially accept multiple input data links and would thus require compound field name storage, all parameter definitions within the node that contain <code>\"role\": \"column\"</code>, whether located at the top level or within complex types, should declare their data types as \u201cobject\u201d instead of \u201cstring\u201d:</p> <pre><code>\"parameters\": [\n  {\n    \"id\": \"fields\",\n    \"type\": \"array[object]\",\n    \"role\": \"column\",\n    \"required\": true\n  },\n  ...\n</code></pre>"},{"location":"04.04-controls/#edit_style","title":"edit_style","text":"<p>When editing complex type values in tables one can either edit cell values inline or in a sub panel:</p> <ul> <li><code>subpanel</code> A small sub-dialog is launched to edit cell values.</li> <li><code>inline</code> Controls appear inline within table cells for editing values.</li> <li><code>on_panel</code> Control appears below the table when the row is selected.</li> </ul>"},{"location":"04.04-controls/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>moveable_rows</code> boolean A value that appears in \u201ccomplex_type_definition\u201d sections. If set to <code>true</code> allows rows in the table to be moved  up and down for reordering.</li> <li><code>row_selection</code> enum [\u201csingle\u201d, \u201cmultiple\u201d] Determines how many rows can be selected in a table at one time. Defaults to multiple.</li> <li><code>sortable</code> boolean Both sortable and filterable apply to table columns. When set within the \u201ckey_definition\u201d or the \u201cparameters\u201d sections of a structure definition, those columns are sortable and/or can be filtered upon.</li> <li><code>filterable</code> boolean (see sortable above)</li> <li><code>language</code> enum [\u201cCLEM\u201d, \u201ctext/x-hive\u201d] The language for the expression control syntax highlight and text auto complete feature.  If not specified, the expression control does not have syntax highlighting or text auto complete.</li> <li><code>layout</code> A two-dimensional string array value that appears in \u201ccomplex_type_definition\u201d sections and allows one to layout structureeditor controls in a two dimensional grid.</li> </ul>"},{"location":"04.05-conditions/","title":"Conditions","text":"<p>Conditions define a set of specifications for evaluating parameter values.  The specifications support complex interdependency checking such as relationships between multiple parameters (i.e. Valid values for parameter one depend upon the value of parameter two). Here is the Conditions Schema</p> <p>Documentation containing examples of the following conditions for the different supported controls are available at: https://elyra-canvas-test-harness.u20youmx4sm.us-south.codeengine.appdomain.cloud/#/conditions</p> <p>A conditions file contains an array of conditions. Each condition takes one of the following forms:</p>"},{"location":"04.05-conditions/#validation-definition","title":"Validation definition","text":"<p>A single validation. The fail_message is displayed upon validation failure.</p> <p>The attributes for the validation definition are:</p> <ul> <li><code>id</code> (string) A unique identifier for the validation.  This is required if multiple validations have the same <code>focus_parameter_ref</code> value.</li> <li> <p><code>fail_message</code> (object) Required The message to display if the validation fails.  Each fail_message consist of the following attributes</p> <ul> <li><code>message</code> (object) Required The message to display.<ul> <li>See Resource Definition</li> </ul> </li> <li><code>focus_parameter_ref</code> (string) Required The parameter control to get focus after displaying the error/warning. If the validation refers to a table cell, then control must have the column indicator.  For example if the validation is for <code>MyTable</code> cell column 2 then <code>MyTable[2]</code>.</li> <li><code>type</code> (string) Type of messages.  Valid values are <code>error, warning, info</code>.</li> </ul> </li> <li> <p><code>evaluate</code> (object)  Specification for how to evaluate the validity of the parameter.  The evaluate attribute can be one of the following structures.</p> <ul> <li><code>condition</code> (object) This is a single condition that evaluates to true or false.<ul> <li><code>op</code> (string) Required A single operator for the properties of the condition.  Valid values are: <code>isEmpty</code>, <code>isNotEmpty</code>, <code>greaterThan</code>, <code>lessThan</code>, <code>equals</code>, <code>notEquals</code>, <code>matches</code>, <code>notMatches</code>, <code>contains</code>, <code>notContains</code>, <code>colNotExists</code>, <code>isDateTime</code>, <code>dmTypeEquals</code>, <code>dmTypeNotEquals</code>, <code>dmMeasurementEquals</code>, <code>dmMeasurementNotEquals</code>, <code>dmRoleEquals</code>, <code>dmRoleNotEquals</code> <code>lengthEquals</code>, <code>lengthGreaterThan</code>, <code>lengthLessThan</code>.</li> </ul> </li> <li><code>parameter_ref</code> (string) Required The primary parameter.</li> <li><code>parameter_2_ref</code> (string) Second parameter for multi-parameter validation.</li> <li><code>value</code> (string, boolean, number) Value against which to compare the primary parameter value.</li> <li><code>values</code> (array[string]) Values against which to compare the primary parameter value is in.  Used only in <code>filter</code> conditions.</li> </ul> </li> <li><code>or</code> (object) This is a container of \u2018or\u2019 conditions. Evaluates to true if ANY sub-condition evaluates to true. Can nest any number of additional conditional types.</li> <li><code>and</code> (object) This is a container of \u2018and\u2019 conditions. Evaluates to true if ALL sub-condition evaluates to true. Can nest any number of additional conditional types.</li> </ul>"},{"location":"04.05-conditions/#enabled-definition","title":"Enabled definition","text":"<p>Enablement test. Disables controls if evaluate is false.</p> <p>The attributes for the enabled definition are:</p> <ul> <li><code>parameter_refs</code> (array[string]) Array of parameter names affected by this operation.  If evaluate is false, then the controls associated with these parameters are disabled. Note that individual radio buttons can be disabled by using the radio button value name instead of the overall property name in the parameter_refs array.</li> <li><code>action_refs</code> (array[string]) Array of action names affected by this operation.  If evaluate is false, then the action button or image associated with these action names are disabled.</li> <li><code>evaluate</code> (object) see the <code>evaluate</code> attribute in <code>validation definition</code>.</li> </ul>"},{"location":"04.05-conditions/#visible-definition","title":"Visible definition","text":"<p>Visibility test. Hides controls if evaluate is false.</p> <p>The attributes for the visible definition are:</p> <ul> <li><code>parameter_refs</code> (array[string]) Array of parameter names affected by this operation.  If evaluate is false, then hide the controls associated with these parameters.</li> <li><code>action_refs</code> (array[string]) Array of action names affected by this operation.  If evaluate is false, then the action button or image associated with these action names are disabled.</li> <li><code>evaluate</code> (object) see the <code>evaluate</code> attribute in <code>validation definition</code>.</li> </ul>"},{"location":"04.05-conditions/#filter-definition","title":"Filter definition","text":"<p>Filter test. The filter will determine which data record fields to include in a control.</p> <p>The attributes for the filter definition are:</p> <ul> <li><code>parameter_ref</code> (string) Parameter id affected by this operation. This must be a parameter that operates upon datarecord-metadata columns.</li> <li><code>parameter_refs</code> (string) Exclusive with <code>parameter_ref</code> and used with <code>dmSharedFields</code>. Parameter ids affected by this operation. They must be parameters that operate upon datarecord-metadata columns.</li> <li><code>evaluate</code> (object) see the <code>evaluate</code> attribute in <code>validation definition</code>.</li> </ul> <p>Supported operations (<code>op</code>):</p> <ul> <li><code>dmType</code> - filters <code>type</code> value from schema.</li> <li><code>dmMeasurement</code> - filters <code>measurement</code> value from schema.</li> <li><code>dmModelingRole</code> - filters <code>modeling_role</code> value from schema.</li> <li><code>dmSharedFields</code> - shares source fields with all field chooser property names found in the <code>parameter_refs</code> array.</li> </ul> <p>Examples: <pre><code>{\n  \"filter\": {\n    \"parameter_ref\": \"fields_filter_measurement\",\n    \"evaluate\": {\n      \"condition\": {\n        \"op\": \"dmMeasurement\",\n        \"value\": \"discrete\"\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"filter\": {\n    \"parameter_ref\": \"fields_filter_type\",\n    \"evaluate\": {\n      \"condition\": {\n        \"op\": \"dmType\",\n        \"values\": [\"integer\", \"double\"]\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"filter\": {\n    \"parameter_refs\": [\n       \"fields_filter_type\",\n       \"multi_field_chooser_table\",\n       \"field_chooser_in_another_panel\"\n    ],\n    \"evaluate\": {\n      \"condition\": {\n        \"op\": \"dmSharedFields\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"04.05-conditions/#enum-filter-definition","title":"Enum Filter definition","text":"<p>Filters the available options for enumeration parameters. Reduces the available enumeration items if evaluate is true.</p> <p>The attributes for the enum_filter definition are:</p> <ul> <li><code>target</code> (object) Contains a target parameter_ref reference and a replacement values array.</li> <li><code>evaluate</code> (object) see the <code>evaluate</code> attribute in <code>validation definition</code>.</li> </ul> <p>Example: <pre><code>{\n  \"enum_filter\": {\n    \"target\": {\n      \"parameter_ref\": \"radioset_filtered\",\n      \"values\": [\n        \"red\",\n        \"yellow\",\n        \"green\"\n      ]\n    },\n    \"evaluate\": {\n      \"condition\": {\n        \"parameter_ref\": \"filter_radios\",\n        \"op\": \"equals\",\n        \"value\": true\n    }\n  }\n}\n</code></pre></p>"},{"location":"04.05-conditions/#allow-change-definition","title":"Allow Change definition","text":"<p>Allow change validates that a change is allowed on a property.  If it evaluates to true then the value for the property is changed.  This is typically used to restrict values that are invalid in one property based on the value in another property.  For example, if the property represents a storage type with a value of <code>string</code>, then a property that represents a measurement type should not be allowed to be set to <code>continuous</code>.</p> <p>The attributes for the allow_change definition are:</p> <ul> <li><code>parameter_refs</code> (array[string]) Array of parameter names affected by this operation.</li> <li><code>evaluate</code> (object) see the <code>evaluate</code> attribute in <code>validation definition</code>.</li> </ul> <p>Example: <pre><code>{\n      \"allow_change\": {\n        \"parameter_refs\": [\n          \"ST_mse_table[2]\"\n        ],\n        \"evaluate\": {\n          \"or\": [\n            {\n              \"condition\": {\n                \"parameter_ref\": \"ST_mse_table[2]\",\n                \"op\": \"notEquals\",\n                \"value\": \"Football\"\n              }\n            },\n            {\n              \"condition\": {\n                \"parameter_ref\": \"ST_mse_table[5]\",\n                \"op\": \"notEquals\",\n                \"value\": \"European\"\n              }\n            }\n          ]\n        }\n      }\n    }\n</code></pre></p>"},{"location":"04.05-conditions/#default-value-definition","title":"Default value definition","text":"<p>Sets the default value on the <code>parameter_ref</code> property if condition evaluates to true. If multiple conditions evaluate to true only the first condition is used. Default value condition is evaluated only once when loading properties. If user updates the value of <code>parameter_ref</code>, default value will be overwritten by the new value.</p> <p>The attributes for the default_value definition are:</p> <ul> <li><code>parameter_ref</code> (string) Parameter whose default value is to be set.</li> <li><code>value</code> (string, boolean, number, object, array) This will be the default value of parameter_ref if condition evaluates to true.</li> <li><code>evaluate</code> (object) see the <code>evaluate</code> attribute in <code>validation definition</code>.</li> </ul> <p>Example: <pre><code>{\n  \"default_value\": {\n    \"parameter_ref\": \"conditional_default\",\n    \"value\": \"Value defined in default_value condition. You will see this sentence when default value of mode equals Include.\",\n    \"evaluate\": {\n      \"condition\": {\n        \"parameter_ref\": \"mode\",\n        \"op\": \"equals\",\n        \"value\": \"Include\"\n      }\n    }\n  }\n},\n{\n  \"default_value\": {\n    \"parameter_ref\": \"conditional_default\",\n    \"value\": [\"This is a second condition for conditional_default. You should never see this value.\"],\n    \"evaluate\": {\n      \"condition\": {\n        \"parameter_ref\": \"mode\",\n        \"op\": \"equals\",\n        \"value\": \"Include\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"04.05-conditions/#a-note-on-table-cell-conditions","title":"A note on table cell conditions","text":"<p>Support for table cell conditions is achieved via the use of the array subscript operator, <code>[]</code>. When evaluating table cells, one uses the table identifier with an array subscript indicating the zero-based table column being operated upon (which also corresponds to the sub-control index as defined in <code>complex_types</code>).</p> <p>So for example if one has a StructureTable property named myTable, column conditions on that table are referred to using <code>myTable[1]</code>, <code>myTable[3]</code>, etc.</p>"},{"location":"04.05-conditions/#example","title":"Example","text":"<p>Example of a condition section. <pre><code>  \"conditions\": [\n      {\n        \"validation\": {\n          \"fail_message\": {\n            \"type\": \"error\",\n            \"focus_parameter_ref\": \"inputFieldList\",\n            \"message\": {\n              \"resource_key\": \"input_field_list_not_empty\"\n            }\n          },\n          \"evaluate\": {\n            \"condition\": {\n              \"parameter_ref\": \"inputFieldList\",\n              \"op\": \"isNotEmpty\"\n            }\n          }\n        }\n      },\n      {\n    \"visible\": {\n      \"parameter_refs\": [\n         \"oneofselectPets\"\n      ],\n      \"evaluate\": {\n         \"condition\": {\n            \"parameter_ref\": \"oneofselectAnimals\",\n        \"op\": \"notContains\",\n        \"value\": \"lion\"\n          }\n      }\n    }\n      },\n     {\n    \"visible\": {\n      \"action_refs\": [\n         \"action_button\"\n      ],\n      \"evaluate\": {\n         \"condition\": {\n            \"parameter_ref\": \"button_hide_checkbox\",\n        \"op\": \"equals\",\n        \"value\": false\n          }\n      }\n    }\n      },\n      {\n    \"enabled\": {\n      \"parameter_refs\": [\n        \"radiosetColor\"\n      ],\n      \"evaluate\": {\n        \"condition\": {\n          \"parameter_ref\": \"checkboxEnable\",\n          \"op\": \"checked\"\n            }\n      }\n    }\n      },\n      {\n    \"validation\": {\n      \"fail_message\": {\n        \"type\": \"error\",\n        \"focus_parameter_ref\": \"subsamplingRate\",\n        \"message\": {\n          \"resource_key\": \"subsampling_rate_not_valid\"\n        }\n      },\n      \"evaluate\": {\n        \"and\": [\n          {\n            \"condition\": {\n              \"parameter_ref\": \"subsamplingRate\",\n              \"op\": \"greaterThan\",\n              \"value\": 0\n            }\n          },\n          {\n            \"or\": [\n              {\n                \"condition\": {\n                  \"parameter_ref\": \"subsamplingRate\",\n                  \"op\": \"lessThan\",\n                  \"value\": 1\n                }\n              },\n              {\n                \"condition\": {\n                  \"parameter_ref\": \"subsamplingRate\",\n                  \"op\": \"equals\",\n                  \"value\": 1\n                }\n              }\n            ]\n          }\n        ]\n      }\n    }\n      },\n      {\n    \"enabled\": {\n      \"parameter_refs\": [\n        \"field_types[2]\"\n      ],\n      \"evaluate\": {\n        \"condition\": {\n          \"parameter_ref\": \"field_types[1]\",\n          \"op\": \"checked\"\n        }\n      }\n    }\n      }\n    }\n  ]\n</code></pre></p>"},{"location":"04.06-custom-components/","title":"Custom Components Overview","text":"<p>Custom components allows applications to use custom code to drive different parts of the common-properties user interface.  For some panels and controls it might be necessary to listen to different types of redux state changes to cause the panel/control to rerender. Here is an example of a textfield listening to three state changes: <pre><code>import { connect } from \"react-redux\";\n\n// ... application code\n\nrender() {\n  const value = this.props.value; // value passed by redux as a property\n\n  // ... rest of component render code\n\n}\n\nTextfieldControl.propTypes = {\n  // ... application props\n  state: PropTypes.string, // pass in by redux\n  value: PropTypes.string, // pass in by redux\n  messageInfo: PropTypes.object // pass in by redux\n};\n\nconst mapStateToProps = (state, ownProps) =&gt; ({\n  value: ownProps.controller.getPropertyValue(ownProps.propertyId),\n  state: ownProps.controller.getControlState(ownProps.propertyId),\n  messageInfo: ownProps.controller.getErrorMessage(ownProps.propertyId)\n});\nexport default connect(mapStateToProps, null)(TextfieldControl);\n</code></pre></p>"},{"location":"04.06-custom-components/#custom-panels","title":"Custom Panels","text":"<p>Custom panels allow applications to create their own panels and controls that can live in the same dialogs as common-property panels and controls.</p>"},{"location":"04.06-custom-components/#custom-panel-interface","title":"Custom panel interface","text":"<pre><code>// Returns the 'id' for the group defined in uihints\nstatic id()\n\nconstructor(parameters, controller, data)\n\n// Returns the content users want to display\nrenderPanel()\n</code></pre> <ul> <li>parameters - String array of parameters set under the customPanel group in uihints</li> <li>controller - See here for API information.</li> <li>data - Optional parameter.  Returns values stored in <code>data</code> attribute of a group <code>customPanel</code>.</li> <li>renderPanel() - Called on all Redux store changes:<ul> <li>property value changes (property APIs)</li> <li>state changes (state APIs)</li> <li>schema changes (schema APIs)</li> <li>row selection changes (selection APIs)</li> <li>messages changes (message APIs)</li> </ul> </li> </ul>"},{"location":"04.06-custom-components/#custom-react-components","title":"Custom React components","text":"<p>Example <pre><code>renderPanel() {\n    const controlId = this.parameters[0];\n    return (\n        &lt;CustomCtrlToggle\n            key={controlId}\n            propertyId={name: controlId}\n            controller={this.controller}\n        /&gt;\n    );\n}\n</code></pre></p>"},{"location":"04.06-custom-components/#examples","title":"Examples","text":"<p>https://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/components/custom-panels</p>"},{"location":"04.06-custom-components/#custom-controls","title":"Custom Controls","text":"<p>Custom controls allow applications to create their own controls that can live in the same dialogs as common-property panels and controls.</p>"},{"location":"04.06-custom-components/#custom-control-interface","title":"Custom control interface","text":"<pre><code>// Returns the 'custom_control_id' for the parameter defined in uihints\nstatic id()\n\nconstructor(propertyId, controller, data, tableInfo)\n\n// Returns the content users want to display\nrenderControl()\n</code></pre> <ul> <li>propertyId - See propertyId for definition.</li> <li>controller - See here for API information.</li> <li>data - Returns values stored in <code>data</code> attribute of a parameter in uihints.</li> <li>tableInfo - Set when custom control is a cell in a table.<ul> <li>table (boolean) Set to true when in a table cell</li> <li>editStyle (string) Valid values are \u201csummary\u201d and \u201cinline\u201d. \u201csummary\u201d is set when the control will display either below the table (\u201con_panel\u201d) or in a \u201csubpanel\u201d.  This allows the custom control to display a summary value in the cell and something else for the custom control.</li> </ul> </li> <li>renderControl() - Called on all Redux store changes:<ul> <li>property value changes (property APIs)</li> <li>state changes (state APIs)</li> <li>schema changes (schema APIs)</li> <li>row selection changes (selection APIs)</li> <li>messages changes (message APIs)</li> </ul> </li> </ul>"},{"location":"04.06-custom-components/#custom-react-components_1","title":"Custom React components","text":"<p>Example <pre><code>renderControl() {\n    return (\n        &lt;CustomCtrlToggle\n            key={controlId}\n            propertyId={this.propertyId}\n            controller={this.controller}\n        /&gt;\n    );\n}\n</code></pre></p>"},{"location":"04.06-custom-components/#examples_1","title":"Examples","text":"<p>https://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/components/custom-controls</p>"},{"location":"04.06-custom-components/#custom-condition-operators","title":"Custom Condition Operators","text":"<p>Custom condition operators allow users to create their own operators that can then be used for enablement, visibility, validation, and enum filtering.  The condition operators should always return a <code>boolean</code> value.</p>"},{"location":"04.06-custom-components/#custom-operator-interface","title":"Custom operator interface","text":"<pre><code>/**\n* This is the key used to determine if the operator should be ran.  Maps to the `op` defined in the\n* `condition` in uihints\n* @return string\n*/\nfunction op()\n\n/**\n* @param see below\n* @return boolean\n*/\nfunction evaluate(paramInfo, param2Info, value, controller)\n</code></pre> <ul> <li>paramInfo (object) - <code>parameter_ref</code> set in the <code>condition</code> in uihints<ul> <li>control (object) - contains information about the control.</li> <li>value (any) - current property value</li> </ul> </li> <li>param2Info (object) - <code>parameter_2_ref</code> set in the <code>condition</code> in uihints.  See <code>paramInfo</code> for object info</li> <li>value - <code>value</code> set in the <code>condition</code> in uihints.  If no value specific this will be <code>undefined</code></li> <li>controller - See here for API information.</li> </ul> <p>Example <pre><code>function op() {\n  return \"customMax\";\n}\n\nfunction evaluate(paramInfo, param2Info, value, controller) {\n  const supportedControls = [\"numberfield\"];\n  if (supportedControls.indexOf(paramInfo.control.controlType) &gt;= 0) {\n    return paramInfo.value &lt; value;\n  }\n  return true;\n}\n\nmodule.exports.op = op;\nmodule.exports.evaluate = evaluate;\n</code></pre> <pre><code>{\n    \"evaluate\": {\n        \"condition\": {\n            \"parameter_ref\": \"custom_op_num\",\n            \"op\": \"customMax\",\n            \"value\": 100\n        }\n    }\n}\n</code></pre></p>"},{"location":"04.06-custom-components/#examples_2","title":"Examples","text":"<p>https://github.com/elyra-ai/canvas/tree/master/canvas_modules/harness/src/client/custom/condition-ops https://github.com/elyra-ai/canvas/tree/master/canvas_modules/common-canvas/src/common-properties/ui-conditions/condition-ops</p>"},{"location":"04.07-properties-controller/","title":"Properties Controller","text":""},{"location":"04.07-properties-controller/#common-properties-controller-api","title":"Common Properties Controller API","text":"<p>propertyId <pre><code>const propertyId = {\n  name: {parameter name defined in operator definition},\n  row: {row in table/array}, // optional when col not set\n  col: {col in table}, // optional\n  propertyId: {propertyId of the nested structure} // optional\n}\n</code></pre></p>"},{"location":"04.07-properties-controller/#property-methods","title":"Property methods","text":"<pre><code>/*\n * options - optional object of config options where:\n *   setDefaultValues (boolean): when set to true, set default values from parameter definition\n */\nsetPropertyValues(values, options)\nupdatePropertyValue(propertyId, value)\n\n/*\n * options - optional object of config options where:\n *   filterHiddenDisabled (boolean): when set to true, filter out data values with a state of disabled or hidden\n *   filterHiddenControls (boolean): when set to true, filter out data values having control type hidden\n *   applyProperties (boolean): when set to true, will return data values in the format expected by the `applyPropertyChanges` callback. If unset or false, will return the internal format used by Common Properties.\n */\ngetPropertyValue(propertyId, options)\n\n/*\n * options - optional object of config options where:\n *   filterHiddenDisabled (boolean): when set to true, filter out data values with a state of disabled or hidden\n *   filterHiddenControls (boolean): when set to true, filter out data values having control type hidden\n *   applyProperties (boolean): when set to true, will return data values in the format expected by the `applyPropertyChanges` callback. If unset or false, will return the internal format used by Common Properties.\n */\ngetPropertyValues(options)\n</code></pre>"},{"location":"04.07-properties-controller/#message-methods","title":"Message methods","text":"<pre><code>/*\n * Returns current list of error messages\n * @filteredPipeline (boolean) optional\n * @filterHiddenDisable (boolean) optional. If true, will not return error messages from controls that are hidden or disabled\n * @filterDisplayError (boolean) optional. If true, will not return error messages that are not displayed in the editor\n * when filteredPipeline=true returns enabled/visible control messages and only 1 per control.\n */\ngetAllErrorMessages()\ngetErrorMessages(filteredPipeline, filterHiddenDisable, filterSuccess, filterDisplayError = true)\ngetErrorMessage(propertyId, filterHiddenDisable = false, filterSuccess = false, filterDisplayError = true)\ngetRequiredErrorMessages()\nsetErrorMessages(messages)\nupdateErrorMessage(propertyId, message)\n</code></pre>"},{"location":"04.07-properties-controller/#state-methods-disableenabled-hiddenvisible","title":"State methods (disable/enabled &amp; hidden/visible)","text":"<pre><code>getControlState(propertyId)\ngetControlStates()\nsetControlStates(states)\n\n/*\n * @propertyId - see above\n * @state - valid values are \"enabled\", \"disabled\", \"visible\", \"hidden\"\n */\nupdateControlState(propertyId, state)\n</code></pre>"},{"location":"04.07-properties-controller/#datasetmetadata-methods","title":"DatasetMetadata methods","text":"<pre><code>getDatasetMetadata()\n\n/*\n * @datasetMetadata - see [schema](https://github.com/elyra-ai/pipeline-schemas/blob/master/common-pipeline/datarecord-metadata/datarecord-metadata-v1-schema.json)\n */\nsetDatasetMetadata(datasetMetadata)\n</code></pre>"},{"location":"04.07-properties-controller/#row-selection-methods","title":"Row selection methods","text":"<pre><code>/*\n * Returns table row selection indices as an array of integers.\n * @propertyId - see above\n */\ngetSelectedRows(propertyId)\n\n/*\n * Updates table row selections for the given table control.\n * @propertyId - see above\n * @selection - A zero-based array of integer selection indices\n */\nupdateSelectedRows(propertyId, selection)\n\n/*\n * Clears selected table rows for the given table.\n * @propertyId - see above\n * If the propertyId is omitted all table row selections are cleared\n */\nclearSelectedRows(propertyId)\n\n/*\n * Adds a row selection listener for a table or list.\n * @propertyId - see above\n * @listener - callback function for when a selection is made in the table or list\n */\naddRowSelectionListener(propertyId, listener)\n\n/*\n * Removes the row selection listener from a table or list.\n * @propertyId - see above\n */\nremoveRowSelectionListener(propertyId)\n</code></pre>"},{"location":"04.07-properties-controller/#validation-methods","title":"Validation methods","text":"<pre><code>/*\n * Runs validation conditions on all controls\n */\nvalidatePropertiesValues()\n\n/*\n * Validates a specific propertyId\n * @propertyId - see above\n */\nvalidateInput(propertyId)\n</code></pre>"},{"location":"04.07-properties-controller/#control-methods","title":"Control methods","text":"<pre><code>/*\n * Update the enum values for a given control.  Used when enum values aren't static\n * @propertyId - see above\n * @valuesObj (array) [{ value: &lt;string, number, boolean&gt; , label: \"&lt;string&gt;\" }]\n */\nupdateControlEnumValues(propertyId, valuesObj)\n</code></pre>"},{"location":"04.07-properties-controller/#general-methods","title":"General methods","text":"<pre><code>/*\n * Returns the current size of the RHS flyout.\n */\ngetEditorSize()\n\n/*\n * Sets default property values from parameter definition in the propertiesController.\n * Note - These values won't be displayed on the UI. Host applications can call getPropertyValues() to retrieve the values.\n * @paramDef - Follows the format of https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/parameter-defs/parameter-defs-v3-schema.json\n */\nsetParamDef(paramDef)\n\n/*\n * Returns the id of top-level active tab or accordion\n */\ngetTopLevelActiveGroupId()\n\n/*\n * Makes the passed in groupId active.  Only works for top-level groups\n */\nsetTopLevelActiveGroupId(groupId)\n</code></pre>"},{"location":"04.07-properties-controller/#disable-move-row-buttons-methods","title":"Disable move row buttons methods","text":"<pre><code>/*\n * Disable table row move buttons for all propertyIds in given array\n * @param propertyIds Array of propertyIds\n *\n */\nsetDisableRowMoveButtons(propertyIds)\n\n/*\n * Returns array of propertyIds for which row move buttons will be disabled\n *  @return Array of propertyIds\n */\ngetDisableRowMoveButtons()\n\n/*\n * Check if row move buttons should be disabled for given propertyId\n * @param propertyId  The unique property identifier\n * @return boolean\n */\nisDisableRowMoveButtons(propertyId)\n</code></pre>"},{"location":"04.07-properties-controller/#custom-panel-and-control-methods","title":"Custom panel and control methods","text":"<pre><code>/*\n * Only used in custom panel to allow for custom property summary values to be displayed\n * Displays the value set in propertiesReducer for that parameter\n * @propertyId - see above\n * @label (string)\n * @inSummary (boolean)\n */\nsetControlInSummary(propertyId, label, inSummary)\n\n/*\n * Sets the content to be displayed in the summaryPanel for a customPanel property.\n * The summary panel will directly display the content.\n * @propertyId - see above\n * @content = { value: &lt;object&gt; , label: \"&lt;value&gt;\" }\n */\nupdateCustPropSumPanelValue(propertyId, content)\n\n/*\n * Returns a standard control that can then be used in a customPanel.\n * @propertyId - See above\n * @paramDef - Follows the format of https://github.com/elyra-ai/pipeline-schemas/blob/master/common-canvas/parameter-defs/parameter-defs-v1-schema.json).  titleDefinition, current_parameters, conditions, dataset_metadata are ignored and are optional.\n * @parameter - This is the parameter from the paramDef to create the control for.\n */\ncreateControl(propertyId, paramDef, parameter)\n\n/*\n * Returns the translated text for a control given a resource key.\n * Users should be able to use the values from resources that has been uploaded as part of paramDef.\n * @key - Resource key\n * @value - Default value returned when no resource or key has been found.\n */\ngetResource(key, value)\n</code></pre>"},{"location":"04.07-properties-controller/#maxlength-for-single-line-and-multi-line-control-methods","title":"maxLength for single-line and multi-line control methods","text":"<pre><code>/*\n * Returns the maximum characters allowed for multi-line string controls\n * Default value is 1024\n */\ngetMaxLengthForMultiLineControls()\n\n/*\n * Returns the maximum characters allowed for single-line string controls\n * Default value is 128\n */\ngetMaxLengthForSingleLineControls()\n</code></pre>"},{"location":"04.07-properties-controller/#enablingdisabling-addremoverows-methods","title":"Enabling/disabling addRemoveRows methods","text":"<pre><code>/*\n * Set the addRemoveRows attribute to 'enabled' for the given propertyId\n * @param propertyId The unique property identifier\n * @param enabled boolean value to enable or disable addRemoveRows\n */\nsetAddRemoveRows(propertyId, enabled)\n\n/*\n * Returns the true if addRemoveRows is enabled for the given propertyID\n * @param propertyId The unique property identifier\n * @return boolean\n */\ngetAddRemoveRows(propertyId)\n</code></pre>"},{"location":"04.07-properties-controller/#enablingdisabling-properties-editor-save-button-methods","title":"Enabling/disabling properties editor \u201csave\u201d button methods","text":"<pre><code>/*\n * Set the main \"save\" button to disabled(true) or enabled(false)\n * @param saveDisable (boolean)\n */\nsetSaveButtonDisable(saveDisable)\n\n/*\n * Returns the true if the main \"save\" button is disabled, false otherwise\n * @return boolean\n */\ngetSaveButtonDisable()\n</code></pre>"},{"location":"04.07-properties-controller/#add-static-rows-for-table-controls-which-will-disable-the-re-ordering-of-the-rows-that-are-set-as-static-for-the-given-propertyid","title":"Add static rows for table controls which will disable the re-ordering of the rows that are set as static for the given propertyId","text":"<pre><code>/*\n * Set static rows for the given propertyId\n * @param propertyId The unique property identifier\n * @param staticRowsArr Array of first n row indexes or last n row indexes\n */\nupdateStaticRows(propertyId, staticRowsArr)\n\n/*\n * Returns the static rows set for the given propertyId\n * @param propertyId The unique property identifier\n */\ngetStaticRows(propertyId)\n\n/*\n * Removes the static rows set for the given propertyId\n * @param propertyId The unique property identifier\n */\nclearStaticRows(propertyId)\n</code></pre>"},{"location":"04.07-properties-controller/#enablingdisabling-custom-table-buttons","title":"Enabling/disabling custom table buttons","text":"<pre><code>/*\n * Set the table button to 'enabled' for the given propertyId\n * @param propertyId The unique property identifier\n * @param buttonId The unique button identifier\n * @param enabled boolean value to enable or disable the button\n */\nsetTableButtonEnabled(propertyId, buttonId, enabled)\n\n/*\n * Returns the table button states for the given propertyID\n * @param propertyId The unique property identifier\n * @return object An object of buttonIds mapped to their enabled state\n */\ngetTableButtons(propertyId)\n\n/*\n * Returns the true if the table button is enabled for the given propertyID and buttonId\n * @param propertyId The unique property identifier\n * @param buttonId The unique button identifier\n * @return boolean\n */\ngetTableButtonEnabled(propertyId, buttonId)\n</code></pre>"},{"location":"04.07-properties-controller/#column-visibility-methods","title":"Column visibility methods","text":"<pre><code>/*\n * Check if given column is visible in the table\n * @param propertyId The unique property identifier\n * @param columnIndex Column index in the table\n */\ngetColumnVisibility(propertyId, columnIndex)\n\n/*\n * Set column visibility\n * @param propertyId The unique property identifier\n * @param columnIndex Column index in the table\n * @param value Boolean value to set column visible/invisible\n */\ntoggleColumnVisibility(propertyId, columnIndex, value)\n</code></pre>"},{"location":"04.07-properties-controller/#enablingdisabling-wide-flyout-ok-button-methods","title":"Enabling/disabling wide flyout \u201cOK\u201d button methods","text":"<pre><code>/*\n * Set the \"OK\" button in Wide Flyout to disabled(true) or enabled(false) for given summary panel\n * @param panelId {name: panel.id}\n * @param wideFlyoutPrimaryButtonDisable boolean\n */\nsetWideFlyoutPrimaryButtonDisabled(panelId, wideFlyoutPrimaryButtonDisable)\n\n/*\n * @param panelId {name: panel.id}\n */\ngetWideFlyoutPrimaryButtonDisabled(panelId)\n</code></pre>"},{"location":"04.08-properties-config/","title":"Properties Config","text":"<p>The Properties Config is an object passed as an optional prop to the <code>&lt;CommonProperties&lt;</code> React object containing the following fields:</p> <ul> <li> <p>containerType <code>string</code>: type of container to display the properties, can be \u201cModal\u201d, \u201cTearsheet\u201d, or \u201cCustom\u201d.  default: <code>\"Custom\"</code></p> </li> <li> <p>rightFlyout <code>boolean</code>: If set to true, groups will be displayed as an accordion. If false, groups are displayed as tabs. default: <code>false</code></p> </li> <li> <p>applyOnBlur <code>boolean</code>: calls applyPropertyChanges when focus leave Common Properties.  default: <code>false</code></p> </li> <li> <p>disableSaveOnRequiredErrors <code>boolean</code>: Disable the properties editor \u201csave\u201d button if there are required errors</p> </li> <li> <p>enableResize <code>boolean</code>: adds a button that allows the right-side fly-out editor to expand/collapse between small and medium sizes. default: <code>true</code></p> </li> <li> <p>conditionReturnValueHandling <code>string</code>: used to determine how hidden or disabled control values are returned in applyPropertyChanges callback.  Current options are \u201cvalue\u201d or \u201cnull\u201d.  default: <code>\"value\"</code></p> </li> <li> <p>buttonLabels <code>object</code>:</p> <ul> <li>primary <code>string</code>: Label to use for the primary button of the properties dialog</li> <li>secondary <code>string</code>: Label to use for the secondary button of the properties dialog</li> </ul> </li> <li> <p>heading <code>boolean</code>: show heading and heading icon in right-side fly-out panels. default: <code>false</code></p> </li> <li> <p>schemaValidation <code>boolean</code>: If set to true, schema validation will be enabled when a parameter definition has been set in CommonProperties. Any errors found will be reported on the browser dev console. It is recommended you run with schema validation switched on while in development mode.</p> </li> <li> <p>applyPropertiesWithoutEdit <code>boolean</code>: When true, will always call <code>applyPropertyChanges</code> even if no changes were made.  default: <code>false</code></p> </li> <li> <p>maxLengthForMultiLineControls <code>number</code> - maximum characters allowed for multi-line string controls like textarea. default: 1024</p> </li> <li> <p>maxLengthForSingleLineControls <code>number</code> - maximum characters allowed for single-line string controls like textfield. default: 128</p> </li> <li> <p>convertValueDataTypes <code>boolean</code> - Default false. If set to true, currentParameter values whose data type does not match what is defined in the parameter definitions will be converted to the specified data type.</p> </li> <li> <p>trimSpaces <code>boolean</code> - Default true. If set to false, condition ops(<code>isEmpty</code>, <code>isNotEmpty</code>) and <code>required</code> fields are allowed to only contain spaces without triggering condition errors.</p> </li> <li> <p>showRequiredIndicator <code>boolean</code> - Default true to show <code>(required)</code> indicator. If set to false, show <code>(optional)</code> indicator next to properties label.</p> </li> <li> <p>showAlertsTab <code>boolean</code> - Default true to show \u201cAlerts\u201d tab whenever there are error or warning messages. If set to false, Alerts tab won\u2019t be displayed.</p> </li> <li> <p>returnValueFiltering <code>array</code> - Default []. When set this will filter out any values in the array in the parameters returned when <code>applyPropertyChanges</code> is call.  Only primitive data types are currently supported.</p> </li> <li> <p>categoryView <code>string</code> - View categories in right-flyout. Can be <code>\"accordions\"</code> or <code>\"tabs\"</code>. default: <code>\"accordions\"</code>.</p> </li> </ul>"},{"location":"05-faq/","title":"Frequently asked questions","text":""},{"location":"05-faq/#history","title":"History","text":"What is the relationship  between Elyra Canvas and the Elyra AI Toolkit? <p>Elyra Canvas is a repo inside the Elyra AI Toolkit. The Elyra repo in the toolkit is dependent on Elyra Canvas but Elyra Canvas is not dependent on it or any repo in the toolkit other than the Elyra Pipeline Schemas repo.</p>"},{"location":"05-faq/#common-canvas","title":"Common Canvas","text":""},{"location":"05-faq/#questions-about-nodes","title":"Questions about Nodes","text":"With resizeable nodes (enableResizableNodes: true) why don\u2019t the shapes defined by bodyPath and selectionPath change when resizing a node? <p>The bodyPath and selectionPath \u2018shapes\u2019 do not automatically redraw when the user resizes the node. However, a function that returns a path can be provided for those fields instead of a string, so the application can return whatever shape it prefers as the resizing progresses. Obviously, these functions are called in real-time so they needs to return very quickly.</p> Can React objects specified in nodeExternalObject display supernodes and, if so, how is the sub-flow rendered? <p>Yes, \u2019nodeExternalObject` is supported for supernodes. The way it works is:</p> <ul> <li>If the supernode is collapsed (that is, it looks like a regular node) then the React node is used in the same way as for a regular node</li> <li>If the supernode it expanded in-place, then the React object is still used in the same way and the <code>&lt;svg&gt;</code> area that displays the sub-flow is displayed by Common Canvas over the top of the node body.</li> <li>If the user is viewing the supernode \u2018full-page\u2019 then the sub-flow is rendered in the usual way since the parent supernode is not visible at that point.</li> </ul> <p>There is an example of this in the \u2018React Nodes - Carbon Charts\u2019 sample application in the test harness.</p> <p></p> When displaying React nodes using nodeExternalObject field, how can the application pass in its own props to the component? <p>The application can add whatever it wants to pass in as a field in either the nodeData object or the Canvas Controller \u2014 making sure not to over write any of the existing fields that are there by default of course. So if you wanted to pass in your own data on a node-by-node basis you could set a field in the app_data field of each node. Something like:</p> <pre><code>    const nodeId = \"123\";\n\n    const mydtaa = {\n        field1: val1\n        field2: val2\n    }\n\n    canvasController.setNodeProperties(\n        nodeId,\n        { app_data: mydata }\n    );\n</code></pre> <p>Then in the React object just reference the fields like: <pre><code>    const f1 = this.props.nodeData.app_data.field1;\n</code></pre></p>"},{"location":"05-faq/#questions-about-comments","title":"Questions about Comments","text":"With markdown enabled in comments, why isn\u2019t the whitespace preserved when the user leaves edit mode? <p>That\u2019s the way markdown works. It removes white space in the entered text. For example, if you enter similar text into  a comment in a GitHub issue and look at the preview you\u2019ll see the whitespace is removed.</p> <p>Common Canvas is using a third party library to convert what the user enters to the HTML that is displayed so the removal of whitespace is not under its control.</p> <p>However, Comments support the ability to enter HTML directly into the markdown text. HTML can be used to preserve whitespace and do many other styling and customizations to the text.</p> Are there any plans to support different fonts in comments? <p>In Elyra Canvas v13.0.0, there is now a feature that allows the user to enter HTML in to the markdown text. This allows fonts and many other customizations of the text \u2014 although the user does need to know what they are doing with HTML.</p>"},{"location":"06-contributing/","title":"Guidelines for Development","text":"<p>Some guidelines for contributing to Elyra Canvas are included in this section including:</p> <ul> <li>Style guidelines</li> <li>Testing guidelines</li> </ul>"},{"location":"06.01-style-guidelines/","title":"Style Guidelines for Development","text":""},{"location":"06.01-style-guidelines/#elyra-canvas-styling-guidelines","title":"Elyra Canvas styling guidelines","text":"<ul> <li>Used the <code>data-id</code> attribute on inputs to be used for automated tests.  Format for Common Properties should be <code>properties-</code></li> <li>className format format for Common Properties should be <code>properties-</code></li> <li>Limit the use of html(DOM) ids</li> <li>Minimum inline styling.  This allows for consumers to easily override styling.</li> <li>scss/sass styling should be added to the component\u2019s folder</li> <li>No <code>important!</code> in styling</li> <li>Use variables for all colors(preferably from carbon)</li> </ul>"},{"location":"06.02-testing-guidelines/","title":"Testing Guidelines for Development","text":""},{"location":"06.02-testing-guidelines/#unit-testing","title":"Unit Testing","text":"<p>The Canvas unit tests are automated with the primary purpose of providing rapid feedback to the developers.  The test cases are run during every development build.   Unit test cases are written using Jest Jest Tutorial.  The test cases should be written and delivered at the time that a feature or enhancement is delivered.</p> <p>Unit test cases should focus on good coverage of a function/service.  We are current investigating code coverage analysis tools and will update this doc when it is implemented.</p> <p>Unit test case coverage should focus on these areas:</p> <ul> <li>All APIs and all UI elements.</li> <li>All component properties.</li> <li>A variety of input data.</li> </ul> <p>Here is a good blog on JavaScript Unit Testing</p>"},{"location":"06.02-testing-guidelines/#functional-testing","title":"Functional Testing","text":"<p>The Canvas Functional Test cases will be automated and run during code delivery.  The function test case will be automated and written using Cypress.</p> <p>Functional Testing coverage includes the following types of tests.</p> <ul> <li>Core functionality</li> <li>Inter-operate with other Canvas elements.</li> <li>Need to test both forward and backwards compatibility</li> <li>Negative / bounds</li> <li>Globalization / Localization<ul> <li>Handling of all strings using UTF-8</li> <li>Verifying non-English unicode data is handled appropriately</li> <li>Externalizing all strings that may be presented for the user (e.g., error messages, UI labels, etc.)</li> </ul> </li> <li>Access control security (roles / permissions / tenant management)</li> <li>Malicious and security (code scans such as AppScan, ethical hacking)</li> <li>Accessibility for UI</li> </ul>"},{"location":"06.02-testing-guidelines/#debugging-tests","title":"Debugging Tests","text":""},{"location":"06.02-testing-guidelines/#jest-tests-unit","title":"Jest tests (unit)","text":"<p>https://facebook.github.io/jest/docs/troubleshooting.html</p> <p>With node 8 or newer</p> <ul> <li>Add <code>debugger;</code> statement to your Jest test suite program where you want to stop and begin debugging.</li> <li> <p>If you want to run just a single test within your test program (rather than all of them) temporarily change the it() method for the test to be it.only(). For example, change:</p> <p><code>it(\"should add a node\", () =&gt; { ... })</code></p> <p>to be:</p> <p><code>it.only(\"should add a node\", () =&gt; { ... })</code></p> </li> <li> <p>In the console enter: <code>npm run debug</code> or <code>npm run debug &lt;test suite name&gt;</code></p> </li> <li>Open Chrome debugging tools by pasting this into the Chrome address field: chrome://inspect/</li> <li>You should see a \u2018remote\u2019 target for <code>node_modules/.bin/jest</code>. Click on the <code>inspect</code> link below it.</li> <li>Click on sources and then click the play button (right pointing blue triangle icon).</li> <li>The code should run to the point where your debugger statement was added.</li> </ul>"},{"location":"06.02-testing-guidelines/#testing-troubleshooting","title":"Testing Troubleshooting","text":"<p>When testing your application with Jest, this error might show up: <code>crypto.getRandomValues() not supported</code>. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported for details.</p> <p>To fix, added this to your jest setup file: <pre><code>const cryptoJest = require(\"crypto\");\nObject.defineProperty(global.self, \"crypto\", {\n    value: {\n        getRandomValues: (arr) =&gt; cryptoJest.randomBytes(arr.length)\n    }\n});\n</code></pre></p>"}]}